{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"./utils\");\n// The default Buffer size if one is not provided.\nconst DEFAULT_SMARTBUFFER_SIZE = 4096;\n// The default string encoding to use for reading/writing strings.\nconst DEFAULT_SMARTBUFFER_ENCODING = 'utf8';\nclass SmartBuffer {\n  /**\n   * Creates a new SmartBuffer instance.\n   *\n   * @param options { SmartBufferOptions } The SmartBufferOptions to apply to this instance.\n   */\n  constructor(options) {\n    this.length = 0;\n    this._encoding = DEFAULT_SMARTBUFFER_ENCODING;\n    this._writeOffset = 0;\n    this._readOffset = 0;\n    if (SmartBuffer.isSmartBufferOptions(options)) {\n      // Checks for encoding\n      if (options.encoding) {\n        utils_1.checkEncoding(options.encoding);\n        this._encoding = options.encoding;\n      }\n      // Checks for initial size length\n      if (options.size) {\n        if (utils_1.isFiniteInteger(options.size) && options.size > 0) {\n          this._buff = Buffer.allocUnsafe(options.size);\n        } else {\n          throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_SIZE);\n        }\n        // Check for initial Buffer\n      } else if (options.buff) {\n        if (Buffer.isBuffer(options.buff)) {\n          this._buff = options.buff;\n          this.length = options.buff.length;\n        } else {\n          throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_BUFFER);\n        }\n      } else {\n        this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE);\n      }\n    } else {\n      // If something was passed but it's not a SmartBufferOptions object\n      if (typeof options !== 'undefined') {\n        throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_OBJECT);\n      }\n      // Otherwise default to sane options\n      this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE);\n    }\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided internal Buffer size and optional encoding.\n   *\n   * @param size { Number } The size of the internal Buffer.\n   * @param encoding { String } The BufferEncoding to use for strings.\n   *\n   * @return { SmartBuffer }\n   */\n  static fromSize(size, encoding) {\n    return new this({\n      size: size,\n      encoding: encoding\n    });\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided Buffer and optional encoding.\n   *\n   * @param buffer { Buffer } The Buffer to use as the internal Buffer value.\n   * @param encoding { String } The BufferEncoding to use for strings.\n   *\n   * @return { SmartBuffer }\n   */\n  static fromBuffer(buff, encoding) {\n    return new this({\n      buff: buff,\n      encoding: encoding\n    });\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided SmartBufferOptions options.\n   *\n   * @param options { SmartBufferOptions } The options to use when creating the SmartBuffer instance.\n   */\n  static fromOptions(options) {\n    return new this(options);\n  }\n  /**\n   * Type checking function that determines if an object is a SmartBufferOptions object.\n   */\n  static isSmartBufferOptions(options) {\n    const castOptions = options;\n    return castOptions && (castOptions.encoding !== undefined || castOptions.size !== undefined || castOptions.buff !== undefined);\n  }\n  // Signed integers\n  /**\n   * Reads an Int8 value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readInt8(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt8, 1, offset);\n  }\n  /**\n   * Reads an Int16BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readInt16BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt16BE, 2, offset);\n  }\n  /**\n   * Reads an Int16LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readInt16LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt16LE, 2, offset);\n  }\n  /**\n   * Reads an Int32BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readInt32BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt32BE, 4, offset);\n  }\n  /**\n   * Reads an Int32LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readInt32LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt32LE, 4, offset);\n  }\n  /**\n   * Reads a BigInt64BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n  readBigInt64BE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigInt64BE');\n    return this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, offset);\n  }\n  /**\n   * Reads a BigInt64LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n  readBigInt64LE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigInt64LE');\n    return this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, offset);\n  }\n  /**\n   * Writes an Int8 value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeInt8(value, offset) {\n    this._writeNumberValue(Buffer.prototype.writeInt8, 1, value, offset);\n    return this;\n  }\n  /**\n   * Inserts an Int8 value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertInt8(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt8, 1, value, offset);\n  }\n  /**\n   * Writes an Int16BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeInt16BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt16BE, 2, value, offset);\n  }\n  /**\n   * Inserts an Int16BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertInt16BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt16BE, 2, value, offset);\n  }\n  /**\n   * Writes an Int16LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeInt16LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt16LE, 2, value, offset);\n  }\n  /**\n   * Inserts an Int16LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertInt16LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt16LE, 2, value, offset);\n  }\n  /**\n   * Writes an Int32BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeInt32BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt32BE, 4, value, offset);\n  }\n  /**\n   * Inserts an Int32BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertInt32BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt32BE, 4, value, offset);\n  }\n  /**\n   * Writes an Int32LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeInt32LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt32LE, 4, value, offset);\n  }\n  /**\n   * Inserts an Int32LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertInt32LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt32LE, 4, value, offset);\n  }\n  /**\n   * Writes a BigInt64BE value to the current write position (or at optional offset).\n   *\n   * @param value { BigInt } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeBigInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64BE');\n    return this._writeNumberValue(Buffer.prototype.writeBigInt64BE, 8, value, offset);\n  }\n  /**\n   * Inserts a BigInt64BE value at the given offset value.\n   *\n   * @param value { BigInt } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertBigInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64BE');\n    return this._insertNumberValue(Buffer.prototype.writeBigInt64BE, 8, value, offset);\n  }\n  /**\n   * Writes a BigInt64LE value to the current write position (or at optional offset).\n   *\n   * @param value { BigInt } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeBigInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64LE');\n    return this._writeNumberValue(Buffer.prototype.writeBigInt64LE, 8, value, offset);\n  }\n  /**\n   * Inserts a Int64LE value at the given offset value.\n   *\n   * @param value { BigInt } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertBigInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64LE');\n    return this._insertNumberValue(Buffer.prototype.writeBigInt64LE, 8, value, offset);\n  }\n  // Unsigned Integers\n  /**\n   * Reads an UInt8 value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readUInt8(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt8, 1, offset);\n  }\n  /**\n   * Reads an UInt16BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readUInt16BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, offset);\n  }\n  /**\n   * Reads an UInt16LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readUInt16LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, offset);\n  }\n  /**\n   * Reads an UInt32BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readUInt32BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, offset);\n  }\n  /**\n   * Reads an UInt32LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readUInt32LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, offset);\n  }\n  /**\n   * Reads a BigUInt64BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n  readBigUInt64BE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigUInt64BE');\n    return this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, offset);\n  }\n  /**\n   * Reads a BigUInt64LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n  readBigUInt64LE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigUInt64LE');\n    return this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, offset);\n  }\n  /**\n   * Writes an UInt8 value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeUInt8(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt8, 1, value, offset);\n  }\n  /**\n   * Inserts an UInt8 value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertUInt8(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt8, 1, value, offset);\n  }\n  /**\n   * Writes an UInt16BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeUInt16BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt16BE, 2, value, offset);\n  }\n  /**\n   * Inserts an UInt16BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertUInt16BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt16BE, 2, value, offset);\n  }\n  /**\n   * Writes an UInt16LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeUInt16LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt16LE, 2, value, offset);\n  }\n  /**\n   * Inserts an UInt16LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertUInt16LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt16LE, 2, value, offset);\n  }\n  /**\n   * Writes an UInt32BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeUInt32BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt32BE, 4, value, offset);\n  }\n  /**\n   * Inserts an UInt32BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertUInt32BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt32BE, 4, value, offset);\n  }\n  /**\n   * Writes an UInt32LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeUInt32LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt32LE, 4, value, offset);\n  }\n  /**\n   * Inserts an UInt32LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertUInt32LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt32LE, 4, value, offset);\n  }\n  /**\n   * Writes a BigUInt64BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeBigUInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE');\n    return this._writeNumberValue(Buffer.prototype.writeBigUInt64BE, 8, value, offset);\n  }\n  /**\n   * Inserts a BigUInt64BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertBigUInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE');\n    return this._insertNumberValue(Buffer.prototype.writeBigUInt64BE, 8, value, offset);\n  }\n  /**\n   * Writes a BigUInt64LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeBigUInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE');\n    return this._writeNumberValue(Buffer.prototype.writeBigUInt64LE, 8, value, offset);\n  }\n  /**\n   * Inserts a BigUInt64LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertBigUInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE');\n    return this._insertNumberValue(Buffer.prototype.writeBigUInt64LE, 8, value, offset);\n  }\n  // Floating Point\n  /**\n   * Reads an FloatBE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readFloatBE(offset) {\n    return this._readNumberValue(Buffer.prototype.readFloatBE, 4, offset);\n  }\n  /**\n   * Reads an FloatLE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readFloatLE(offset) {\n    return this._readNumberValue(Buffer.prototype.readFloatLE, 4, offset);\n  }\n  /**\n   * Writes a FloatBE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeFloatBE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeFloatBE, 4, value, offset);\n  }\n  /**\n   * Inserts a FloatBE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertFloatBE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeFloatBE, 4, value, offset);\n  }\n  /**\n   * Writes a FloatLE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeFloatLE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeFloatLE, 4, value, offset);\n  }\n  /**\n   * Inserts a FloatLE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertFloatLE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeFloatLE, 4, value, offset);\n  }\n  // Double Floating Point\n  /**\n   * Reads an DoublEBE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readDoubleBE(offset) {\n    return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, offset);\n  }\n  /**\n   * Reads an DoubleLE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n  readDoubleLE(offset) {\n    return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, offset);\n  }\n  /**\n   * Writes a DoubleBE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeDoubleBE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeDoubleBE, 8, value, offset);\n  }\n  /**\n   * Inserts a DoubleBE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertDoubleBE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeDoubleBE, 8, value, offset);\n  }\n  /**\n   * Writes a DoubleLE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n  writeDoubleLE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeDoubleLE, 8, value, offset);\n  }\n  /**\n   * Inserts a DoubleLE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n  insertDoubleLE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeDoubleLE, 8, value, offset);\n  }\n  // Strings\n  /**\n   * Reads a String from the current read position.\n   *\n   * @param arg1 { Number | String } The number of bytes to read as a String, or the BufferEncoding to use for\n   *             the string (Defaults to instance level encoding).\n   * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).\n   *\n   * @return { String }\n   */\n  readString(arg1, encoding) {\n    let lengthVal;\n    // Length provided\n    if (typeof arg1 === 'number') {\n      utils_1.checkLengthValue(arg1);\n      lengthVal = Math.min(arg1, this.length - this._readOffset);\n    } else {\n      encoding = arg1;\n      lengthVal = this.length - this._readOffset;\n    }\n    // Check encoding\n    if (typeof encoding !== 'undefined') {\n      utils_1.checkEncoding(encoding);\n    }\n    const value = this._buff.slice(this._readOffset, this._readOffset + lengthVal).toString(encoding || this._encoding);\n    this._readOffset += lengthVal;\n    return value;\n  }\n  /**\n   * Inserts a String\n   *\n   * @param value { String } The String value to insert.\n   * @param offset { Number } The offset to insert the string at.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n  insertString(value, offset, encoding) {\n    utils_1.checkOffsetValue(offset);\n    return this._handleString(value, true, offset, encoding);\n  }\n  /**\n   * Writes a String\n   *\n   * @param value { String } The String value to write.\n   * @param arg2 { Number | String } The offset to write the string at, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n  writeString(value, arg2, encoding) {\n    return this._handleString(value, false, arg2, encoding);\n  }\n  /**\n   * Reads a null-terminated String from the current read position.\n   *\n   * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).\n   *\n   * @return { String }\n   */\n  readStringNT(encoding) {\n    if (typeof encoding !== 'undefined') {\n      utils_1.checkEncoding(encoding);\n    }\n    // Set null character position to the end SmartBuffer instance.\n    let nullPos = this.length;\n    // Find next null character (if one is not found, default from above is used)\n    for (let i = this._readOffset; i < this.length; i++) {\n      if (this._buff[i] === 0x00) {\n        nullPos = i;\n        break;\n      }\n    }\n    // Read string value\n    const value = this._buff.slice(this._readOffset, nullPos);\n    // Increment internal Buffer read offset\n    this._readOffset = nullPos + 1;\n    return value.toString(encoding || this._encoding);\n  }\n  /**\n   * Inserts a null-terminated String.\n   *\n   * @param value { String } The String value to write.\n   * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n  insertStringNT(value, offset, encoding) {\n    utils_1.checkOffsetValue(offset);\n    // Write Values\n    this.insertString(value, offset, encoding);\n    this.insertUInt8(0x00, offset + value.length);\n    return this;\n  }\n  /**\n   * Writes a null-terminated String.\n   *\n   * @param value { String } The String value to write.\n   * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n  writeStringNT(value, arg2, encoding) {\n    // Write Values\n    this.writeString(value, arg2, encoding);\n    this.writeUInt8(0x00, typeof arg2 === 'number' ? arg2 + value.length : this.writeOffset);\n    return this;\n  }\n  // Buffers\n  /**\n   * Reads a Buffer from the internal read position.\n   *\n   * @param length { Number } The length of data to read as a Buffer.\n   *\n   * @return { Buffer }\n   */\n  readBuffer(length) {\n    if (typeof length !== 'undefined') {\n      utils_1.checkLengthValue(length);\n    }\n    const lengthVal = typeof length === 'number' ? length : this.length;\n    const endPoint = Math.min(this.length, this._readOffset + lengthVal);\n    // Read buffer value\n    const value = this._buff.slice(this._readOffset, endPoint);\n    // Increment internal Buffer read offset\n    this._readOffset = endPoint;\n    return value;\n  }\n  /**\n   * Writes a Buffer to the current write position.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n  insertBuffer(value, offset) {\n    utils_1.checkOffsetValue(offset);\n    return this._handleBuffer(value, true, offset);\n  }\n  /**\n   * Writes a Buffer to the current write position.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n  writeBuffer(value, offset) {\n    return this._handleBuffer(value, false, offset);\n  }\n  /**\n   * Reads a null-terminated Buffer from the current read poisiton.\n   *\n   * @return { Buffer }\n   */\n  readBufferNT() {\n    // Set null character position to the end SmartBuffer instance.\n    let nullPos = this.length;\n    // Find next null character (if one is not found, default from above is used)\n    for (let i = this._readOffset; i < this.length; i++) {\n      if (this._buff[i] === 0x00) {\n        nullPos = i;\n        break;\n      }\n    }\n    // Read value\n    const value = this._buff.slice(this._readOffset, nullPos);\n    // Increment internal Buffer read offset\n    this._readOffset = nullPos + 1;\n    return value;\n  }\n  /**\n   * Inserts a null-terminated Buffer.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n  insertBufferNT(value, offset) {\n    utils_1.checkOffsetValue(offset);\n    // Write Values\n    this.insertBuffer(value, offset);\n    this.insertUInt8(0x00, offset + value.length);\n    return this;\n  }\n  /**\n   * Writes a null-terminated Buffer.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n  writeBufferNT(value, offset) {\n    // Checks for valid numberic value;\n    if (typeof offset !== 'undefined') {\n      utils_1.checkOffsetValue(offset);\n    }\n    // Write Values\n    this.writeBuffer(value, offset);\n    this.writeUInt8(0x00, typeof offset === 'number' ? offset + value.length : this._writeOffset);\n    return this;\n  }\n  /**\n   * Clears the SmartBuffer instance to its original empty state.\n   */\n  clear() {\n    this._writeOffset = 0;\n    this._readOffset = 0;\n    this.length = 0;\n    return this;\n  }\n  /**\n   * Gets the remaining data left to be read from the SmartBuffer instance.\n   *\n   * @return { Number }\n   */\n  remaining() {\n    return this.length - this._readOffset;\n  }\n  /**\n   * Gets the current read offset value of the SmartBuffer instance.\n   *\n   * @return { Number }\n   */\n  get readOffset() {\n    return this._readOffset;\n  }\n  /**\n   * Sets the read offset value of the SmartBuffer instance.\n   *\n   * @param offset { Number } - The offset value to set.\n   */\n  set readOffset(offset) {\n    utils_1.checkOffsetValue(offset);\n    // Check for bounds.\n    utils_1.checkTargetOffset(offset, this);\n    this._readOffset = offset;\n  }\n  /**\n   * Gets the current write offset value of the SmartBuffer instance.\n   *\n   * @return { Number }\n   */\n  get writeOffset() {\n    return this._writeOffset;\n  }\n  /**\n   * Sets the write offset value of the SmartBuffer instance.\n   *\n   * @param offset { Number } - The offset value to set.\n   */\n  set writeOffset(offset) {\n    utils_1.checkOffsetValue(offset);\n    // Check for bounds.\n    utils_1.checkTargetOffset(offset, this);\n    this._writeOffset = offset;\n  }\n  /**\n   * Gets the currently set string encoding of the SmartBuffer instance.\n   *\n   * @return { BufferEncoding } The string Buffer encoding currently set.\n   */\n  get encoding() {\n    return this._encoding;\n  }\n  /**\n   * Sets the string encoding of the SmartBuffer instance.\n   *\n   * @param encoding { BufferEncoding } The string Buffer encoding to set.\n   */\n  set encoding(encoding) {\n    utils_1.checkEncoding(encoding);\n    this._encoding = encoding;\n  }\n  /**\n   * Gets the underlying internal Buffer. (This includes unmanaged data in the Buffer)\n   *\n   * @return { Buffer } The Buffer value.\n   */\n  get internalBuffer() {\n    return this._buff;\n  }\n  /**\n   * Gets the value of the internal managed Buffer (Includes managed data only)\n   *\n   * @param { Buffer }\n   */\n  toBuffer() {\n    return this._buff.slice(0, this.length);\n  }\n  /**\n   * Gets the String value of the internal managed Buffer\n   *\n   * @param encoding { String } The BufferEncoding to display the Buffer as (defaults to instance level encoding).\n   */\n  toString(encoding) {\n    const encodingVal = typeof encoding === 'string' ? encoding : this._encoding;\n    // Check for invalid encoding.\n    utils_1.checkEncoding(encodingVal);\n    return this._buff.toString(encodingVal, 0, this.length);\n  }\n  /**\n   * Destroys the SmartBuffer instance.\n   */\n  destroy() {\n    this.clear();\n    return this;\n  }\n  /**\n   * Handles inserting and writing strings.\n   *\n   * @param value { String } The String value to insert.\n   * @param isInsert { Boolean } True if inserting a string, false if writing.\n   * @param arg2 { Number | String } The offset to insert the string at, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   */\n  _handleString(value, isInsert, arg3, encoding) {\n    let offsetVal = this._writeOffset;\n    let encodingVal = this._encoding;\n    // Check for offset\n    if (typeof arg3 === 'number') {\n      offsetVal = arg3;\n      // Check for encoding\n    } else if (typeof arg3 === 'string') {\n      utils_1.checkEncoding(arg3);\n      encodingVal = arg3;\n    }\n    // Check for encoding (third param)\n    if (typeof encoding === 'string') {\n      utils_1.checkEncoding(encoding);\n      encodingVal = encoding;\n    }\n    // Calculate bytelength of string.\n    const byteLength = Buffer.byteLength(value, encodingVal);\n    // Ensure there is enough internal Buffer capacity.\n    if (isInsert) {\n      this.ensureInsertable(byteLength, offsetVal);\n    } else {\n      this._ensureWriteable(byteLength, offsetVal);\n    }\n    // Write value\n    this._buff.write(value, offsetVal, byteLength, encodingVal);\n    // Increment internal Buffer write offset;\n    if (isInsert) {\n      this._writeOffset += byteLength;\n    } else {\n      // If an offset was given, check to see if we wrote beyond the current writeOffset.\n      if (typeof arg3 === 'number') {\n        this._writeOffset = Math.max(this._writeOffset, offsetVal + byteLength);\n      } else {\n        // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n        this._writeOffset += byteLength;\n      }\n    }\n    return this;\n  }\n  /**\n   * Handles writing or insert of a Buffer.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   */\n  _handleBuffer(value, isInsert, offset) {\n    const offsetVal = typeof offset === 'number' ? offset : this._writeOffset;\n    // Ensure there is enough internal Buffer capacity.\n    if (isInsert) {\n      this.ensureInsertable(value.length, offsetVal);\n    } else {\n      this._ensureWriteable(value.length, offsetVal);\n    }\n    // Write buffer value\n    value.copy(this._buff, offsetVal);\n    // Increment internal Buffer write offset;\n    if (isInsert) {\n      this._writeOffset += value.length;\n    } else {\n      // If an offset was given, check to see if we wrote beyond the current writeOffset.\n      if (typeof offset === 'number') {\n        this._writeOffset = Math.max(this._writeOffset, offsetVal + value.length);\n      } else {\n        // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n        this._writeOffset += value.length;\n      }\n    }\n    return this;\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to read data.\n   *\n   * @param length { Number } The length of the data that needs to be read.\n   * @param offset { Number } The offset of the data that needs to be read.\n   */\n  ensureReadable(length, offset) {\n    // Offset value defaults to managed read offset.\n    let offsetVal = this._readOffset;\n    // If an offset was provided, use it.\n    if (typeof offset !== 'undefined') {\n      // Checks for valid numberic value;\n      utils_1.checkOffsetValue(offset);\n      // Overide with custom offset.\n      offsetVal = offset;\n    }\n    // Checks if offset is below zero, or the offset+length offset is beyond the total length of the managed data.\n    if (offsetVal < 0 || offsetVal + length > this.length) {\n      throw new Error(utils_1.ERRORS.INVALID_READ_BEYOND_BOUNDS);\n    }\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to insert data.\n   *\n   * @param dataLength { Number } The length of the data that needs to be written.\n   * @param offset { Number } The offset of the data to be written.\n   */\n  ensureInsertable(dataLength, offset) {\n    // Checks for valid numberic value;\n    utils_1.checkOffsetValue(offset);\n    // Ensure there is enough internal Buffer capacity.\n    this._ensureCapacity(this.length + dataLength);\n    // If an offset was provided and its not the very end of the buffer, copy data into appropriate location in regards to the offset.\n    if (offset < this.length) {\n      this._buff.copy(this._buff, offset + dataLength, offset, this._buff.length);\n    }\n    // Adjust tracked smart buffer length\n    if (offset + dataLength > this.length) {\n      this.length = offset + dataLength;\n    } else {\n      this.length += dataLength;\n    }\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to write data.\n   *\n   * @param dataLength { Number } The length of the data that needs to be written.\n   * @param offset { Number } The offset of the data to be written (defaults to writeOffset).\n   */\n  _ensureWriteable(dataLength, offset) {\n    const offsetVal = typeof offset === 'number' ? offset : this._writeOffset;\n    // Ensure enough capacity to write data.\n    this._ensureCapacity(offsetVal + dataLength);\n    // Adjust SmartBuffer length (if offset + length is larger than managed length, adjust length)\n    if (offsetVal + dataLength > this.length) {\n      this.length = offsetVal + dataLength;\n    }\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to write at least the given amount of data.\n   *\n   * @param minLength { Number } The minimum length of the data needs to be written.\n   */\n  _ensureCapacity(minLength) {\n    const oldLength = this._buff.length;\n    if (minLength > oldLength) {\n      let data = this._buff;\n      let newLength = oldLength * 3 / 2 + 1;\n      if (newLength < minLength) {\n        newLength = minLength;\n      }\n      this._buff = Buffer.allocUnsafe(newLength);\n      data.copy(this._buff, 0, 0, oldLength);\n    }\n  }\n  /**\n   * Reads a numeric number value using the provided function.\n   *\n   * @typeparam T { number | bigint } The type of the value to be read\n   *\n   * @param func { Function(offset: number) => number } The function to read data on the internal Buffer with.\n   * @param byteSize { Number } The number of bytes read.\n   * @param offset { Number } The offset to read from (optional). When this is not provided, the managed readOffset is used instead.\n   *\n   * @returns { T } the number value\n   */\n  _readNumberValue(func, byteSize, offset) {\n    this.ensureReadable(byteSize, offset);\n    // Call Buffer.readXXXX();\n    const value = func.call(this._buff, typeof offset === 'number' ? offset : this._readOffset);\n    // Adjust internal read offset if an optional read offset was not provided.\n    if (typeof offset === 'undefined') {\n      this._readOffset += byteSize;\n    }\n    return value;\n  }\n  /**\n   * Inserts a numeric number value based on the given offset and value.\n   *\n   * @typeparam T { number | bigint } The type of the value to be written\n   *\n   * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.\n   * @param byteSize { Number } The number of bytes written.\n   * @param value { T } The number value to write.\n   * @param offset { Number } the offset to write the number at (REQUIRED).\n   *\n   * @returns SmartBuffer this buffer\n   */\n  _insertNumberValue(func, byteSize, value, offset) {\n    // Check for invalid offset values.\n    utils_1.checkOffsetValue(offset);\n    // Ensure there is enough internal Buffer capacity. (raw offset is passed)\n    this.ensureInsertable(byteSize, offset);\n    // Call buffer.writeXXXX();\n    func.call(this._buff, value, offset);\n    // Adjusts internally managed write offset.\n    this._writeOffset += byteSize;\n    return this;\n  }\n  /**\n   * Writes a numeric number value based on the given offset and value.\n   *\n   * @typeparam T { number | bigint } The type of the value to be written\n   *\n   * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.\n   * @param byteSize { Number } The number of bytes written.\n   * @param value { T } The number value to write.\n   * @param offset { Number } the offset to write the number at (REQUIRED).\n   *\n   * @returns SmartBuffer this buffer\n   */\n  _writeNumberValue(func, byteSize, value, offset) {\n    // If an offset was provided, validate it.\n    if (typeof offset === 'number') {\n      // Check if we're writing beyond the bounds of the managed data.\n      if (offset < 0) {\n        throw new Error(utils_1.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);\n      }\n      utils_1.checkOffsetValue(offset);\n    }\n    // Default to writeOffset if no offset value was given.\n    const offsetVal = typeof offset === 'number' ? offset : this._writeOffset;\n    // Ensure there is enough internal Buffer capacity. (raw offset is passed)\n    this._ensureWriteable(byteSize, offsetVal);\n    func.call(this._buff, value, offsetVal);\n    // If an offset was given, check to see if we wrote beyond the current writeOffset.\n    if (typeof offset === 'number') {\n      this._writeOffset = Math.max(this._writeOffset, offsetVal + byteSize);\n    } else {\n      // If no numeric offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n      this._writeOffset += byteSize;\n    }\n    return this;\n  }\n}\nexports.SmartBuffer = SmartBuffer;","map":{"version":3,"mappings":"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","names":["DEFAULT_SMARTBUFFER_SIZE","DEFAULT_SMARTBUFFER_ENCODING","SmartBuffer","constructor","options","isSmartBufferOptions","encoding","utils_1","_encoding","size","_buff","Buffer","allocUnsafe","Error","INVALID_SMARTBUFFER_SIZE","buff","isBuffer","length","INVALID_SMARTBUFFER_BUFFER","INVALID_SMARTBUFFER_OBJECT","fromSize","fromBuffer","fromOptions","castOptions","undefined","readInt8","offset","_readNumberValue","prototype","readInt16BE","readInt16LE","readInt32BE","readInt32LE","readBigInt64BE","readBigInt64LE","writeInt8","value","_writeNumberValue","insertInt8","_insertNumberValue","writeInt16BE","insertInt16BE","writeInt16LE","insertInt16LE","writeInt32BE","insertInt32BE","writeInt32LE","insertInt32LE","writeBigInt64BE","insertBigInt64BE","writeBigInt64LE","insertBigInt64LE","readUInt8","readUInt16BE","readUInt16LE","readUInt32BE","readUInt32LE","readBigUInt64BE","readBigUInt64LE","writeUInt8","insertUInt8","writeUInt16BE","insertUInt16BE","writeUInt16LE","insertUInt16LE","writeUInt32BE","insertUInt32BE","writeUInt32LE","insertUInt32LE","writeBigUInt64BE","insertBigUInt64BE","writeBigUInt64LE","insertBigUInt64LE","readFloatBE","readFloatLE","writeFloatBE","insertFloatBE","writeFloatLE","insertFloatLE","readDoubleBE","readDoubleLE","writeDoubleBE","insertDoubleBE","writeDoubleLE","insertDoubleLE","readString","arg1","lengthVal","Math","min","_readOffset","slice","toString","insertString","_handleString","writeString","arg2","readStringNT","nullPos","i","insertStringNT","writeStringNT","writeOffset","readBuffer","endPoint","insertBuffer","_handleBuffer","writeBuffer","readBufferNT","insertBufferNT","writeBufferNT","_writeOffset","clear","remaining","readOffset","internalBuffer","toBuffer","encodingVal","destroy","isInsert","arg3","offsetVal","byteLength","ensureInsertable","_ensureWriteable","write","max","copy","ensureReadable","INVALID_READ_BEYOND_BOUNDS","dataLength","_ensureCapacity","minLength","oldLength","data","newLength","func","byteSize","call","INVALID_WRITE_BEYOND_BOUNDS","exports"],"sources":["../src/smartbuffer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}