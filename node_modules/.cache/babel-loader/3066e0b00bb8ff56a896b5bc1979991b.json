{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TaskManager, WaitTask } from '../common/WaitTask.js';\nimport { disposeSymbol } from '../util/disposable.js';\n/**\n * @internal\n */\nexport class Realm {\n  timeoutSettings;\n  taskManager = new TaskManager();\n  constructor(timeoutSettings) {\n    this.timeoutSettings = timeoutSettings;\n  }\n  async waitForFunction(pageFunction) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      polling = 'raf',\n      timeout = this.timeoutSettings.timeout(),\n      root,\n      signal\n    } = options;\n    if (typeof polling === 'number' && polling < 0) {\n      throw new Error('Cannot poll with non-positive interval');\n    }\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    const waitTask = new WaitTask(this, {\n      polling,\n      root,\n      timeout,\n      signal\n    }, pageFunction, ...args);\n    return await waitTask.result;\n  }\n  get disposed() {\n    return this.#disposed;\n  }\n  #disposed = false;\n  /** @internal */\n  [disposeSymbol]() {\n    this.#disposed = true;\n    this.taskManager.terminateAll(new Error('waitForFunction failed: frame got detached.'));\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAsBA,SAAQA,WAAW,EAAEC,QAAQ,QAAO,uBAAuB;AAC3D,SAAQC,aAAa,QAAO,uBAAuB;AAMnD;;;AAGA,OAAM,MAAgBC,KAAK;EACNC,eAAe;EACzBC,WAAW,GAAG,IAAIL,WAAW,EAAE;EAExCM,YAAYF,eAAgC;IAC1C,IAAI,CAACA,eAAe,GAAGA,eAAe;EACxC;EAqBA,MAAMG,eAAe,CAMnBC,YAA2B,EAOZ;IAAA,IANfC,8EAKI,EAAE;IAGN,MAAM;MACJC,OAAO,GAAG,KAAK;MACfC,OAAO,GAAG,IAAI,CAACP,eAAe,CAACO,OAAO,EAAE;MACxCC,IAAI;MACJC;IAAM,CACP,GAAGJ,OAAO;IACX,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAIA,OAAO,GAAG,CAAC,EAAE;MAC9C,MAAM,IAAII,KAAK,CAAC,wCAAwC,CAAC;;IAC1D,kCAVEC,IAAY;MAAZA,IAAY;IAAA;IAWf,MAAMC,QAAQ,GAAG,IAAIf,QAAQ,CAC3B,IAAI,EACJ;MACES,OAAO;MACPE,IAAI;MACJD,OAAO;MACPE;KACD,EACDL,YAEU,EACV,GAAGO,IAAI,CACR;IACD,OAAO,MAAMC,QAAQ,CAACC,MAAM;EAC9B;EAIA,IAAIC,QAAQ;IACV,OAAO,IAAI,CAAC,SAAS;EACvB;EAEA,SAAS,GAAG,KAAK;EACjB;EACA,CAAChB,aAAa,IAAC;IACb,IAAI,CAAC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACG,WAAW,CAACc,YAAY,CAC3B,IAAIL,KAAK,CAAC,6CAA6C,CAAC,CACzD;EACH","names":["TaskManager","WaitTask","disposeSymbol","Realm","timeoutSettings","taskManager","constructor","waitForFunction","pageFunction","options","polling","timeout","root","signal","Error","args","waitTask","result","disposed","terminateAll"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\api\\Realm.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {TimeoutSettings} from '../common/TimeoutSettings.js';\nimport type {\n  EvaluateFunc,\n  HandleFor,\n  InnerLazyParams,\n} from '../common/types.js';\nimport {TaskManager, WaitTask} from '../common/WaitTask.js';\nimport {disposeSymbol} from '../util/disposable.js';\n\nimport type {ElementHandle} from './ElementHandle.js';\nimport type {Environment} from './Environment.js';\nimport type {JSHandle} from './JSHandle.js';\n\n/**\n * @internal\n */\nexport abstract class Realm implements Disposable {\n  protected readonly timeoutSettings: TimeoutSettings;\n  readonly taskManager = new TaskManager();\n\n  constructor(timeoutSettings: TimeoutSettings) {\n    this.timeoutSettings = timeoutSettings;\n  }\n\n  abstract get environment(): Environment;\n\n  abstract adoptHandle<T extends JSHandle<Node>>(handle: T): Promise<T>;\n  abstract transferHandle<T extends JSHandle<Node>>(handle: T): Promise<T>;\n  abstract evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n  abstract evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n\n  async waitForFunction<\n    Params extends unknown[],\n    Func extends EvaluateFunc<InnerLazyParams<Params>> = EvaluateFunc<\n      InnerLazyParams<Params>\n    >,\n  >(\n    pageFunction: Func | string,\n    options: {\n      polling?: 'raf' | 'mutation' | number;\n      timeout?: number;\n      root?: ElementHandle<Node>;\n      signal?: AbortSignal;\n    } = {},\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>> {\n    const {\n      polling = 'raf',\n      timeout = this.timeoutSettings.timeout(),\n      root,\n      signal,\n    } = options;\n    if (typeof polling === 'number' && polling < 0) {\n      throw new Error('Cannot poll with non-positive interval');\n    }\n    const waitTask = new WaitTask(\n      this,\n      {\n        polling,\n        root,\n        timeout,\n        signal,\n      },\n      pageFunction as unknown as\n        | ((...args: unknown[]) => Promise<Awaited<ReturnType<Func>>>)\n        | string,\n      ...args\n    );\n    return await waitTask.result;\n  }\n\n  abstract adoptBackendNode(backendNodeId?: number): Promise<JSHandle<Node>>;\n\n  get disposed(): boolean {\n    return this.#disposed;\n  }\n\n  #disposed = false;\n  /** @internal */\n  [disposeSymbol](): void {\n    this.#disposed = true;\n    this.taskManager.terminateAll(\n      new Error('waitForFunction failed: frame got detached.')\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}