{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ip_1 = __importDefault(require(\"ip\"));\nconst net_1 = __importDefault(require(\"net\"));\n/**\n * Returns the IP address of the host that the Navigator is running on, as\n * a string in the dot-separated integer format.\n *\n * Example:\n *\n * ``` js\n * myIpAddress()\n *   // would return the string \"198.95.249.79\" if you were running the\n *   // Navigator on that host.\n * ```\n *\n * @return {String} external IP address\n */\nasync function myIpAddress() {\n  return new Promise((resolve, reject) => {\n    // 8.8.8.8:53 is \"Google Public DNS\":\n    // https://developers.google.com/speed/public-dns/\n    const socket = net_1.default.connect({\n      host: '8.8.8.8',\n      port: 53\n    });\n    const onError = () => {\n      // if we fail to access Google DNS (as in firewall blocks access),\n      // fallback to querying IP locally\n      resolve(ip_1.default.address());\n    };\n    socket.once('error', onError);\n    socket.once('connect', () => {\n      socket.removeListener('error', onError);\n      const addr = socket.address();\n      socket.destroy();\n      if (typeof addr === 'string') {\n        resolve(addr);\n      } else if (addr.address) {\n        resolve(addr.address);\n      } else {\n        reject(new Error('Expected a `string`'));\n      }\n    });\n  });\n}\nexports.default = myIpAddress;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AACA;AAEA;;;;;;;;;;;;;;AAce,eAAeA,WAAW;EACxC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IACtC;IACA;IACA,MAAMC,MAAM,GAAGC,aAAG,CAACC,OAAO,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAE,CAAE,CAAC;IACzD,MAAMC,OAAO,GAAG,MAAK;MACpB;MACA;MACAP,OAAO,CAACQ,YAAE,CAACC,OAAO,EAAE,CAAC;IACtB,CAAC;IACDP,MAAM,CAACQ,IAAI,CAAC,OAAO,EAAEH,OAAO,CAAC;IAC7BL,MAAM,CAACQ,IAAI,CAAC,SAAS,EAAE,MAAK;MAC3BR,MAAM,CAACS,cAAc,CAAC,OAAO,EAAEJ,OAAO,CAAC;MACvC,MAAMK,IAAI,GAAGV,MAAM,CAACO,OAAO,EAAE;MAC7BP,MAAM,CAACW,OAAO,EAAE;MAChB,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;QAC7BZ,OAAO,CAACY,IAAI,CAAC;OACb,MAAM,IAAKA,IAAoB,CAACH,OAAO,EAAE;QACzCT,OAAO,CAAEY,IAAoB,CAACH,OAAO,CAAC;OACtC,MAAM;QACNR,MAAM,CAAC,IAAIa,KAAK,CAAC,qBAAqB,CAAC,CAAC;;IAE1C,CAAC,CAAC;EACH,CAAC,CAAC;AACH;AAxBAC","names":["myIpAddress","Promise","resolve","reject","socket","net_1","connect","host","port","onError","ip_1","address","once","removeListener","addr","destroy","Error","exports"],"sources":["../src/myIpAddress.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}