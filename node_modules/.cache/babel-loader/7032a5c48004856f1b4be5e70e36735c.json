{"ast":null,"code":"\"use strict\";\n\n/**\n * Returns true if the string matches the specified shell\n * expression.\n *\n * Actually, currently the patterns are shell expressions,\n * not regular expressions.\n *\n * Examples:\n *\n * ``` js\n * shExpMatch(\"http://home.netscape.com/people/ari/index.html\", \"*\\/ari/*\")\n *   // is true.\n *\n * shExpMatch(\"http://home.netscape.com/people/montulli/index.html\", \"*\\/ari/*\")\n *   // is false.\n * ```\n *\n * @param {String} str is any string to compare (e.g. the URL, or the hostname).\n * @param {String} shexp is a shell expression to compare against.\n * @return {Boolean} true if the string matches the shell expression.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction shExpMatch(str, shexp) {\n  const re = toRegExp(shexp);\n  return re.test(str);\n}\nexports.default = shExpMatch;\n/**\n * Converts a \"shell expression\" to a JavaScript RegExp.\n *\n * @api private\n */\nfunction toRegExp(str) {\n  str = String(str).replace(/\\./g, '\\\\.').replace(/\\?/g, '.').replace(/\\*/g, '.*');\n  return new RegExp(`^${str}$`);\n}","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAwBA,UAAU,CAACC,GAAW,EAAEC,KAAa;EAC5D,MAAMC,EAAE,GAAGC,QAAQ,CAACF,KAAK,CAAC;EAC1B,OAAOC,EAAE,CAACE,IAAI,CAACJ,GAAG,CAAC;AACpB;AAHAK;AAKA;;;;;AAMA,SAASF,QAAQ,CAACH,GAAW;EAC5BA,GAAG,GAAGM,MAAM,CAACN,GAAG,CAAC,CACfO,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;EACtB,OAAO,IAAIC,MAAM,CAAC,IAAIR,GAAG,GAAG,CAAC;AAC9B","names":["shExpMatch","str","shexp","re","toRegExp","test","exports","String","replace","RegExp"],"sources":["../src/shExpMatch.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}