{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compile = void 0;\nconst util_1 = require(\"util\");\nconst degenerator_1 = require(\"./degenerator\");\nfunction compile(qjs, code, returnName) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const compiled = (0, degenerator_1.degenerator)(code, options.names ?? []);\n  const vm = qjs.newContext();\n  // Add functions to global\n  if (options.sandbox) {\n    for (const [name, value] of Object.entries(options.sandbox)) {\n      if (typeof value !== 'function') {\n        throw new Error(`Expected a \"function\" for sandbox property \\`${name}\\`, but got \"${typeof value}\"`);\n      }\n      const fnHandle = vm.newFunction(name, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        const result = value(...args.map(arg => quickJSHandleToHost(vm, arg)));\n        vm.runtime.executePendingJobs();\n        return hostToQuickJSHandle(vm, result);\n      });\n      fnHandle.consume(handle => vm.setProp(vm.global, name, handle));\n    }\n  }\n  const fnResult = vm.evalCode(`${compiled};${returnName}`, options.filename);\n  const fn = vm.unwrapResult(fnResult);\n  const t = vm.typeof(fn);\n  if (t !== 'function') {\n    throw new Error(`Expected a \"function\" named \\`${returnName}\\` to be defined, but got \"${t}\"`);\n  }\n  const r = async function () {\n    let promiseHandle;\n    let resolvedHandle;\n    try {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      const result = vm.callFunction(fn, vm.undefined, ...args.map(arg => hostToQuickJSHandle(vm, arg)));\n      promiseHandle = vm.unwrapResult(result);\n      const resolvedResultP = vm.resolvePromise(promiseHandle);\n      vm.runtime.executePendingJobs();\n      const resolvedResult = await resolvedResultP;\n      resolvedHandle = vm.unwrapResult(resolvedResult);\n      return quickJSHandleToHost(vm, resolvedHandle);\n    } catch (err) {\n      if (err && typeof err === 'object' && 'cause' in err && err.cause) {\n        if (typeof err.cause === 'object' && 'stack' in err.cause && 'name' in err.cause && 'message' in err.cause && typeof err.cause.stack === 'string' && typeof err.cause.name === 'string' && typeof err.cause.message === 'string') {\n          // QuickJS Error `stack` does not include the name +\n          // message, so patch those in to behave more like V8\n          err.cause.stack = `${err.cause.name}: ${err.cause.message}\\n${err.cause.stack}`;\n        }\n        throw err.cause;\n      }\n      throw err;\n    } finally {\n      promiseHandle?.dispose();\n      resolvedHandle?.dispose();\n    }\n  };\n  Object.defineProperty(r, 'toString', {\n    value: () => compiled,\n    enumerable: false\n  });\n  return r;\n}\nexports.compile = compile;\nfunction quickJSHandleToHost(vm, val) {\n  return vm.dump(val);\n}\nfunction hostToQuickJSHandle(vm, val) {\n  if (typeof val === 'undefined') {\n    return vm.undefined;\n  } else if (val === null) {\n    return vm.null;\n  } else if (typeof val === 'string') {\n    return vm.newString(val);\n  } else if (typeof val === 'number') {\n    return vm.newNumber(val);\n  } else if (typeof val === 'bigint') {\n    return vm.newBigInt(val);\n  } else if (typeof val === 'boolean') {\n    return val ? vm.true : vm.false;\n  } else if (util_1.types.isPromise(val)) {\n    const promise = vm.newPromise();\n    promise.settled.then(vm.runtime.executePendingJobs);\n    val.then(r => {\n      promise.resolve(hostToQuickJSHandle(vm, r));\n    }, err => {\n      promise.reject(hostToQuickJSHandle(vm, err));\n    });\n    return promise.handle;\n  } else if (util_1.types.isNativeError(val)) {\n    return vm.newError(val);\n  }\n  throw new Error(`Unsupported value: ${val}`);\n}","map":{"version":3,"mappings":"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","names":["compile","qjs","code","returnName","options","compiled","names","vm","newContext","sandbox","name","value","Object","entries","Error","fnHandle","newFunction","args","result","map","arg","quickJSHandleToHost","runtime","executePendingJobs","hostToQuickJSHandle","consume","handle","setProp","global","fnResult","evalCode","filename","fn","unwrapResult","t","typeof","r","promiseHandle","resolvedHandle","callFunction","undefined","resolvedResultP","resolvePromise","resolvedResult","err","cause","stack","message","dispose","defineProperty","enumerable","exports","val","dump","null","newString","newNumber","newBigInt","true","false","util_1","isPromise","promise","newPromise","settled","then","resolve","reject","isNativeError","newError"],"sources":["../src/compile.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}