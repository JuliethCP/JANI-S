{"ast":null,"code":"/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nvar _a, _b, _c;\nimport { format } from 'util';\nimport { normalize, resolve } from 'path';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nimport { YargsParser } from './yargs-parser.js';\nimport { readFileSync } from 'fs';\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\nconst minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\nif (nodeVersion) {\n  const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n  if (major < minNodeVersion) {\n    throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n  }\n}\n// Creates a yargs-parser instance using Node.js standard libraries:\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n  cwd: process.cwd,\n  env: () => {\n    return env;\n  },\n  format,\n  normalize,\n  resolve,\n  // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n  // we can exercise all the lines below:\n  require: path => {\n    if (typeof require !== 'undefined') {\n      return require(path);\n    } else if (path.match(/\\.json$/)) {\n      // Addresses: https://github.com/yargs/yargs/issues/2040\n      return JSON.parse(readFileSync(path, 'utf8'));\n    } else {\n      throw Error('only .json config files are supported in ESM');\n    }\n  }\n});\nconst yargsParser = function Parser(args, opts) {\n  const result = parser.parse(args.slice(), opts);\n  return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n  return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nexport default yargsParser;","map":{"version":3,"names":["_a","_b","_c","format","normalize","resolve","camelCase","decamelize","looksLikeNumber","YargsParser","readFileSync","minNodeVersion","process","env","YARGS_MIN_NODE_VERSION","Number","nodeVersion","versions","node","version","slice","major","match","Error","parser","cwd","require","path","JSON","parse","yargsParser","Parser","args","opts","result","argv","detailed"],"sources":["D:/Julieth-Campos/PSO/node_modules/@puppeteer/browsers/node_modules/yargs-parser/build/lib/index.js"],"sourcesContent":["/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nvar _a, _b, _c;\nimport { format } from 'util';\nimport { normalize, resolve } from 'path';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nimport { YargsParser } from './yargs-parser.js';\nimport { readFileSync } from 'fs';\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\nif (nodeVersion) {\n    const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\n// Creates a yargs-parser instance using Node.js standard libraries:\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n    cwd: process.cwd,\n    env: () => {\n        return env;\n    },\n    format,\n    normalize,\n    resolve,\n    // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n    // we can exercise all the lines below:\n    require: (path) => {\n        if (typeof require !== 'undefined') {\n            return require(path);\n        }\n        else if (path.match(/\\.json$/)) {\n            // Addresses: https://github.com/yargs/yargs/issues/2040\n            return JSON.parse(readFileSync(path, 'utf8'));\n        }\n        else {\n            throw Error('only .json config files are supported in ESM');\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nexport default yargsParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}