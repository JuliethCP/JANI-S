{"ast":null,"code":"/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Deferred } from '../util/Deferred.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { stringifyFunction } from '../util/Function.js';\nimport { TimeoutError } from './Errors.js';\nimport { LazyArg } from './LazyArg.js';\n/**\n * @internal\n */\nexport class WaitTask {\n  #world;\n  #polling;\n  #root;\n  #fn;\n  #args;\n  #timeout;\n  #timeoutError;\n  #result = Deferred.create();\n  #poller;\n  #signal;\n  #reruns = [];\n  constructor(world, options, fn) {\n    this.#world = world;\n    this.#polling = options.polling;\n    this.#root = options.root;\n    this.#signal = options.signal;\n    this.#signal?.addEventListener('abort', () => {\n      void this.terminate(this.#signal?.reason);\n    }, {\n      once: true\n    });\n    switch (typeof fn) {\n      case 'string':\n        this.#fn = `() => {return (${fn});}`;\n        break;\n      default:\n        this.#fn = stringifyFunction(fn);\n        break;\n    }\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n    this.#args = args;\n    this.#world.taskManager.add(this);\n    if (options.timeout) {\n      this.#timeoutError = new TimeoutError(`Waiting failed: ${options.timeout}ms exceeded`);\n      this.#timeout = setTimeout(() => {\n        void this.terminate(this.#timeoutError);\n      }, options.timeout);\n    }\n    void this.rerun();\n  }\n  get result() {\n    return this.#result.valueOrThrow();\n  }\n  async rerun() {\n    for (const prev of this.#reruns) {\n      prev.abort();\n    }\n    this.#reruns.length = 0;\n    const controller = new AbortController();\n    this.#reruns.push(controller);\n    try {\n      switch (this.#polling) {\n        case 'raf':\n          this.#poller = await this.#world.evaluateHandle(function (_ref, fn) {\n            let {\n              RAFPoller,\n              createFunction\n            } = _ref;\n            for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n              args[_key2 - 2] = arguments[_key2];\n            }\n            const fun = createFunction(fn);\n            return new RAFPoller(() => {\n              return fun(...args);\n            });\n          }, LazyArg.create(context => {\n            return context.puppeteerUtil;\n          }), this.#fn, ...this.#args);\n          break;\n        case 'mutation':\n          this.#poller = await this.#world.evaluateHandle(function (_ref2, root, fn) {\n            let {\n              MutationPoller,\n              createFunction\n            } = _ref2;\n            for (var _len3 = arguments.length, args = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n              args[_key3 - 3] = arguments[_key3];\n            }\n            const fun = createFunction(fn);\n            return new MutationPoller(() => {\n              return fun(...args);\n            }, root || document);\n          }, LazyArg.create(context => {\n            return context.puppeteerUtil;\n          }), this.#root, this.#fn, ...this.#args);\n          break;\n        default:\n          this.#poller = await this.#world.evaluateHandle(function (_ref3, ms, fn) {\n            let {\n              IntervalPoller,\n              createFunction\n            } = _ref3;\n            for (var _len4 = arguments.length, args = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {\n              args[_key4 - 3] = arguments[_key4];\n            }\n            const fun = createFunction(fn);\n            return new IntervalPoller(() => {\n              return fun(...args);\n            }, ms);\n          }, LazyArg.create(context => {\n            return context.puppeteerUtil;\n          }), this.#polling, this.#fn, ...this.#args);\n          break;\n      }\n      await this.#poller.evaluate(poller => {\n        void poller.start();\n      });\n      const result = await this.#poller.evaluateHandle(poller => {\n        return poller.result();\n      });\n      this.#result.resolve(result);\n      await this.terminate();\n    } catch (error) {\n      if (controller.signal.aborted) {\n        return;\n      }\n      const badError = this.getBadError(error);\n      if (badError) {\n        await this.terminate(badError);\n      }\n    }\n  }\n  async terminate(error) {\n    this.#world.taskManager.delete(this);\n    clearTimeout(this.#timeout);\n    if (error && !this.#result.finished()) {\n      this.#result.reject(error);\n    }\n    if (this.#poller) {\n      try {\n        await this.#poller.evaluateHandle(async poller => {\n          await poller.stop();\n        });\n        if (this.#poller) {\n          await this.#poller.dispose();\n          this.#poller = undefined;\n        }\n      } catch {\n        // Ignore errors since they most likely come from low-level cleanup.\n      }\n    }\n  }\n  /**\n   * Not all errors lead to termination. They usually imply we need to rerun the task.\n   */\n  getBadError(error) {\n    if (isErrorLike(error)) {\n      // When frame is detached the task should have been terminated by the IsolatedWorld.\n      // This can fail if we were adding this task while the frame was detached,\n      // so we terminate here instead.\n      if (error.message.includes('Execution context is not available in detached frame')) {\n        return new Error('Waiting failed: Frame detached');\n      }\n      // When the page is navigated, the promise is rejected.\n      // We will try again in the new execution context.\n      if (error.message.includes('Execution context was destroyed')) {\n        return;\n      }\n      // We could have tried to evaluate in a context which was already\n      // destroyed.\n      if (error.message.includes('Cannot find context with specified id')) {\n        return;\n      }\n      // Errors coming from WebDriver BiDi. TODO: Adjust messages after\n      // https://github.com/w3c/webdriver-bidi/issues/540 is resolved.\n      if (error.message.includes(\"AbortError: Actor 'MessageHandlerFrame' destroyed\")) {\n        return;\n      }\n      return error;\n    }\n    return new Error('WaitTask failed with an error', {\n      cause: error\n    });\n  }\n}\n/**\n * @internal\n */\nexport class TaskManager {\n  #tasks = new Set();\n  add(task) {\n    this.#tasks.add(task);\n  }\n  delete(task) {\n    this.#tasks.delete(task);\n  }\n  terminateAll(error) {\n    for (const task of this.#tasks) {\n      void task.terminate(error);\n    }\n    this.#tasks.clear();\n  }\n  async rerunAll() {\n    await Promise.all([...this.#tasks].map(task => {\n      return task.rerun();\n    }));\n  }\n}","map":{"version":3,"mappings":"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","names":["Deferred","isErrorLike","stringifyFunction","TimeoutError","LazyArg","WaitTask","create","constructor","world","options","fn","polling","root","signal","addEventListener","terminate","reason","once","args","taskManager","add","timeout","setTimeout","rerun","result","valueOrThrow","prev","abort","length","controller","AbortController","push","evaluateHandle","RAFPoller","createFunction","fun","context","puppeteerUtil","MutationPoller","document","ms","IntervalPoller","evaluate","poller","start","resolve","error","aborted","badError","getBadError","delete","clearTimeout","finished","reject","stop","dispose","undefined","message","includes","Error","cause","TaskManager","Set","task","terminateAll","clear","rerunAll","Promise","all","map"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\common\\WaitTask.ts"],"sourcesContent":["/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {ElementHandle} from '../api/ElementHandle.js';\nimport type {JSHandle} from '../api/JSHandle.js';\nimport type {Realm} from '../api/Realm.js';\nimport type {Poller} from '../injected/Poller.js';\nimport {Deferred} from '../util/Deferred.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\nimport {stringifyFunction} from '../util/Function.js';\n\nimport {TimeoutError} from './Errors.js';\nimport {LazyArg} from './LazyArg.js';\nimport type {HandleFor} from './types.js';\n\n/**\n * @internal\n */\nexport interface WaitTaskOptions {\n  polling: 'raf' | 'mutation' | number;\n  root?: ElementHandle<Node>;\n  timeout: number;\n  signal?: AbortSignal;\n}\n\n/**\n * @internal\n */\nexport class WaitTask<T = unknown> {\n  #world: Realm;\n  #polling: 'raf' | 'mutation' | number;\n  #root?: ElementHandle<Node>;\n\n  #fn: string;\n  #args: unknown[];\n\n  #timeout?: NodeJS.Timeout;\n  #timeoutError?: TimeoutError;\n\n  #result = Deferred.create<HandleFor<T>>();\n\n  #poller?: JSHandle<Poller<T>>;\n  #signal?: AbortSignal;\n  #reruns: AbortController[] = [];\n\n  constructor(\n    world: Realm,\n    options: WaitTaskOptions,\n    fn: ((...args: unknown[]) => Promise<T>) | string,\n    ...args: unknown[]\n  ) {\n    this.#world = world;\n    this.#polling = options.polling;\n    this.#root = options.root;\n    this.#signal = options.signal;\n    this.#signal?.addEventListener(\n      'abort',\n      () => {\n        void this.terminate(this.#signal?.reason);\n      },\n      {\n        once: true,\n      }\n    );\n\n    switch (typeof fn) {\n      case 'string':\n        this.#fn = `() => {return (${fn});}`;\n        break;\n      default:\n        this.#fn = stringifyFunction(fn);\n        break;\n    }\n    this.#args = args;\n\n    this.#world.taskManager.add(this);\n\n    if (options.timeout) {\n      this.#timeoutError = new TimeoutError(\n        `Waiting failed: ${options.timeout}ms exceeded`\n      );\n      this.#timeout = setTimeout(() => {\n        void this.terminate(this.#timeoutError);\n      }, options.timeout);\n    }\n\n    void this.rerun();\n  }\n\n  get result(): Promise<HandleFor<T>> {\n    return this.#result.valueOrThrow();\n  }\n\n  async rerun(): Promise<void> {\n    for (const prev of this.#reruns) {\n      prev.abort();\n    }\n    this.#reruns.length = 0;\n    const controller = new AbortController();\n    this.#reruns.push(controller);\n    try {\n      switch (this.#polling) {\n        case 'raf':\n          this.#poller = await this.#world.evaluateHandle(\n            ({RAFPoller, createFunction}, fn, ...args) => {\n              const fun = createFunction(fn);\n              return new RAFPoller(() => {\n                return fun(...args) as Promise<T>;\n              });\n            },\n            LazyArg.create(context => {\n              return context.puppeteerUtil;\n            }),\n            this.#fn,\n            ...this.#args\n          );\n          break;\n        case 'mutation':\n          this.#poller = await this.#world.evaluateHandle(\n            ({MutationPoller, createFunction}, root, fn, ...args) => {\n              const fun = createFunction(fn);\n              return new MutationPoller(() => {\n                return fun(...args) as Promise<T>;\n              }, root || document);\n            },\n            LazyArg.create(context => {\n              return context.puppeteerUtil;\n            }),\n            this.#root,\n            this.#fn,\n            ...this.#args\n          );\n          break;\n        default:\n          this.#poller = await this.#world.evaluateHandle(\n            ({IntervalPoller, createFunction}, ms, fn, ...args) => {\n              const fun = createFunction(fn);\n              return new IntervalPoller(() => {\n                return fun(...args) as Promise<T>;\n              }, ms);\n            },\n            LazyArg.create(context => {\n              return context.puppeteerUtil;\n            }),\n            this.#polling,\n            this.#fn,\n            ...this.#args\n          );\n          break;\n      }\n\n      await this.#poller.evaluate(poller => {\n        void poller.start();\n      });\n\n      const result = await this.#poller.evaluateHandle(poller => {\n        return poller.result();\n      });\n      this.#result.resolve(result);\n\n      await this.terminate();\n    } catch (error) {\n      if (controller.signal.aborted) {\n        return;\n      }\n      const badError = this.getBadError(error);\n      if (badError) {\n        await this.terminate(badError);\n      }\n    }\n  }\n\n  async terminate(error?: Error): Promise<void> {\n    this.#world.taskManager.delete(this);\n\n    clearTimeout(this.#timeout);\n\n    if (error && !this.#result.finished()) {\n      this.#result.reject(error);\n    }\n\n    if (this.#poller) {\n      try {\n        await this.#poller.evaluateHandle(async poller => {\n          await poller.stop();\n        });\n        if (this.#poller) {\n          await this.#poller.dispose();\n          this.#poller = undefined;\n        }\n      } catch {\n        // Ignore errors since they most likely come from low-level cleanup.\n      }\n    }\n  }\n\n  /**\n   * Not all errors lead to termination. They usually imply we need to rerun the task.\n   */\n  getBadError(error: unknown): Error | undefined {\n    if (isErrorLike(error)) {\n      // When frame is detached the task should have been terminated by the IsolatedWorld.\n      // This can fail if we were adding this task while the frame was detached,\n      // so we terminate here instead.\n      if (\n        error.message.includes(\n          'Execution context is not available in detached frame'\n        )\n      ) {\n        return new Error('Waiting failed: Frame detached');\n      }\n\n      // When the page is navigated, the promise is rejected.\n      // We will try again in the new execution context.\n      if (error.message.includes('Execution context was destroyed')) {\n        return;\n      }\n\n      // We could have tried to evaluate in a context which was already\n      // destroyed.\n      if (error.message.includes('Cannot find context with specified id')) {\n        return;\n      }\n\n      // Errors coming from WebDriver BiDi. TODO: Adjust messages after\n      // https://github.com/w3c/webdriver-bidi/issues/540 is resolved.\n      if (\n        error.message.includes(\n          \"AbortError: Actor 'MessageHandlerFrame' destroyed\"\n        )\n      ) {\n        return;\n      }\n\n      return error;\n    }\n\n    return new Error('WaitTask failed with an error', {\n      cause: error,\n    });\n  }\n}\n\n/**\n * @internal\n */\nexport class TaskManager {\n  #tasks: Set<WaitTask> = new Set<WaitTask>();\n\n  add(task: WaitTask<any>): void {\n    this.#tasks.add(task);\n  }\n\n  delete(task: WaitTask<any>): void {\n    this.#tasks.delete(task);\n  }\n\n  terminateAll(error?: Error): void {\n    for (const task of this.#tasks) {\n      void task.terminate(error);\n    }\n    this.#tasks.clear();\n  }\n\n  async rerunAll(): Promise<void> {\n    await Promise.all(\n      [...this.#tasks].map(task => {\n        return task.rerun();\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}