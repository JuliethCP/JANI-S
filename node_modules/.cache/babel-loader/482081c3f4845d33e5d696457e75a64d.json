{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\n// take an un-split argv string and tokenize it.\nexport function tokenizeArgString(argString) {\n  if (Array.isArray(argString)) {\n    return argString.map(e => typeof e !== 'string' ? e + '' : e);\n  }\n  argString = argString.trim();\n  let i = 0;\n  let prevC = null;\n  let c = null;\n  let opening = null;\n  const args = [];\n  for (let ii = 0; ii < argString.length; ii++) {\n    prevC = c;\n    c = argString.charAt(ii);\n    // split on spaces unless we're in quotes.\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++;\n      }\n      continue;\n    }\n    // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n    if (c === opening) {\n      opening = null;\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c;\n    }\n    if (!args[i]) args[i] = '';\n    args[i] += c;\n  }\n  return args;\n}","map":{"version":3,"names":["tokenizeArgString","argString","Array","isArray","map","e","trim","i","prevC","c","opening","args","ii","length","charAt"],"sources":["D:/Julieth-Campos/PSO/node_modules/@puppeteer/browsers/node_modules/yargs-parser/build/lib/tokenize-arg-string.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\n// take an un-split argv string and tokenize it.\nexport function tokenizeArgString(argString) {\n    if (Array.isArray(argString)) {\n        return argString.map(e => typeof e !== 'string' ? e + '' : e);\n    }\n    argString = argString.trim();\n    let i = 0;\n    let prevC = null;\n    let c = null;\n    let opening = null;\n    const args = [];\n    for (let ii = 0; ii < argString.length; ii++) {\n        prevC = c;\n        c = argString.charAt(ii);\n        // split on spaces unless we're in quotes.\n        if (c === ' ' && !opening) {\n            if (!(prevC === ' ')) {\n                i++;\n            }\n            continue;\n        }\n        // don't split the string if we're in matching\n        // opening or closing single and double quotes.\n        if (c === opening) {\n            opening = null;\n        }\n        else if ((c === \"'\" || c === '\"') && !opening) {\n            opening = c;\n        }\n        if (!args[i])\n            args[i] = '';\n        args[i] += c;\n    }\n    return args;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiB,CAACC,SAAS,EAAE;EACzC,IAAIC,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,EAAE;IAC1B,OAAOA,SAAS,CAACG,GAAG,CAACC,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,GAAGA,CAAC,GAAG,EAAE,GAAGA,CAAC,CAAC;EACjE;EACAJ,SAAS,GAAGA,SAAS,CAACK,IAAI,EAAE;EAC5B,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAIC,CAAC,GAAG,IAAI;EACZ,IAAIC,OAAO,GAAG,IAAI;EAClB,MAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGX,SAAS,CAACY,MAAM,EAAED,EAAE,EAAE,EAAE;IAC1CJ,KAAK,GAAGC,CAAC;IACTA,CAAC,GAAGR,SAAS,CAACa,MAAM,CAACF,EAAE,CAAC;IACxB;IACA,IAAIH,CAAC,KAAK,GAAG,IAAI,CAACC,OAAO,EAAE;MACvB,IAAI,EAAEF,KAAK,KAAK,GAAG,CAAC,EAAE;QAClBD,CAAC,EAAE;MACP;MACA;IACJ;IACA;IACA;IACA,IAAIE,CAAC,KAAKC,OAAO,EAAE;MACfA,OAAO,GAAG,IAAI;IAClB,CAAC,MACI,IAAI,CAACD,CAAC,KAAK,GAAG,IAAIA,CAAC,KAAK,GAAG,KAAK,CAACC,OAAO,EAAE;MAC3CA,OAAO,GAAGD,CAAC;IACf;IACA,IAAI,CAACE,IAAI,CAACJ,CAAC,CAAC,EACRI,IAAI,CAACJ,CAAC,CAAC,GAAG,EAAE;IAChBI,IAAI,CAACJ,CAAC,CAAC,IAAIE,CAAC;EAChB;EACA,OAAOE,IAAI;AACf"},"metadata":{},"sourceType":"module"}