{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nimport { Frame, FrameEvent, throwIfDetached } from '../api/Frame.js';\nimport { setPageContent } from '../common/util.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { disposeSymbol } from '../util/disposable.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { IsolatedWorld } from './IsolatedWorld.js';\nimport { MAIN_WORLD, PUPPETEER_WORLD } from './IsolatedWorlds.js';\nimport { LifecycleWatcher } from './LifecycleWatcher.js';\n/**\n * @internal\n */\nlet CdpFrame = (() => {\n  let _classSuper = Frame;\n  let _instanceExtraInitializers = [];\n  let _goto_decorators;\n  let _waitForNavigation_decorators;\n  let _setContent_decorators;\n  let _waitForDevicePrompt_decorators;\n  return class CdpFrame extends _classSuper {\n    static #_ = (() => {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n      __esDecorate(this, null, _goto_decorators, {\n        kind: \"method\",\n        name: \"goto\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"goto\" in obj,\n          get: obj => obj.goto\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _waitForNavigation_decorators, {\n        kind: \"method\",\n        name: \"waitForNavigation\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"waitForNavigation\" in obj,\n          get: obj => obj.waitForNavigation\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _setContent_decorators, {\n        kind: \"method\",\n        name: \"setContent\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"setContent\" in obj,\n          get: obj => obj.setContent\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _waitForDevicePrompt_decorators, {\n        kind: \"method\",\n        name: \"waitForDevicePrompt\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"waitForDevicePrompt\" in obj,\n          get: obj => obj.waitForDevicePrompt\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      if (_metadata) Object.defineProperty(this, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n    })();\n    #url = (__runInitializers(this, _instanceExtraInitializers), '');\n    #detached = false;\n    #client;\n    _frameManager;\n    _id;\n    _loaderId = '';\n    _lifecycleEvents = new Set();\n    _parentId;\n    constructor(frameManager, frameId, parentFrameId, client) {\n      super();\n      this._frameManager = frameManager;\n      this.#url = '';\n      this._id = frameId;\n      this._parentId = parentFrameId;\n      this.#detached = false;\n      this._loaderId = '';\n      this.updateClient(client);\n      this.on(FrameEvent.FrameSwappedByActivation, () => {\n        // Emulate loading process for swapped frames.\n        this._onLoadingStarted();\n        this._onLoadingStopped();\n      });\n    }\n    /**\n     * This is used internally in DevTools.\n     *\n     * @internal\n     */\n    _client() {\n      return this.#client;\n    }\n    /**\n     * Updates the frame ID with the new ID. This happens when the main frame is\n     * replaced by a different frame.\n     */\n    updateId(id) {\n      this._id = id;\n    }\n    updateClient(client) {\n      let keepWorlds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.#client = client;\n      if (!keepWorlds) {\n        this.worlds = {\n          [MAIN_WORLD]: new IsolatedWorld(this, this._frameManager.timeoutSettings),\n          [PUPPETEER_WORLD]: new IsolatedWorld(this, this._frameManager.timeoutSettings)\n        };\n      } else {\n        this.worlds[MAIN_WORLD].frameUpdated();\n        this.worlds[PUPPETEER_WORLD].frameUpdated();\n      }\n    }\n    page() {\n      return this._frameManager.page();\n    }\n    isOOPFrame() {\n      return this.#client !== this._frameManager.client;\n    }\n    async goto(url) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        referer = this._frameManager.networkManager.extraHTTPHeaders()['referer'],\n        referrerPolicy = this._frameManager.networkManager.extraHTTPHeaders()['referer-policy'],\n        waitUntil = ['load'],\n        timeout = this._frameManager.timeoutSettings.navigationTimeout()\n      } = options;\n      let ensureNewDocumentNavigation = false;\n      const watcher = new LifecycleWatcher(this._frameManager.networkManager, this, waitUntil, timeout);\n      let error = await Deferred.race([navigate(this.#client, url, referer, referrerPolicy, this._id), watcher.terminationPromise()]);\n      if (!error) {\n        error = await Deferred.race([watcher.terminationPromise(), ensureNewDocumentNavigation ? watcher.newDocumentNavigationPromise() : watcher.sameDocumentNavigationPromise()]);\n      }\n      try {\n        if (error) {\n          throw error;\n        }\n        return await watcher.navigationResponse();\n      } finally {\n        watcher.dispose();\n      }\n      async function navigate(client, url, referrer, referrerPolicy, frameId) {\n        try {\n          const response = await client.send('Page.navigate', {\n            url,\n            referrer,\n            frameId,\n            referrerPolicy\n          });\n          ensureNewDocumentNavigation = !!response.loaderId;\n          if (response.errorText === 'net::ERR_HTTP_RESPONSE_CODE_FAILURE') {\n            return null;\n          }\n          return response.errorText ? new Error(`${response.errorText} at ${url}`) : null;\n        } catch (error) {\n          if (isErrorLike(error)) {\n            return error;\n          }\n          throw error;\n        }\n      }\n    }\n    async waitForNavigation() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const {\n        waitUntil = ['load'],\n        timeout = this._frameManager.timeoutSettings.navigationTimeout()\n      } = options;\n      const watcher = new LifecycleWatcher(this._frameManager.networkManager, this, waitUntil, timeout);\n      const error = await Deferred.race([watcher.terminationPromise(), watcher.sameDocumentNavigationPromise(), watcher.newDocumentNavigationPromise()]);\n      try {\n        if (error) {\n          throw error;\n        }\n        return await watcher.navigationResponse();\n      } finally {\n        watcher.dispose();\n      }\n    }\n    get client() {\n      return this.#client;\n    }\n    mainRealm() {\n      return this.worlds[MAIN_WORLD];\n    }\n    isolatedRealm() {\n      return this.worlds[PUPPETEER_WORLD];\n    }\n    async setContent(html) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        waitUntil = ['load'],\n        timeout = this._frameManager.timeoutSettings.navigationTimeout()\n      } = options;\n      await setPageContent(this.isolatedRealm(), html);\n      const watcher = new LifecycleWatcher(this._frameManager.networkManager, this, waitUntil, timeout);\n      const error = await Deferred.race([watcher.terminationPromise(), watcher.lifecyclePromise()]);\n      watcher.dispose();\n      if (error) {\n        throw error;\n      }\n    }\n    url() {\n      return this.#url;\n    }\n    parentFrame() {\n      return this._frameManager._frameTree.parentFrame(this._id) || null;\n    }\n    childFrames() {\n      return this._frameManager._frameTree.childFrames(this._id);\n    }\n    #deviceRequestPromptManager() {\n      const rootFrame = this.page().mainFrame();\n      if (this.isOOPFrame() || rootFrame === null) {\n        return this._frameManager._deviceRequestPromptManager(this.#client);\n      } else {\n        return rootFrame._frameManager._deviceRequestPromptManager(this.#client);\n      }\n    }\n    async waitForDevicePrompt() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return await this.#deviceRequestPromptManager().waitForDevicePrompt(options);\n    }\n    _navigated(framePayload) {\n      this._name = framePayload.name;\n      this.#url = `${framePayload.url}${framePayload.urlFragment || ''}`;\n    }\n    _navigatedWithinDocument(url) {\n      this.#url = url;\n    }\n    _onLifecycleEvent(loaderId, name) {\n      if (name === 'init') {\n        this._loaderId = loaderId;\n        this._lifecycleEvents.clear();\n      }\n      this._lifecycleEvents.add(name);\n    }\n    _onLoadingStopped() {\n      this._lifecycleEvents.add('DOMContentLoaded');\n      this._lifecycleEvents.add('load');\n    }\n    _onLoadingStarted() {\n      this._hasStartedLoading = true;\n    }\n    get detached() {\n      return this.#detached;\n    }\n    [(_goto_decorators = [throwIfDetached], _waitForNavigation_decorators = [throwIfDetached], _setContent_decorators = [throwIfDetached], _waitForDevicePrompt_decorators = [throwIfDetached], disposeSymbol)]() {\n      if (this.#detached) {\n        return;\n      }\n      this.#detached = true;\n      this.worlds[MAIN_WORLD][disposeSymbol]();\n      this.worlds[PUPPETEER_WORLD][disposeSymbol]();\n    }\n  };\n})();\nexport { CdpFrame };","map":{"version":3,"mappings":"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","names":["Frame","FrameEvent","throwIfDetached","setPageContent","Deferred","disposeSymbol","isErrorLike","IsolatedWorld","MAIN_WORLD","PUPPETEER_WORLD","LifecycleWatcher","CdpFrame","_classSuper","__esDecorate","kind","name","static","private","access","has","get","goto","metadata","waitForNavigation","setContent","waitForDevicePrompt","_frameManager","_id","_loaderId","_lifecycleEvents","Set","_parentId","constructor","frameManager","frameId","parentFrameId","client","updateClient","on","FrameSwappedByActivation","_onLoadingStarted","_onLoadingStopped","_client","updateId","id","keepWorlds","worlds","timeoutSettings","frameUpdated","page","isOOPFrame","url","options","referer","networkManager","extraHTTPHeaders","referrerPolicy","waitUntil","timeout","navigationTimeout","ensureNewDocumentNavigation","watcher","error","race","navigate","terminationPromise","newDocumentNavigationPromise","sameDocumentNavigationPromise","navigationResponse","dispose","referrer","response","send","loaderId","errorText","Error","mainRealm","isolatedRealm","html","lifecyclePromise","parentFrame","_frameTree","childFrames","rootFrame","mainFrame","_deviceRequestPromptManager","_navigated","framePayload","_name","urlFragment","_navigatedWithinDocument","_onLifecycleEvent","clear","add","_hasStartedLoading","detached"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\Frame.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {Frame, FrameEvent, throwIfDetached} from '../api/Frame.js';\nimport type {HTTPResponse} from '../api/HTTPResponse.js';\nimport type {WaitTimeoutOptions} from '../api/Page.js';\nimport {setPageContent} from '../common/util.js';\nimport {Deferred} from '../util/Deferred.js';\nimport {disposeSymbol} from '../util/disposable.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\nimport type {\n  DeviceRequestPrompt,\n  DeviceRequestPromptManager,\n} from './DeviceRequestPrompt.js';\nimport type {FrameManager} from './FrameManager.js';\nimport {IsolatedWorld} from './IsolatedWorld.js';\nimport {MAIN_WORLD, PUPPETEER_WORLD} from './IsolatedWorlds.js';\nimport {\n  LifecycleWatcher,\n  type PuppeteerLifeCycleEvent,\n} from './LifecycleWatcher.js';\nimport type {CdpPage} from './Page.js';\n\n/**\n * @internal\n */\nexport class CdpFrame extends Frame {\n  #url = '';\n  #detached = false;\n  #client!: CDPSession;\n\n  _frameManager: FrameManager;\n  override _id: string;\n  _loaderId = '';\n  _lifecycleEvents = new Set<string>();\n  override _parentId?: string;\n\n  constructor(\n    frameManager: FrameManager,\n    frameId: string,\n    parentFrameId: string | undefined,\n    client: CDPSession\n  ) {\n    super();\n    this._frameManager = frameManager;\n    this.#url = '';\n    this._id = frameId;\n    this._parentId = parentFrameId;\n    this.#detached = false;\n\n    this._loaderId = '';\n\n    this.updateClient(client);\n\n    this.on(FrameEvent.FrameSwappedByActivation, () => {\n      // Emulate loading process for swapped frames.\n      this._onLoadingStarted();\n      this._onLoadingStopped();\n    });\n  }\n\n  /**\n   * This is used internally in DevTools.\n   *\n   * @internal\n   */\n  _client(): CDPSession {\n    return this.#client;\n  }\n\n  /**\n   * Updates the frame ID with the new ID. This happens when the main frame is\n   * replaced by a different frame.\n   */\n  updateId(id: string): void {\n    this._id = id;\n  }\n\n  updateClient(client: CDPSession, keepWorlds = false): void {\n    this.#client = client;\n    if (!keepWorlds) {\n      this.worlds = {\n        [MAIN_WORLD]: new IsolatedWorld(\n          this,\n          this._frameManager.timeoutSettings\n        ),\n        [PUPPETEER_WORLD]: new IsolatedWorld(\n          this,\n          this._frameManager.timeoutSettings\n        ),\n      };\n    } else {\n      this.worlds[MAIN_WORLD].frameUpdated();\n      this.worlds[PUPPETEER_WORLD].frameUpdated();\n    }\n  }\n\n  override page(): CdpPage {\n    return this._frameManager.page();\n  }\n\n  override isOOPFrame(): boolean {\n    return this.#client !== this._frameManager.client;\n  }\n\n  @throwIfDetached\n  override async goto(\n    url: string,\n    options: {\n      referer?: string;\n      referrerPolicy?: string;\n      timeout?: number;\n      waitUntil?: PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[];\n    } = {}\n  ): Promise<HTTPResponse | null> {\n    const {\n      referer = this._frameManager.networkManager.extraHTTPHeaders()['referer'],\n      referrerPolicy = this._frameManager.networkManager.extraHTTPHeaders()[\n        'referer-policy'\n      ],\n      waitUntil = ['load'],\n      timeout = this._frameManager.timeoutSettings.navigationTimeout(),\n    } = options;\n\n    let ensureNewDocumentNavigation = false;\n    const watcher = new LifecycleWatcher(\n      this._frameManager.networkManager,\n      this,\n      waitUntil,\n      timeout\n    );\n    let error = await Deferred.race([\n      navigate(\n        this.#client,\n        url,\n        referer,\n        referrerPolicy as Protocol.Page.ReferrerPolicy,\n        this._id\n      ),\n      watcher.terminationPromise(),\n    ]);\n    if (!error) {\n      error = await Deferred.race([\n        watcher.terminationPromise(),\n        ensureNewDocumentNavigation\n          ? watcher.newDocumentNavigationPromise()\n          : watcher.sameDocumentNavigationPromise(),\n      ]);\n    }\n\n    try {\n      if (error) {\n        throw error;\n      }\n      return await watcher.navigationResponse();\n    } finally {\n      watcher.dispose();\n    }\n\n    async function navigate(\n      client: CDPSession,\n      url: string,\n      referrer: string | undefined,\n      referrerPolicy: Protocol.Page.ReferrerPolicy | undefined,\n      frameId: string\n    ): Promise<Error | null> {\n      try {\n        const response = await client.send('Page.navigate', {\n          url,\n          referrer,\n          frameId,\n          referrerPolicy,\n        });\n        ensureNewDocumentNavigation = !!response.loaderId;\n        if (response.errorText === 'net::ERR_HTTP_RESPONSE_CODE_FAILURE') {\n          return null;\n        }\n        return response.errorText\n          ? new Error(`${response.errorText} at ${url}`)\n          : null;\n      } catch (error) {\n        if (isErrorLike(error)) {\n          return error;\n        }\n        throw error;\n      }\n    }\n  }\n\n  @throwIfDetached\n  override async waitForNavigation(\n    options: {\n      timeout?: number;\n      waitUntil?: PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[];\n    } = {}\n  ): Promise<HTTPResponse | null> {\n    const {\n      waitUntil = ['load'],\n      timeout = this._frameManager.timeoutSettings.navigationTimeout(),\n    } = options;\n    const watcher = new LifecycleWatcher(\n      this._frameManager.networkManager,\n      this,\n      waitUntil,\n      timeout\n    );\n    const error = await Deferred.race([\n      watcher.terminationPromise(),\n      watcher.sameDocumentNavigationPromise(),\n      watcher.newDocumentNavigationPromise(),\n    ]);\n    try {\n      if (error) {\n        throw error;\n      }\n      return await watcher.navigationResponse();\n    } finally {\n      watcher.dispose();\n    }\n  }\n\n  override get client(): CDPSession {\n    return this.#client;\n  }\n\n  override mainRealm(): IsolatedWorld {\n    return this.worlds[MAIN_WORLD];\n  }\n\n  override isolatedRealm(): IsolatedWorld {\n    return this.worlds[PUPPETEER_WORLD];\n  }\n\n  @throwIfDetached\n  override async setContent(\n    html: string,\n    options: {\n      timeout?: number;\n      waitUntil?: PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[];\n    } = {}\n  ): Promise<void> {\n    const {\n      waitUntil = ['load'],\n      timeout = this._frameManager.timeoutSettings.navigationTimeout(),\n    } = options;\n\n    await setPageContent(this.isolatedRealm(), html);\n\n    const watcher = new LifecycleWatcher(\n      this._frameManager.networkManager,\n      this,\n      waitUntil,\n      timeout\n    );\n    const error = await Deferred.race<void | Error | undefined>([\n      watcher.terminationPromise(),\n      watcher.lifecyclePromise(),\n    ]);\n    watcher.dispose();\n    if (error) {\n      throw error;\n    }\n  }\n\n  override url(): string {\n    return this.#url;\n  }\n\n  override parentFrame(): CdpFrame | null {\n    return this._frameManager._frameTree.parentFrame(this._id) || null;\n  }\n\n  override childFrames(): CdpFrame[] {\n    return this._frameManager._frameTree.childFrames(this._id);\n  }\n\n  #deviceRequestPromptManager(): DeviceRequestPromptManager {\n    const rootFrame = this.page().mainFrame();\n    if (this.isOOPFrame() || rootFrame === null) {\n      return this._frameManager._deviceRequestPromptManager(this.#client);\n    } else {\n      return rootFrame._frameManager._deviceRequestPromptManager(this.#client);\n    }\n  }\n\n  @throwIfDetached\n  override async waitForDevicePrompt(\n    options: WaitTimeoutOptions = {}\n  ): Promise<DeviceRequestPrompt> {\n    return await this.#deviceRequestPromptManager().waitForDevicePrompt(\n      options\n    );\n  }\n\n  _navigated(framePayload: Protocol.Page.Frame): void {\n    this._name = framePayload.name;\n    this.#url = `${framePayload.url}${framePayload.urlFragment || ''}`;\n  }\n\n  _navigatedWithinDocument(url: string): void {\n    this.#url = url;\n  }\n\n  _onLifecycleEvent(loaderId: string, name: string): void {\n    if (name === 'init') {\n      this._loaderId = loaderId;\n      this._lifecycleEvents.clear();\n    }\n    this._lifecycleEvents.add(name);\n  }\n\n  _onLoadingStopped(): void {\n    this._lifecycleEvents.add('DOMContentLoaded');\n    this._lifecycleEvents.add('load');\n  }\n\n  _onLoadingStarted(): void {\n    this._hasStartedLoading = true;\n  }\n\n  override get detached(): boolean {\n    return this.#detached;\n  }\n\n  [disposeSymbol](): void {\n    if (this.#detached) {\n      return;\n    }\n    this.#detached = true;\n    this.worlds[MAIN_WORLD][disposeSymbol]();\n    this.worlds[PUPPETEER_WORLD][disposeSymbol]();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}