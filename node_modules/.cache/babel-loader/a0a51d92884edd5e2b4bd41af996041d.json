{"ast":null,"code":"var _jsxFileName = \"D:\\\\Julieth-Campos\\\\PSO\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useExternalScript } from \"./helpers/ai-sdk/externalScriptsLoader\";\nimport { getAiSdkControls } from \"./helpers/ai-sdk/loader\";\nimport './App.css';\nimport GenderComponent from \"./components/GenderComponent\";\nimport AgeComponent from \"./components/AgeComponent\";\nimport DominantEmotionComponent from \"./components/DominantEmotionComponent\";\nimport FeatureComponent from \"./components/FeatureComponent\";\nimport EngagementComponent from \"./components/EngagementComponent\";\nimport FaceTrackerComponent from \"./components/FaceTrackerComponent\";\nimport MoodComponent from \"./components/MoodComponent\";\nimport EmotionBarsComponent from \"./components/EmotionBarsComponent\";\nimport ScreenRecordingComponent from \"./components/ScreenRecordingComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const mphToolsState = useExternalScript(\"https://sdk.morphcast.com/mphtools/v1.0/mphtools.js\");\n  const aiSdkState = useExternalScript(\"https://ai-sdk.morphcast.com/v1.16/ai-sdk.js\");\n  const videoEl = useRef(undefined);\n  const [isRecordingScreen, setIsRecordingScreen] = useState(false);\n  const [isCameraAccessed, setIsCameraAccessed] = useState(false);\n  const [selectedScreen, setSelectedScreen] = useState(null);\n  const switchToRecordingOrAnalysis = () => {\n    if (isRecordingScreen) {\n      setIsRecordingScreen(false);\n    } else {\n      setIsRecordingScreen(true);\n      stopCameraAccess();\n      startRecordingAutomatically();\n    }\n  };\n  const startRecordingAutomatically = () => {\n    const recordingInterval = 50 * 1000; // 50 segundos en milisegundos\n    let mediaRecorder = null;\n    let chunks = [];\n    const startRecording = () => {\n      // Aquí debes iniciar la grabación utilizando tu biblioteca o API de grabación\n      // Asegúrate de configurar 'mediaRecorder' y manejar los datos de la grabación\n\n      // Ejemplo (usando MediaRecorder):\n      const stream = videoEl.current.captureStream();\n      mediaRecorder = new MediaRecorder(stream);\n      chunks = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, {\n          type: \"video/webm\"\n        });\n        // Aquí puedes hacer algo con 'blob', como guardar el video\n        console.log(\"Grabación guardada a las \" + new Date());\n      };\n      mediaRecorder.start();\n      console.log(\"Iniciando nueva grabación a las \" + new Date());\n    };\n    const stopRecording = () => {\n      if (mediaRecorder && mediaRecorder.state === \"recording\") {\n        mediaRecorder.stop();\n      }\n    };\n    const recordingTimer = setInterval(() => {\n      if (selectedScreen) {\n        stopRecording();\n        startRecording();\n      }\n    }, recordingInterval);\n    return () => {\n      clearInterval(recordingTimer);\n    };\n  };\n  useEffect(() => {\n    startCameraAccess();\n  }, [aiSdkState, mphToolsState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: switchToRecordingOrAnalysis,\n      style: {\n        padding: \"10px 20px\",\n        backgroundColor: \"#007bff\",\n        color: \"#fff\",\n        border: \"none\",\n        borderRadius: \"4px\",\n        cursor: \"pointer\",\n        transition: \"background-color 0.3s\",\n        margin: \"5px\"\n      },\n      children: \"Cambiar a Grabaci\\xF3n / An\\xE1lisis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fkNXWzmrnwE5yh7BqEGbLC2rbtg=\", false, function () {\n  return [useExternalScript, useExternalScript];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useExternalScript","getAiSdkControls","GenderComponent","AgeComponent","DominantEmotionComponent","FeatureComponent","EngagementComponent","FaceTrackerComponent","MoodComponent","EmotionBarsComponent","ScreenRecordingComponent","App","mphToolsState","aiSdkState","videoEl","undefined","isRecordingScreen","setIsRecordingScreen","isCameraAccessed","setIsCameraAccessed","selectedScreen","setSelectedScreen","switchToRecordingOrAnalysis","stopCameraAccess","startRecordingAutomatically","recordingInterval","mediaRecorder","chunks","startRecording","stream","current","captureStream","MediaRecorder","ondataavailable","event","data","size","push","onstop","blob","Blob","type","console","log","Date","start","stopRecording","state","stop","recordingTimer","setInterval","clearInterval","startCameraAccess","padding","backgroundColor","color","border","borderRadius","cursor","transition","margin"],"sources":["D:/Julieth-Campos/PSO/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useExternalScript } from \"./helpers/ai-sdk/externalScriptsLoader\";\r\nimport { getAiSdkControls } from \"./helpers/ai-sdk/loader\";\r\n\r\nimport './App.css';\r\n\r\nimport GenderComponent from \"./components/GenderComponent\";\r\nimport AgeComponent from \"./components/AgeComponent\";\r\nimport DominantEmotionComponent from \"./components/DominantEmotionComponent\";\r\nimport FeatureComponent from \"./components/FeatureComponent\";\r\nimport EngagementComponent from \"./components/EngagementComponent\";\r\nimport FaceTrackerComponent from \"./components/FaceTrackerComponent\";\r\nimport MoodComponent from \"./components/MoodComponent\";\r\nimport EmotionBarsComponent from \"./components/EmotionBarsComponent\";\r\nimport ScreenRecordingComponent from \"./components/ScreenRecordingComponent\";\r\n\r\nfunction App() {\r\n  const mphToolsState = useExternalScript(\"https://sdk.morphcast.com/mphtools/v1.0/mphtools.js\");\r\n  const aiSdkState = useExternalScript(\"https://ai-sdk.morphcast.com/v1.16/ai-sdk.js\");\r\n  const videoEl = useRef(undefined);\r\n  const [isRecordingScreen, setIsRecordingScreen] = useState(false);\r\n  const [isCameraAccessed, setIsCameraAccessed] = useState(false);\r\n  const [selectedScreen, setSelectedScreen] = useState(null);\r\n\r\n  const switchToRecordingOrAnalysis = () => {\r\n    if (isRecordingScreen) {\r\n      setIsRecordingScreen(false);\r\n     \r\n    } else {\r\n      setIsRecordingScreen(true);\r\n      stopCameraAccess();\r\n      startRecordingAutomatically();\r\n    }\r\n  };\r\n\r\n\r\n  const startRecordingAutomatically = () => {\r\n    const recordingInterval = 50 * 1000; // 50 segundos en milisegundos\r\n    let mediaRecorder = null;\r\n    let chunks = [];\r\n  \r\n    const startRecording = () => {\r\n      // Aquí debes iniciar la grabación utilizando tu biblioteca o API de grabación\r\n      // Asegúrate de configurar 'mediaRecorder' y manejar los datos de la grabación\r\n  \r\n      // Ejemplo (usando MediaRecorder):\r\n      const stream = videoEl.current.captureStream();\r\n      mediaRecorder = new MediaRecorder(stream);\r\n      chunks = [];\r\n  \r\n      mediaRecorder.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          chunks.push(event.data);\r\n        }\r\n      };\r\n  \r\n      mediaRecorder.onstop = () => {\r\n        const blob = new Blob(chunks, { type: \"video/webm\" });\r\n        // Aquí puedes hacer algo con 'blob', como guardar el video\r\n        console.log(\"Grabación guardada a las \" + new Date());\r\n      };\r\n  \r\n      mediaRecorder.start();\r\n      console.log(\"Iniciando nueva grabación a las \" + new Date());\r\n    };\r\n  \r\n    const stopRecording = () => {\r\n      if (mediaRecorder && mediaRecorder.state === \"recording\") {\r\n        mediaRecorder.stop();\r\n      }\r\n    };\r\n  \r\n    const recordingTimer = setInterval(() => {\r\n      if (selectedScreen) {\r\n        stopRecording();\r\n        startRecording();\r\n      }\r\n    }, recordingInterval);\r\n  \r\n    return () => {\r\n      clearInterval(recordingTimer);\r\n    };\r\n  };\r\n  useEffect(() => {\r\n    startCameraAccess();\r\n  }, [aiSdkState, mphToolsState]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n              <button\r\n                onClick={switchToRecordingOrAnalysis}\r\n                style={{\r\n                  padding: \"10px 20px\",\r\n                  backgroundColor: \"#007bff\",\r\n                  color: \"#fff\",\r\n                  border: \"none\",\r\n                  borderRadius: \"4px\",\r\n                  cursor: \"pointer\",\r\n                  transition: \"background-color 0.3s\",\r\n                  margin: \"5px\",\r\n                }}\r\n              >\r\n                Cambiar a Grabación / Análisis\r\n              </button>\r\n              </div>\r\n      \r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}