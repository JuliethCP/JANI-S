{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuickJSAsyncRuntime = void 0;\nconst _1 = require(\".\");\nconst context_asyncify_1 = require(\"./context-asyncify\");\nconst runtime_1 = require(\"./runtime\");\nconst types_1 = require(\"./types\");\nclass QuickJSAsyncRuntime extends runtime_1.QuickJSRuntime {\n  /** @private */\n  constructor(args) {\n    super(args);\n  }\n  newContext() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (options.intrinsics && options.intrinsics !== types_1.DefaultIntrinsics) {\n      throw new Error(\"TODO: Custom intrinsics are not supported yet\");\n    }\n    const ctx = new _1.Lifetime(this.ffi.QTS_NewContext(this.rt.value), undefined, ctx_ptr => {\n      this.contextMap.delete(ctx_ptr);\n      this.callbacks.deleteContext(ctx_ptr);\n      this.ffi.QTS_FreeContext(ctx_ptr);\n    });\n    const context = new context_asyncify_1.QuickJSAsyncContext({\n      module: this.module,\n      ctx,\n      ffi: this.ffi,\n      rt: this.rt,\n      ownedLifetimes: [],\n      runtime: this,\n      callbacks: this.callbacks\n    });\n    this.contextMap.set(ctx.value, context);\n    return context;\n  }\n  setModuleLoader(moduleLoader, moduleNormalizer) {\n    super.setModuleLoader(moduleLoader, moduleNormalizer);\n  }\n  /**\n   * Set the max stack size for this runtime in bytes.\n   * To remove the limit, set to `0`.\n   *\n   * Setting this limit also adjusts the global `ASYNCIFY_STACK_SIZE` for the entire {@link QuickJSAsyncWASMModule}.\n   * See the [pull request](https://github.com/justjake/quickjs-emscripten/pull/114) for more details.\n   */\n  setMaxStackSize(stackSize) {\n    return super.setMaxStackSize(stackSize);\n  }\n}\nexports.QuickJSAsyncRuntime = QuickJSAsyncRuntime;","map":{"version":3,"mappings":";;;;;;AACA;AACA;AAKA;AACA;AASA,MAAaA,mBAAoB,SAAQC,wBAAc;EAcrD;EACAC,YAAYC,IAKX;IACC,KAAK,CAACA,IAAI,CAAC;EACb;EAESC,UAAU,GAA6B;IAAA,IAA5BC,8EAA0B,EAAE;IAC9C,IAAIA,OAAO,CAACC,UAAU,IAAID,OAAO,CAACC,UAAU,KAAKC,yBAAiB,EAAE;MAClE,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;;IAGlE,MAAMC,GAAG,GAAG,IAAIC,WAAQ,CAAC,IAAI,CAACC,GAAG,CAACC,cAAc,CAAC,IAAI,CAACC,EAAE,CAACC,KAAK,CAAC,EAAEC,SAAS,EAAGC,OAAO,IAAI;MACtF,IAAI,CAACC,UAAU,CAACC,MAAM,CAACF,OAAO,CAAC;MAC/B,IAAI,CAACG,SAAS,CAACC,aAAa,CAACJ,OAAO,CAAC;MACrC,IAAI,CAACL,GAAG,CAACU,eAAe,CAACL,OAAO,CAAC;IACnC,CAAC,CAAC;IAEF,MAAMM,OAAO,GAAG,IAAIC,sCAAmB,CAAC;MACtCC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBf,GAAG;MACHE,GAAG,EAAE,IAAI,CAACA,GAAG;MACbE,EAAE,EAAE,IAAI,CAACA,EAAE;MACXY,cAAc,EAAE,EAAE;MAClBC,OAAO,EAAE,IAAI;MACbP,SAAS,EAAE,IAAI,CAACA;KACjB,CAAC;IACF,IAAI,CAACF,UAAU,CAACU,GAAG,CAAClB,GAAG,CAACK,KAAK,EAAEQ,OAAO,CAAC;IAEvC,OAAOA,OAAO;EAChB;EAEgBM,eAAe,CAC7BC,YAAiC,EACjCC,gBAA0C;IAE1C,KAAK,CAACF,eAAe,CACnBC,YAA8B,EAC9BC,gBAAkD,CACnD;EACH;EAEA;;;;;;;EAOgBC,eAAe,CAACC,SAAiB;IAC/C,OAAO,KAAK,CAACD,eAAe,CAACC,SAAS,CAAC;EACzC;;AApEFC","names":["QuickJSAsyncRuntime","runtime_1","constructor","args","newContext","options","intrinsics","types_1","Error","ctx","_1","ffi","QTS_NewContext","rt","value","undefined","ctx_ptr","contextMap","delete","callbacks","deleteContext","QTS_FreeContext","context","context_asyncify_1","module","ownedLifetimes","runtime","set","setModuleLoader","moduleLoader","moduleNormalizer","setMaxStackSize","stackSize","exports"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\@tootallnate\\quickjs-emscripten\\ts\\runtime-asyncify.ts"],"sourcesContent":["import type { QuickJSAsyncWASMModule } from \"./module-asyncify\"\nimport { Lifetime } from \".\"\nimport { QuickJSAsyncContext } from \"./context-asyncify\"\nimport { QuickJSAsyncEmscriptenModule } from \"./emscripten-types\"\nimport { QuickJSAsyncFFI } from \"./variants\"\nimport { JSContextPointer, JSRuntimePointer } from \"./types-ffi\"\nimport { QuickJSModuleCallbacks } from \"./module\"\nimport { QuickJSRuntime } from \"./runtime\"\nimport {\n  ContextOptions,\n  DefaultIntrinsics,\n  JSModuleLoader,\n  JSModuleLoaderAsync,\n  JSModuleNormalizer,\n  JSModuleNormalizerAsync,\n} from \"./types\"\n\nexport class QuickJSAsyncRuntime extends QuickJSRuntime {\n  public context: QuickJSAsyncContext | undefined\n\n  /** @private */\n  protected declare module: QuickJSAsyncEmscriptenModule\n  /** @private */\n  protected declare ffi: QuickJSAsyncFFI\n  /** @private */\n  protected declare rt: Lifetime<JSRuntimePointer>\n  /** @private */\n  protected declare callbacks: QuickJSModuleCallbacks\n  /** @private */\n  protected declare contextMap: Map<JSContextPointer, QuickJSAsyncContext>\n\n  /** @private */\n  constructor(args: {\n    module: QuickJSAsyncEmscriptenModule\n    ffi: QuickJSAsyncFFI\n    rt: Lifetime<JSRuntimePointer>\n    callbacks: QuickJSModuleCallbacks\n  }) {\n    super(args)\n  }\n\n  override newContext(options: ContextOptions = {}): QuickJSAsyncContext {\n    if (options.intrinsics && options.intrinsics !== DefaultIntrinsics) {\n      throw new Error(\"TODO: Custom intrinsics are not supported yet\")\n    }\n\n    const ctx = new Lifetime(this.ffi.QTS_NewContext(this.rt.value), undefined, (ctx_ptr) => {\n      this.contextMap.delete(ctx_ptr)\n      this.callbacks.deleteContext(ctx_ptr)\n      this.ffi.QTS_FreeContext(ctx_ptr)\n    })\n\n    const context = new QuickJSAsyncContext({\n      module: this.module,\n      ctx,\n      ffi: this.ffi,\n      rt: this.rt,\n      ownedLifetimes: [],\n      runtime: this,\n      callbacks: this.callbacks,\n    })\n    this.contextMap.set(ctx.value, context)\n\n    return context\n  }\n\n  public override setModuleLoader(\n    moduleLoader: JSModuleLoaderAsync,\n    moduleNormalizer?: JSModuleNormalizerAsync\n  ): void {\n    super.setModuleLoader(\n      moduleLoader as JSModuleLoader,\n      moduleNormalizer as JSModuleNormalizer | undefined\n    )\n  }\n\n  /**\n   * Set the max stack size for this runtime in bytes.\n   * To remove the limit, set to `0`.\n   *\n   * Setting this limit also adjusts the global `ASYNCIFY_STACK_SIZE` for the entire {@link QuickJSAsyncWASMModule}.\n   * See the [pull request](https://github.com/justjake/quickjs-emscripten/pull/114) for more details.\n   */\n  public override setMaxStackSize(stackSize: number): void {\n    return super.setMaxStackSize(stackSize)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}