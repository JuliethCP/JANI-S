{"ast":null,"code":"'use strict';\n\nconst errorEx = require('error-ex');\nconst fallback = require('json-parse-even-better-errors');\nconst {\n  default: LinesAndColumns\n} = require('lines-and-columns');\nconst {\n  codeFrameColumns\n} = require('@babel/code-frame');\nconst JSONError = errorEx('JSONError', {\n  fileName: errorEx.append('in %s'),\n  codeFrame: errorEx.append('\\n\\n%s\\n')\n});\nconst parseJson = (string, reviver, filename) => {\n  if (typeof reviver === 'string') {\n    filename = reviver;\n    reviver = null;\n  }\n  try {\n    try {\n      return JSON.parse(string, reviver);\n    } catch (error) {\n      fallback(string, reviver);\n      throw error;\n    }\n  } catch (error) {\n    error.message = error.message.replace(/\\n/g, '');\n    const indexMatch = error.message.match(/in JSON at position (\\d+) while parsing/);\n    const jsonError = new JSONError(error);\n    if (filename) {\n      jsonError.fileName = filename;\n    }\n    if (indexMatch && indexMatch.length > 0) {\n      const lines = new LinesAndColumns(string);\n      const index = Number(indexMatch[1]);\n      const location = lines.locationForIndex(index);\n      const codeFrame = codeFrameColumns(string, {\n        start: {\n          line: location.line + 1,\n          column: location.column + 1\n        }\n      }, {\n        highlightCode: true\n      });\n      jsonError.codeFrame = codeFrame;\n    }\n    throw jsonError;\n  }\n};\nparseJson.JSONError = JSONError;\nmodule.exports = parseJson;","map":{"version":3,"names":["errorEx","require","fallback","default","LinesAndColumns","codeFrameColumns","JSONError","fileName","append","codeFrame","parseJson","string","reviver","filename","JSON","parse","error","message","replace","indexMatch","match","jsonError","length","lines","index","Number","location","locationForIndex","start","line","column","highlightCode","module","exports"],"sources":["D:/Julieth-Campos/PSO/node_modules/parse-json/index.js"],"sourcesContent":["'use strict';\nconst errorEx = require('error-ex');\nconst fallback = require('json-parse-even-better-errors');\nconst {default: LinesAndColumns} = require('lines-and-columns');\nconst {codeFrameColumns} = require('@babel/code-frame');\n\nconst JSONError = errorEx('JSONError', {\n\tfileName: errorEx.append('in %s'),\n\tcodeFrame: errorEx.append('\\n\\n%s\\n')\n});\n\nconst parseJson = (string, reviver, filename) => {\n\tif (typeof reviver === 'string') {\n\t\tfilename = reviver;\n\t\treviver = null;\n\t}\n\n\ttry {\n\t\ttry {\n\t\t\treturn JSON.parse(string, reviver);\n\t\t} catch (error) {\n\t\t\tfallback(string, reviver);\n\t\t\tthrow error;\n\t\t}\n\t} catch (error) {\n\t\terror.message = error.message.replace(/\\n/g, '');\n\t\tconst indexMatch = error.message.match(/in JSON at position (\\d+) while parsing/);\n\n\t\tconst jsonError = new JSONError(error);\n\t\tif (filename) {\n\t\t\tjsonError.fileName = filename;\n\t\t}\n\n\t\tif (indexMatch && indexMatch.length > 0) {\n\t\t\tconst lines = new LinesAndColumns(string);\n\t\t\tconst index = Number(indexMatch[1]);\n\t\t\tconst location = lines.locationForIndex(index);\n\n\t\t\tconst codeFrame = codeFrameColumns(\n\t\t\t\tstring,\n\t\t\t\t{start: {line: location.line + 1, column: location.column + 1}},\n\t\t\t\t{highlightCode: true}\n\t\t\t);\n\n\t\t\tjsonError.codeFrame = codeFrame;\n\t\t}\n\n\t\tthrow jsonError;\n\t}\n};\n\nparseJson.JSONError = JSONError;\n\nmodule.exports = parseJson;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AACzD,MAAM;EAACE,OAAO,EAAEC;AAAe,CAAC,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAC/D,MAAM;EAACI;AAAgB,CAAC,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AAEvD,MAAMK,SAAS,GAAGN,OAAO,CAAC,WAAW,EAAE;EACtCO,QAAQ,EAAEP,OAAO,CAACQ,MAAM,CAAC,OAAO,CAAC;EACjCC,SAAS,EAAET,OAAO,CAACQ,MAAM,CAAC,UAAU;AACrC,CAAC,CAAC;AAEF,MAAME,SAAS,GAAG,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,KAAK;EAChD,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;IAChCC,QAAQ,GAAGD,OAAO;IAClBA,OAAO,GAAG,IAAI;EACf;EAEA,IAAI;IACH,IAAI;MACH,OAAOE,IAAI,CAACC,KAAK,CAACJ,MAAM,EAAEC,OAAO,CAAC;IACnC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACfd,QAAQ,CAACS,MAAM,EAAEC,OAAO,CAAC;MACzB,MAAMI,KAAK;IACZ;EACD,CAAC,CAAC,OAAOA,KAAK,EAAE;IACfA,KAAK,CAACC,OAAO,GAAGD,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAChD,MAAMC,UAAU,GAAGH,KAAK,CAACC,OAAO,CAACG,KAAK,CAAC,yCAAyC,CAAC;IAEjF,MAAMC,SAAS,GAAG,IAAIf,SAAS,CAACU,KAAK,CAAC;IACtC,IAAIH,QAAQ,EAAE;MACbQ,SAAS,CAACd,QAAQ,GAAGM,QAAQ;IAC9B;IAEA,IAAIM,UAAU,IAAIA,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;MACxC,MAAMC,KAAK,GAAG,IAAInB,eAAe,CAACO,MAAM,CAAC;MACzC,MAAMa,KAAK,GAAGC,MAAM,CAACN,UAAU,CAAC,CAAC,CAAC,CAAC;MACnC,MAAMO,QAAQ,GAAGH,KAAK,CAACI,gBAAgB,CAACH,KAAK,CAAC;MAE9C,MAAMf,SAAS,GAAGJ,gBAAgB,CACjCM,MAAM,EACN;QAACiB,KAAK,EAAE;UAACC,IAAI,EAAEH,QAAQ,CAACG,IAAI,GAAG,CAAC;UAAEC,MAAM,EAAEJ,QAAQ,CAACI,MAAM,GAAG;QAAC;MAAC,CAAC,EAC/D;QAACC,aAAa,EAAE;MAAI,CAAC,CACrB;MAEDV,SAAS,CAACZ,SAAS,GAAGA,SAAS;IAChC;IAEA,MAAMY,SAAS;EAChB;AACD,CAAC;AAEDX,SAAS,CAACJ,SAAS,GAAGA,SAAS;AAE/B0B,MAAM,CAACC,OAAO,GAAGvB,SAAS"},"metadata":{},"sourceType":"script"}