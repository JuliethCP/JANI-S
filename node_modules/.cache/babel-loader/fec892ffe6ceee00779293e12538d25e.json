{"ast":null,"code":"/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Target, TargetType } from '../api/Target.js';\nimport { debugError } from '../common/util.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { CdpCDPSession } from './CDPSession.js';\nimport { CdpPage } from './Page.js';\nimport { WebWorker } from './WebWorker.js';\n/**\n * @internal\n */\nexport var InitializationStatus;\n(function (InitializationStatus) {\n  InitializationStatus[\"SUCCESS\"] = \"success\";\n  InitializationStatus[\"ABORTED\"] = \"aborted\";\n})(InitializationStatus || (InitializationStatus = {}));\n/**\n * @internal\n */\nexport class CdpTarget extends Target {\n  #browserContext;\n  #session;\n  #targetInfo;\n  #targetManager;\n  #sessionFactory;\n  _initializedDeferred = Deferred.create();\n  _isClosedDeferred = Deferred.create();\n  _targetId;\n  /**\n   * To initialize the target for use, call initialize.\n   *\n   * @internal\n   */\n  constructor(targetInfo, session, browserContext, targetManager, sessionFactory) {\n    super();\n    this.#session = session;\n    this.#targetManager = targetManager;\n    this.#targetInfo = targetInfo;\n    this.#browserContext = browserContext;\n    this._targetId = targetInfo.targetId;\n    this.#sessionFactory = sessionFactory;\n    if (this.#session && this.#session instanceof CdpCDPSession) {\n      this.#session._setTarget(this);\n    }\n  }\n  _subtype() {\n    return this.#targetInfo.subtype;\n  }\n  _session() {\n    return this.#session;\n  }\n  _sessionFactory() {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory;\n  }\n  createCDPSession() {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory(false).then(session => {\n      session._setTarget(this);\n      return session;\n    });\n  }\n  url() {\n    return this.#targetInfo.url;\n  }\n  type() {\n    const type = this.#targetInfo.type;\n    switch (type) {\n      case 'page':\n        return TargetType.PAGE;\n      case 'background_page':\n        return TargetType.BACKGROUND_PAGE;\n      case 'service_worker':\n        return TargetType.SERVICE_WORKER;\n      case 'shared_worker':\n        return TargetType.SHARED_WORKER;\n      case 'browser':\n        return TargetType.BROWSER;\n      case 'webview':\n        return TargetType.WEBVIEW;\n      case 'tab':\n        return TargetType.TAB;\n      default:\n        return TargetType.OTHER;\n    }\n  }\n  _targetManager() {\n    if (!this.#targetManager) {\n      throw new Error('targetManager is not initialized');\n    }\n    return this.#targetManager;\n  }\n  _getTargetInfo() {\n    return this.#targetInfo;\n  }\n  browser() {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialised');\n    }\n    return this.#browserContext.browser();\n  }\n  browserContext() {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialised');\n    }\n    return this.#browserContext;\n  }\n  opener() {\n    const {\n      openerId\n    } = this.#targetInfo;\n    if (!openerId) {\n      return;\n    }\n    return this.browser().targets().find(target => {\n      return target._targetId === openerId;\n    });\n  }\n  _targetInfoChanged(targetInfo) {\n    this.#targetInfo = targetInfo;\n    this._checkIfInitialized();\n  }\n  _initialize() {\n    this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n  }\n  _isTargetExposed() {\n    return this.type() !== TargetType.TAB && !this._subtype();\n  }\n  _checkIfInitialized() {\n    if (!this._initializedDeferred.resolved()) {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n/**\n * @internal\n */\nexport class PageTarget extends CdpTarget {\n  #defaultViewport;\n  pagePromise;\n  #ignoreHTTPSErrors;\n  constructor(targetInfo, session, browserContext, targetManager, sessionFactory, ignoreHTTPSErrors, defaultViewport) {\n    super(targetInfo, session, browserContext, targetManager, sessionFactory);\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#defaultViewport = defaultViewport ?? undefined;\n  }\n  _initialize() {\n    this._initializedDeferred.valueOrThrow().then(async result => {\n      if (result === InitializationStatus.ABORTED) {\n        return;\n      }\n      const opener = this.opener();\n      if (!(opener instanceof PageTarget)) {\n        return;\n      }\n      if (!opener || !opener.pagePromise || this.type() !== 'page') {\n        return true;\n      }\n      const openerPage = await opener.pagePromise;\n      if (!openerPage.listenerCount(\"popup\" /* PageEvent.Popup */)) {\n        return true;\n      }\n      const popupPage = await this.page();\n      openerPage.emit(\"popup\" /* PageEvent.Popup */, popupPage);\n      return true;\n    }).catch(debugError);\n    this._checkIfInitialized();\n  }\n  async page() {\n    if (!this.pagePromise) {\n      const session = this._session();\n      this.pagePromise = (session ? Promise.resolve(session) : this._sessionFactory()( /* isAutoAttachEmulated=*/false)).then(client => {\n        return CdpPage._create(client, this, this.#ignoreHTTPSErrors, this.#defaultViewport ?? null);\n      });\n    }\n    return (await this.pagePromise) ?? null;\n  }\n  _checkIfInitialized() {\n    if (this._initializedDeferred.resolved()) {\n      return;\n    }\n    if (this._getTargetInfo().url !== '') {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n/**\n * @internal\n */\nexport class DevToolsTarget extends PageTarget {}\n/**\n * @internal\n */\nexport class WorkerTarget extends CdpTarget {\n  #workerPromise;\n  async worker() {\n    if (!this.#workerPromise) {\n      const session = this._session();\n      // TODO(einbinder): Make workers send their console logs.\n      this.#workerPromise = (session ? Promise.resolve(session) : this._sessionFactory()( /* isAutoAttachEmulated=*/false)).then(client => {\n        return new WebWorker(client, this._getTargetInfo().url, () => {} /* consoleAPICalled */, () => {} /* exceptionThrown */);\n      });\n    }\n\n    return await this.#workerPromise;\n  }\n}\n/**\n * @internal\n */\nexport class OtherTarget extends CdpTarget {}","map":{"version":3,"mappings":"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","names":["Target","TargetType","debugError","Deferred","CdpCDPSession","CdpPage","WebWorker","InitializationStatus","CdpTarget","_initializedDeferred","create","_isClosedDeferred","_targetId","constructor","targetInfo","session","browserContext","targetManager","sessionFactory","targetId","_setTarget","_subtype","subtype","_session","_sessionFactory","Error","createCDPSession","then","url","type","PAGE","BACKGROUND_PAGE","SERVICE_WORKER","SHARED_WORKER","BROWSER","WEBVIEW","TAB","OTHER","_targetManager","_getTargetInfo","browser","opener","openerId","targets","find","target","_targetInfoChanged","_checkIfInitialized","_initialize","resolve","SUCCESS","_isTargetExposed","resolved","PageTarget","pagePromise","ignoreHTTPSErrors","defaultViewport","undefined","valueOrThrow","result","ABORTED","openerPage","listenerCount","popupPage","page","emit","catch","Promise","client","_create","DevToolsTarget","WorkerTarget","worker","OtherTarget"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\Target.ts"],"sourcesContent":["/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {Browser} from '../api/Browser.js';\nimport type {BrowserContext} from '../api/BrowserContext.js';\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {PageEvent, type Page} from '../api/Page.js';\nimport {Target, TargetType} from '../api/Target.js';\nimport {debugError} from '../common/util.js';\nimport type {Viewport} from '../common/Viewport.js';\nimport {Deferred} from '../util/Deferred.js';\n\nimport {CdpCDPSession} from './CDPSession.js';\nimport {CdpPage} from './Page.js';\nimport type {TargetManager} from './TargetManager.js';\nimport {WebWorker} from './WebWorker.js';\n\n/**\n * @internal\n */\nexport enum InitializationStatus {\n  SUCCESS = 'success',\n  ABORTED = 'aborted',\n}\n\n/**\n * @internal\n */\nexport class CdpTarget extends Target {\n  #browserContext?: BrowserContext;\n  #session?: CDPSession;\n  #targetInfo: Protocol.Target.TargetInfo;\n  #targetManager?: TargetManager;\n  #sessionFactory:\n    | ((isAutoAttachEmulated: boolean) => Promise<CDPSession>)\n    | undefined;\n\n  _initializedDeferred = Deferred.create<InitializationStatus>();\n  _isClosedDeferred = Deferred.create<void>();\n  _targetId: string;\n\n  /**\n   * To initialize the target for use, call initialize.\n   *\n   * @internal\n   */\n  constructor(\n    targetInfo: Protocol.Target.TargetInfo,\n    session: CDPSession | undefined,\n    browserContext: BrowserContext | undefined,\n    targetManager: TargetManager | undefined,\n    sessionFactory:\n      | ((isAutoAttachEmulated: boolean) => Promise<CDPSession>)\n      | undefined\n  ) {\n    super();\n    this.#session = session;\n    this.#targetManager = targetManager;\n    this.#targetInfo = targetInfo;\n    this.#browserContext = browserContext;\n    this._targetId = targetInfo.targetId;\n    this.#sessionFactory = sessionFactory;\n    if (this.#session && this.#session instanceof CdpCDPSession) {\n      this.#session._setTarget(this);\n    }\n  }\n\n  _subtype(): string | undefined {\n    return this.#targetInfo.subtype;\n  }\n\n  _session(): CDPSession | undefined {\n    return this.#session;\n  }\n\n  protected _sessionFactory(): (\n    isAutoAttachEmulated: boolean\n  ) => Promise<CDPSession> {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory;\n  }\n\n  override createCDPSession(): Promise<CDPSession> {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory(false).then(session => {\n      (session as CdpCDPSession)._setTarget(this);\n      return session;\n    });\n  }\n\n  override url(): string {\n    return this.#targetInfo.url;\n  }\n\n  override type(): TargetType {\n    const type = this.#targetInfo.type;\n    switch (type) {\n      case 'page':\n        return TargetType.PAGE;\n      case 'background_page':\n        return TargetType.BACKGROUND_PAGE;\n      case 'service_worker':\n        return TargetType.SERVICE_WORKER;\n      case 'shared_worker':\n        return TargetType.SHARED_WORKER;\n      case 'browser':\n        return TargetType.BROWSER;\n      case 'webview':\n        return TargetType.WEBVIEW;\n      case 'tab':\n        return TargetType.TAB;\n      default:\n        return TargetType.OTHER;\n    }\n  }\n\n  _targetManager(): TargetManager {\n    if (!this.#targetManager) {\n      throw new Error('targetManager is not initialized');\n    }\n    return this.#targetManager;\n  }\n\n  _getTargetInfo(): Protocol.Target.TargetInfo {\n    return this.#targetInfo;\n  }\n\n  override browser(): Browser {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialised');\n    }\n    return this.#browserContext.browser();\n  }\n\n  override browserContext(): BrowserContext {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialised');\n    }\n    return this.#browserContext;\n  }\n\n  override opener(): Target | undefined {\n    const {openerId} = this.#targetInfo;\n    if (!openerId) {\n      return;\n    }\n    return this.browser()\n      .targets()\n      .find(target => {\n        return (target as CdpTarget)._targetId === openerId;\n      });\n  }\n\n  _targetInfoChanged(targetInfo: Protocol.Target.TargetInfo): void {\n    this.#targetInfo = targetInfo;\n    this._checkIfInitialized();\n  }\n\n  _initialize(): void {\n    this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n  }\n\n  _isTargetExposed(): boolean {\n    return this.type() !== TargetType.TAB && !this._subtype();\n  }\n\n  protected _checkIfInitialized(): void {\n    if (!this._initializedDeferred.resolved()) {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport class PageTarget extends CdpTarget {\n  #defaultViewport?: Viewport;\n  protected pagePromise?: Promise<Page>;\n  #ignoreHTTPSErrors: boolean;\n\n  constructor(\n    targetInfo: Protocol.Target.TargetInfo,\n    session: CDPSession | undefined,\n    browserContext: BrowserContext,\n    targetManager: TargetManager,\n    sessionFactory: (isAutoAttachEmulated: boolean) => Promise<CDPSession>,\n    ignoreHTTPSErrors: boolean,\n    defaultViewport: Viewport | null\n  ) {\n    super(targetInfo, session, browserContext, targetManager, sessionFactory);\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#defaultViewport = defaultViewport ?? undefined;\n  }\n\n  override _initialize(): void {\n    this._initializedDeferred\n      .valueOrThrow()\n      .then(async result => {\n        if (result === InitializationStatus.ABORTED) {\n          return;\n        }\n        const opener = this.opener();\n        if (!(opener instanceof PageTarget)) {\n          return;\n        }\n        if (!opener || !opener.pagePromise || this.type() !== 'page') {\n          return true;\n        }\n        const openerPage = await opener.pagePromise;\n        if (!openerPage.listenerCount(PageEvent.Popup)) {\n          return true;\n        }\n        const popupPage = await this.page();\n        openerPage.emit(PageEvent.Popup, popupPage);\n        return true;\n      })\n      .catch(debugError);\n    this._checkIfInitialized();\n  }\n\n  override async page(): Promise<Page | null> {\n    if (!this.pagePromise) {\n      const session = this._session();\n      this.pagePromise = (\n        session\n          ? Promise.resolve(session)\n          : this._sessionFactory()(/* isAutoAttachEmulated=*/ false)\n      ).then(client => {\n        return CdpPage._create(\n          client,\n          this,\n          this.#ignoreHTTPSErrors,\n          this.#defaultViewport ?? null\n        );\n      });\n    }\n    return (await this.pagePromise) ?? null;\n  }\n\n  override _checkIfInitialized(): void {\n    if (this._initializedDeferred.resolved()) {\n      return;\n    }\n    if (this._getTargetInfo().url !== '') {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport class DevToolsTarget extends PageTarget {}\n\n/**\n * @internal\n */\nexport class WorkerTarget extends CdpTarget {\n  #workerPromise?: Promise<WebWorker>;\n\n  override async worker(): Promise<WebWorker | null> {\n    if (!this.#workerPromise) {\n      const session = this._session();\n      // TODO(einbinder): Make workers send their console logs.\n      this.#workerPromise = (\n        session\n          ? Promise.resolve(session)\n          : this._sessionFactory()(/* isAutoAttachEmulated=*/ false)\n      ).then(client => {\n        return new WebWorker(\n          client,\n          this._getTargetInfo().url,\n          () => {} /* consoleAPICalled */,\n          () => {} /* exceptionThrown */\n        );\n      });\n    }\n    return await this.#workerPromise;\n  }\n}\n\n/**\n * @internal\n */\nexport class OtherTarget extends CdpTarget {}\n"]},"metadata":{},"sourceType":"module"}