{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExtensionDescription = exports.ExplorerBase = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass ExplorerBase {\n  #loadingMetaConfig = false;\n  config;\n  loadCache;\n  searchCache;\n  constructor(options) {\n    this.config = options;\n    if (options.cache) {\n      this.loadCache = new Map();\n      this.searchCache = new Map();\n    }\n    this.#validateConfig();\n  }\n  set loadingMetaConfig(value) {\n    this.#loadingMetaConfig = value;\n  }\n  #validateConfig() {\n    const config = this.config;\n    for (const place of config.searchPlaces) {\n      const extension = path_1.default.extname(place);\n      const loader = this.config.loaders[extension || 'noExt'] ?? this.config.loaders['default'];\n      if (loader === undefined) {\n        throw new Error(`Missing loader for ${getExtensionDescription(place)}.`);\n      }\n      if (typeof loader !== 'function') {\n        throw new Error(`Loader for ${getExtensionDescription(place)} is not a function: Received ${typeof loader}.`);\n      }\n    }\n  }\n  clearLoadCache() {\n    if (this.loadCache) {\n      this.loadCache.clear();\n    }\n  }\n  clearSearchCache() {\n    if (this.searchCache) {\n      this.searchCache.clear();\n    }\n  }\n  clearCaches() {\n    this.clearLoadCache();\n    this.clearSearchCache();\n  }\n  toCosmiconfigResult(filepath, config) {\n    if (config === null) {\n      return null;\n    }\n    if (config === undefined) {\n      return {\n        filepath,\n        config: undefined,\n        isEmpty: true\n      };\n    }\n    if (this.config.applyPackagePropertyPathToConfiguration || this.#loadingMetaConfig) {\n      config = (0, util_js_1.getPropertyByPath)(config, this.config.packageProp);\n    }\n    if (config === undefined) {\n      return {\n        filepath,\n        config: undefined,\n        isEmpty: true\n      };\n    }\n    return {\n      config,\n      filepath\n    };\n  }\n}\nexports.ExplorerBase = ExplorerBase;\n/**\n * @internal\n */\nfunction getExtensionDescription(extension) {\n  /* istanbul ignore next -- @preserve */\n  return extension ? `extension \"${extension}\"` : 'files without extensions';\n}\nexports.getExtensionDescription = getExtensionDescription;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AASA;AAEA;;;AAGA,MAAsBA,YAAY;EAGhC,kBAAkB,GAAG,KAAK;EAEPC,MAAM;EACNC,SAAS;EAGTC,WAAW;EAI9BC,YAAmBC,OAAoB;IACrC,IAAI,CAACJ,MAAM,GAAGI,OAAO;IACrB,IAAIA,OAAO,CAACC,KAAK,EAAE;MACjB,IAAI,CAACJ,SAAS,GAAG,IAAIK,GAAG,EAAE;MAC1B,IAAI,CAACJ,WAAW,GAAG,IAAII,GAAG,EAAE;;IAE9B,IAAI,CAAC,eAAe,EAAE;EACxB;EAEA,IAAcC,iBAAiB,CAACC,KAAc;IAC5C,IAAI,CAAC,kBAAkB,GAAGA,KAAK;EACjC;EAEA,eAAe;IACb,MAAMR,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,KAAK,MAAMS,KAAK,IAAIT,MAAM,CAACU,YAAY,EAAE;MACvC,MAAMC,SAAS,GAAGC,cAAI,CAACC,OAAO,CAACJ,KAAK,CAAC;MACrC,MAAMK,MAAM,GACV,IAAI,CAACd,MAAM,CAACe,OAAO,CAACJ,SAAS,IAAI,OAAO,CAAC,IACzC,IAAI,CAACX,MAAM,CAACe,OAAO,CAAC,SAAS,CAAC;MAChC,IAAID,MAAM,KAAKE,SAAS,EAAE;QACxB,MAAM,IAAIC,KAAK,CACb,sBAAsBC,uBAAuB,CAACT,KAAK,CAAC,GAAG,CACxD;;MAEH,IAAI,OAAOK,MAAM,KAAK,UAAU,EAAE;QAChC,MAAM,IAAIG,KAAK,CACb,cAAcC,uBAAuB,CACnCT,KAAK,CACN,gCAAgC,OAAOK,MAAM,GAAG,CAClD;;;EAGP;EAEOK,cAAc;IACnB,IAAI,IAAI,CAAClB,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAACmB,KAAK,EAAE;;EAE1B;EAEOC,gBAAgB;IACrB,IAAI,IAAI,CAACnB,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACkB,KAAK,EAAE;;EAE5B;EAEOE,WAAW;IAChB,IAAI,CAACH,cAAc,EAAE;IACrB,IAAI,CAACE,gBAAgB,EAAE;EACzB;EAEUE,mBAAmB,CAC3BC,QAAgB,EAChBxB,MAAc;IAEd,IAAIA,MAAM,KAAK,IAAI,EAAE;MACnB,OAAO,IAAI;;IAEb,IAAIA,MAAM,KAAKgB,SAAS,EAAE;MACxB,OAAO;QAAEQ,QAAQ;QAAExB,MAAM,EAAEgB,SAAS;QAAES,OAAO,EAAE;MAAI,CAAE;;IAEvD,IACE,IAAI,CAACzB,MAAM,CAAC0B,uCAAuC,IACnD,IAAI,CAAC,kBAAkB,EACvB;MACA1B,MAAM,GAAG,+BAAiB,EAACA,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC2B,WAAW,CAAC;;IAE7D,IAAI3B,MAAM,KAAKgB,SAAS,EAAE;MACxB,OAAO;QAAEQ,QAAQ;QAAExB,MAAM,EAAEgB,SAAS;QAAES,OAAO,EAAE;MAAI,CAAE;;IAEvD,OAAO;MAAEzB,MAAM;MAAEwB;IAAQ,CAAE;EAC7B;;AAtFFI;AAyFA;;;AAGA,SAAgBV,uBAAuB,CAACP,SAAkB;EACxD;EACA,OAAOA,SAAS,GAAG,cAAcA,SAAS,GAAG,GAAG,0BAA0B;AAC5E;AAHAiB","names":["ExplorerBase","config","loadCache","searchCache","constructor","options","cache","Map","loadingMetaConfig","value","place","searchPlaces","extension","path_1","extname","loader","loaders","undefined","Error","getExtensionDescription","clearLoadCache","clear","clearSearchCache","clearCaches","toCosmiconfigResult","filepath","isEmpty","applyPackagePropertyPathToConfiguration","packageProp","exports"],"sources":["../src/ExplorerBase.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}