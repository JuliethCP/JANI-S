{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst util_1 = require(\"./util\");\nconst weekdays = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n/**\n * Only the first parameter is mandatory. Either the second, the third, or both\n * may be left out.\n *\n * If only one parameter is present, the function yeilds a true value on the\n * weekday that the parameter represents. If the string \"GMT\" is specified as\n * a second parameter, times are taken to be in GMT, otherwise in local timezone.\n *\n * If both wd1 and wd1 are defined, the condition is true if the current weekday\n * is in between those two weekdays. Bounds are inclusive. If the \"GMT\" parameter\n * is specified, times are taken to be in GMT, otherwise the local timezone is\n * used.\n *\n * Valid \"weekday strings\" are:\n *\n *     SUN MON TUE WED THU FRI SAT\n *\n * Examples:\n *\n * ``` js\n * weekdayRange(\"MON\", \"FRI\")\n * true Monday trhough Friday (local timezone).\n *\n * weekdayRange(\"MON\", \"FRI\", \"GMT\")\n * same as above, but GMT timezone.\n *\n * weekdayRange(\"SAT\")\n * true on Saturdays local time.\n *\n * weekdayRange(\"SAT\", \"GMT\")\n * true on Saturdays GMT time.\n *\n * weekdayRange(\"FRI\", \"MON\")\n * true Friday through Monday (note, order does matter!).\n * ```\n *\n *\n * @param {String} wd1 one of the weekday strings.\n * @param {String} wd2 one of the weekday strings.\n * @param {String} gmt is either the string: GMT or is left out.\n * @return {Boolean}\n */\nfunction weekdayRange(wd1, wd2, gmt) {\n  let useGMTzone = false;\n  let wd1Index = -1;\n  let wd2Index = -1;\n  let wd2IsGmt = false;\n  if ((0, util_1.isGMT)(gmt)) {\n    useGMTzone = true;\n  } else if ((0, util_1.isGMT)(wd2)) {\n    useGMTzone = true;\n    wd2IsGmt = true;\n  }\n  wd1Index = weekdays.indexOf(wd1);\n  if (!wd2IsGmt && isWeekday(wd2)) {\n    wd2Index = weekdays.indexOf(wd2);\n  }\n  const todaysDay = getTodaysDay(useGMTzone);\n  let result;\n  if (wd2Index < 0) {\n    result = todaysDay === wd1Index;\n  } else if (wd1Index <= wd2Index) {\n    result = valueInRange(wd1Index, todaysDay, wd2Index);\n  } else {\n    result = valueInRange(wd1Index, todaysDay, 6) || valueInRange(0, todaysDay, wd2Index);\n  }\n  return result;\n}\nexports.default = weekdayRange;\nfunction getTodaysDay(gmt) {\n  return gmt ? new Date().getUTCDay() : new Date().getDay();\n}\n// start <= value <= finish\nfunction valueInRange(start, value, finish) {\n  return start <= value && value <= finish;\n}\nfunction isWeekday(v) {\n  if (!v) return false;\n  return weekdays.includes(v);\n}","map":{"version":3,"mappings":";;;;;AAAA;AAGA,MAAMA,QAAQ,GAAc,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;AAE7E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAwBC,YAAY,CACnCC,GAAY,EACZC,GAAmB,EACnBC,GAAS;EAET,IAAIC,UAAU,GAAG,KAAK;EACtB,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,QAAQ,GAAG,KAAK;EAEpB,IAAI,gBAAK,EAACJ,GAAG,CAAC,EAAE;IACfC,UAAU,GAAG,IAAI;GACjB,MAAM,IAAI,gBAAK,EAACF,GAAG,CAAC,EAAE;IACtBE,UAAU,GAAG,IAAI;IACjBG,QAAQ,GAAG,IAAI;;EAGhBF,QAAQ,GAAGN,QAAQ,CAACS,OAAO,CAACP,GAAG,CAAC;EAEhC,IAAI,CAACM,QAAQ,IAAIE,SAAS,CAACP,GAAG,CAAC,EAAE;IAChCI,QAAQ,GAAGP,QAAQ,CAACS,OAAO,CAACN,GAAG,CAAC;;EAGjC,MAAMQ,SAAS,GAAGC,YAAY,CAACP,UAAU,CAAC;EAC1C,IAAIQ,MAAe;EAEnB,IAAIN,QAAQ,GAAG,CAAC,EAAE;IACjBM,MAAM,GAAGF,SAAS,KAAKL,QAAQ;GAC/B,MAAM,IAAIA,QAAQ,IAAIC,QAAQ,EAAE;IAChCM,MAAM,GAAGC,YAAY,CAACR,QAAQ,EAAEK,SAAS,EAAEJ,QAAQ,CAAC;GACpD,MAAM;IACNM,MAAM,GACLC,YAAY,CAACR,QAAQ,EAAEK,SAAS,EAAE,CAAC,CAAC,IACpCG,YAAY,CAAC,CAAC,EAAEH,SAAS,EAAEJ,QAAQ,CAAC;;EAGtC,OAAOM,MAAM;AACd;AArCAE;AAuCA,SAASH,YAAY,CAACR,GAAY;EACjC,OAAOA,GAAG,GAAG,IAAIY,IAAI,EAAE,CAACC,SAAS,EAAE,GAAG,IAAID,IAAI,EAAE,CAACE,MAAM,EAAE;AAC1D;AAEA;AACA,SAASJ,YAAY,CAACK,KAAa,EAAEC,KAAa,EAAEC,MAAc;EACjE,OAAOF,KAAK,IAAIC,KAAK,IAAIA,KAAK,IAAIC,MAAM;AACzC;AAEA,SAASX,SAAS,CAACY,CAAU;EAC5B,IAAI,CAACA,CAAC,EAAE,OAAO,KAAK;EACpB,OAAQtB,QAAqB,CAACuB,QAAQ,CAACD,CAAC,CAAC;AAC1C","names":["weekdays","weekdayRange","wd1","wd2","gmt","useGMTzone","wd1Index","wd2Index","wd2IsGmt","indexOf","isWeekday","todaysDay","getTodaysDay","result","valueInRange","exports","Date","getUTCDay","getDay","start","value","finish","v","includes"],"sources":["../src/weekdayRange.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}