{"ast":null,"code":"var _jsxFileName = \"D:\\\\Julieth-Campos\\\\PSO\\\\src\\\\components\\\\ScreenRecordingComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../components/componentCSS/ScreenRecordingComponent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScreenRecordingComponent(_ref) {\n  _s();\n  let {\n    switchToAnalysis\n  } = _ref;\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingCount, setRecordingCount] = useState(1);\n  const mediaRecorderRef = useRef(null);\n  const mediaChunksRef = useRef([]);\n  useEffect(() => {\n    const startRecording = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getDisplayMedia({\n          video: true,\n          audio: true\n        });\n        const recorder = new MediaRecorder(stream);\n        mediaRecorderRef.current = recorder;\n        const interval = setInterval(() => {\n          if (isRecording) {\n            // Detener la grabación actual\n            recorder.stop();\n            // Limpiar los chunks para la próxima grabación\n            mediaChunksRef.current = [];\n            // Iniciar una nueva grabación\n            recorder.start();\n          }\n        }, 60000); // 60 seconds interval\n\n        recorder.ondataavailable = e => {\n          if (e.data.size > 0) {\n            mediaChunksRef.current.push(e.data);\n          }\n        };\n        recorder.onstop = () => {\n          const mediaBlob = new Blob(mediaChunksRef.current, {\n            type: \"video/mp4\"\n          });\n\n          // Verificar el tamaño del Blob\n          if (mediaBlob.size > 100 * 1024) {\n            const url = URL.createObjectURL(mediaBlob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = `captura_${recordingCount}.mp4`;\n            a.click();\n            URL.revokeObjectURL(url);\n          }\n\n          // Limpiar los chunks para la próxima grabación\n          mediaChunksRef.current = [];\n          setRecordingCount(prevCount => prevCount + 1);\n        };\n        recorder.start();\n        return () => {\n          if (recorder.state !== \"inactive\") {\n            recorder.stop();\n          }\n          stream.getTracks().forEach(track => track.stop());\n          clearInterval(interval);\n        };\n      } catch (error) {\n        console.error(\"Error al acceder a la pantalla o región:\", error);\n      }\n    };\n    if (isRecording) {\n      // Iniciar una nueva grabación si se está grabando\n      startRecording();\n    } else {\n      // Detener la grabación si no se está grabando\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n        mediaRecorderRef.current.stop();\n      }\n    }\n\n    // Cleanup: Detener la grabación y limpiar los tracks del stream al desmontar el componente\n    return () => {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n        mediaRecorderRef.current.stop();\n      }\n    };\n  }, [isRecording, recordingCount]);\n  const startRecordingHandler = () => {\n    setIsRecording(true);\n  };\n  const stopRecordingHandler = () => {\n    setIsRecording(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ScreenRecordingContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Interfaz de Grabaci\\xF3n de Pantalla\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      className: \"VideoPreview\",\n      id: \"preview\",\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ButtonContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Button\",\n        id: \"startRecording\",\n        onClick: startRecordingHandler,\n        disabled: isRecording,\n        children: \"Iniciar Grabaci\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Button\",\n        onClick: stopRecordingHandler,\n        disabled: !isRecording,\n        children: \"Detener Grabaci\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Button\",\n        onClick: switchToAnalysis,\n        children: \"Cambiar a An\\xE1lisis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(ScreenRecordingComponent, \"qshTles9BUYYUlGzo/MBF+71aBo=\");\n_c = ScreenRecordingComponent;\nexport default ScreenRecordingComponent;\nvar _c;\n$RefreshReg$(_c, \"ScreenRecordingComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ScreenRecordingComponent","switchToAnalysis","isRecording","setIsRecording","recordingCount","setRecordingCount","mediaRecorderRef","mediaChunksRef","startRecording","stream","navigator","mediaDevices","getDisplayMedia","video","audio","recorder","MediaRecorder","current","interval","setInterval","stop","start","ondataavailable","e","data","size","push","onstop","mediaBlob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","prevCount","state","getTracks","forEach","track","clearInterval","error","console","startRecordingHandler","stopRecordingHandler"],"sources":["D:/Julieth-Campos/PSO/src/components/ScreenRecordingComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../components/componentCSS/ScreenRecordingComponent.css\";\r\n\r\nfunction ScreenRecordingComponent({ switchToAnalysis }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [recordingCount, setRecordingCount] = useState(1);\r\n  const mediaRecorderRef = useRef(null);\r\n  const mediaChunksRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    const startRecording = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });\r\n        const recorder = new MediaRecorder(stream);\r\n        mediaRecorderRef.current = recorder;\r\n\r\n        const interval = setInterval(() => {\r\n          if (isRecording) {\r\n            // Detener la grabación actual\r\n            recorder.stop();\r\n            // Limpiar los chunks para la próxima grabación\r\n            mediaChunksRef.current = [];\r\n            // Iniciar una nueva grabación\r\n            recorder.start();\r\n          }\r\n        }, 60000); // 60 seconds interval\r\n\r\n        recorder.ondataavailable = (e) => {\r\n          if (e.data.size > 0) {\r\n            mediaChunksRef.current.push(e.data);\r\n          }\r\n        };\r\n\r\n        recorder.onstop = () => {\r\n          const mediaBlob = new Blob(mediaChunksRef.current, { type: \"video/mp4\" });\r\n\r\n          // Verificar el tamaño del Blob\r\n          if (mediaBlob.size > 100 * 1024) {\r\n            const url = URL.createObjectURL(mediaBlob);\r\n            const a = document.createElement(\"a\");\r\n            a.href = url;\r\n            a.download = `captura_${recordingCount}.mp4`;\r\n            a.click();\r\n            URL.revokeObjectURL(url);\r\n          }\r\n\r\n          // Limpiar los chunks para la próxima grabación\r\n          mediaChunksRef.current = [];\r\n          setRecordingCount((prevCount) => prevCount + 1);\r\n        };\r\n\r\n        recorder.start();\r\n\r\n        return () => {\r\n          if (recorder.state !== \"inactive\") {\r\n            recorder.stop();\r\n          }\r\n          stream.getTracks().forEach((track) => track.stop());\r\n          clearInterval(interval);\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error al acceder a la pantalla o región:\", error);\r\n      }\r\n    };\r\n\r\n    if (isRecording) {\r\n      // Iniciar una nueva grabación si se está grabando\r\n      startRecording();\r\n    } else {\r\n      // Detener la grabación si no se está grabando\r\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\r\n        mediaRecorderRef.current.stop();\r\n      }\r\n    }\r\n\r\n    // Cleanup: Detener la grabación y limpiar los tracks del stream al desmontar el componente\r\n    return () => {\r\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\r\n        mediaRecorderRef.current.stop();\r\n      }\r\n    };\r\n  }, [isRecording, recordingCount]);\r\n\r\n  const startRecordingHandler = () => {\r\n    setIsRecording(true);\r\n  };\r\n\r\n  const stopRecordingHandler = () => {\r\n    setIsRecording(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"ScreenRecordingContainer\">\r\n      <h2>Interfaz de Grabación de Pantalla</h2>\r\n      <video className=\"VideoPreview\" id=\"preview\" autoPlay muted></video>\r\n      <div className=\"ButtonContainer\">\r\n        <button\r\n          className=\"Button\"\r\n          id=\"startRecording\"\r\n          onClick={startRecordingHandler}\r\n          disabled={isRecording}\r\n        >\r\n          Iniciar Grabación\r\n        </button>\r\n        <button\r\n          className=\"Button\"\r\n          onClick={stopRecordingHandler}\r\n          disabled={!isRecording}\r\n        >\r\n          Detener Grabación\r\n        </button>\r\n        <button className=\"Button\" onClick={switchToAnalysis}>\r\n          Cambiar a Análisis\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScreenRecordingComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module"}