{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Browser as BrowserBase, WEB_PERMISSION_TO_PROTOCOL_PERMISSION } from '../api/Browser.js';\nimport { BrowserContext } from '../api/BrowserContext.js';\nimport { CDPSessionEvent } from '../api/CDPSession.js';\nimport { assert } from '../util/assert.js';\nimport { ChromeTargetManager } from './ChromeTargetManager.js';\nimport { FirefoxTargetManager } from './FirefoxTargetManager.js';\nimport { DevToolsTarget, InitializationStatus, OtherTarget, PageTarget, WorkerTarget } from './Target.js';\n/**\n * @internal\n */\nexport class CdpBrowser extends BrowserBase {\n  static async _create(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    let waitForInitiallyDiscoveredTargets = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : true;\n    const browser = new CdpBrowser(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback, waitForInitiallyDiscoveredTargets);\n    await browser._attach();\n    return browser;\n  }\n  #ignoreHTTPSErrors;\n  #defaultViewport;\n  #process;\n  #connection;\n  #closeCallback;\n  #targetFilterCallback;\n  #isPageTargetCallback;\n  #defaultContext;\n  #contexts = new Map();\n  #targetManager;\n  constructor(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    let waitForInitiallyDiscoveredTargets = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : true;\n    super();\n    product = product || 'chrome';\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#defaultViewport = defaultViewport;\n    this.#process = process;\n    this.#connection = connection;\n    this.#closeCallback = closeCallback || function () {};\n    this.#targetFilterCallback = targetFilterCallback || (() => {\n      return true;\n    });\n    this.#setIsPageTargetCallback(isPageTargetCallback);\n    if (product === 'firefox') {\n      this.#targetManager = new FirefoxTargetManager(connection, this.#createTarget, this.#targetFilterCallback);\n    } else {\n      this.#targetManager = new ChromeTargetManager(connection, this.#createTarget, this.#targetFilterCallback, waitForInitiallyDiscoveredTargets);\n    }\n    this.#defaultContext = new CdpBrowserContext(this.#connection, this);\n    for (const contextId of contextIds) {\n      this.#contexts.set(contextId, new CdpBrowserContext(this.#connection, this, contextId));\n    }\n  }\n  #emitDisconnected = () => {\n    this.emit(\"disconnected\" /* BrowserEvent.Disconnected */, undefined);\n  };\n  async _attach() {\n    this.#connection.on(CDPSessionEvent.Disconnected, this.#emitDisconnected);\n    this.#targetManager.on(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, this.#onAttachedToTarget);\n    this.#targetManager.on(\"targetGone\" /* TargetManagerEvent.TargetGone */, this.#onDetachedFromTarget);\n    this.#targetManager.on(\"targetChanged\" /* TargetManagerEvent.TargetChanged */, this.#onTargetChanged);\n    this.#targetManager.on(\"targetDiscovered\" /* TargetManagerEvent.TargetDiscovered */, this.#onTargetDiscovered);\n    await this.#targetManager.initialize();\n  }\n  _detach() {\n    this.#connection.off(CDPSessionEvent.Disconnected, this.#emitDisconnected);\n    this.#targetManager.off(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, this.#onAttachedToTarget);\n    this.#targetManager.off(\"targetGone\" /* TargetManagerEvent.TargetGone */, this.#onDetachedFromTarget);\n    this.#targetManager.off(\"targetChanged\" /* TargetManagerEvent.TargetChanged */, this.#onTargetChanged);\n    this.#targetManager.off(\"targetDiscovered\" /* TargetManagerEvent.TargetDiscovered */, this.#onTargetDiscovered);\n  }\n  process() {\n    return this.#process ?? null;\n  }\n  _targetManager() {\n    return this.#targetManager;\n  }\n  #setIsPageTargetCallback(isPageTargetCallback) {\n    this.#isPageTargetCallback = isPageTargetCallback || (target => {\n      return target.type() === 'page' || target.type() === 'background_page' || target.type() === 'webview';\n    });\n  }\n  _getIsPageTargetCallback() {\n    return this.#isPageTargetCallback;\n  }\n  async createIncognitoBrowserContext() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      proxyServer,\n      proxyBypassList\n    } = options;\n    const {\n      browserContextId\n    } = await this.#connection.send('Target.createBrowserContext', {\n      proxyServer,\n      proxyBypassList: proxyBypassList && proxyBypassList.join(',')\n    });\n    const context = new CdpBrowserContext(this.#connection, this, browserContextId);\n    this.#contexts.set(browserContextId, context);\n    return context;\n  }\n  browserContexts() {\n    return [this.#defaultContext, ...Array.from(this.#contexts.values())];\n  }\n  defaultBrowserContext() {\n    return this.#defaultContext;\n  }\n  async _disposeContext(contextId) {\n    if (!contextId) {\n      return;\n    }\n    await this.#connection.send('Target.disposeBrowserContext', {\n      browserContextId: contextId\n    });\n    this.#contexts.delete(contextId);\n  }\n  #createTarget = (targetInfo, session) => {\n    const {\n      browserContextId\n    } = targetInfo;\n    const context = browserContextId && this.#contexts.has(browserContextId) ? this.#contexts.get(browserContextId) : this.#defaultContext;\n    if (!context) {\n      throw new Error('Missing browser context');\n    }\n    const createSession = isAutoAttachEmulated => {\n      return this.#connection._createSession(targetInfo, isAutoAttachEmulated);\n    };\n    const otherTarget = new OtherTarget(targetInfo, session, context, this.#targetManager, createSession);\n    if (targetInfo.url?.startsWith('devtools://')) {\n      return new DevToolsTarget(targetInfo, session, context, this.#targetManager, createSession, this.#ignoreHTTPSErrors, this.#defaultViewport ?? null);\n    }\n    if (this.#isPageTargetCallback(otherTarget)) {\n      return new PageTarget(targetInfo, session, context, this.#targetManager, createSession, this.#ignoreHTTPSErrors, this.#defaultViewport ?? null);\n    }\n    if (targetInfo.type === 'service_worker' || targetInfo.type === 'shared_worker') {\n      return new WorkerTarget(targetInfo, session, context, this.#targetManager, createSession);\n    }\n    return otherTarget;\n  };\n  #onAttachedToTarget = async target => {\n    if (target._isTargetExposed() && (await target._initializedDeferred.valueOrThrow()) === InitializationStatus.SUCCESS) {\n      this.emit(\"targetcreated\" /* BrowserEvent.TargetCreated */, target);\n      target.browserContext().emit(\"targetcreated\" /* BrowserContextEvent.TargetCreated */, target);\n    }\n  };\n  #onDetachedFromTarget = async target => {\n    target._initializedDeferred.resolve(InitializationStatus.ABORTED);\n    target._isClosedDeferred.resolve();\n    if (target._isTargetExposed() && (await target._initializedDeferred.valueOrThrow()) === InitializationStatus.SUCCESS) {\n      this.emit(\"targetdestroyed\" /* BrowserEvent.TargetDestroyed */, target);\n      target.browserContext().emit(\"targetdestroyed\" /* BrowserContextEvent.TargetDestroyed */, target);\n    }\n  };\n  #onTargetChanged = _ref => {\n    let {\n      target\n    } = _ref;\n    this.emit(\"targetchanged\" /* BrowserEvent.TargetChanged */, target);\n    target.browserContext().emit(\"targetchanged\" /* BrowserContextEvent.TargetChanged */, target);\n  };\n  #onTargetDiscovered = targetInfo => {\n    this.emit(\"targetdiscovered\" /* BrowserEvent.TargetDiscovered */, targetInfo);\n  };\n  wsEndpoint() {\n    return this.#connection.url();\n  }\n  async newPage() {\n    return await this.#defaultContext.newPage();\n  }\n  async _createPageInContext(contextId) {\n    const {\n      targetId\n    } = await this.#connection.send('Target.createTarget', {\n      url: 'about:blank',\n      browserContextId: contextId || undefined\n    });\n    const target = await this.waitForTarget(t => {\n      return t._targetId === targetId;\n    });\n    if (!target) {\n      throw new Error(`Missing target for page (id = ${targetId})`);\n    }\n    const initialized = (await target._initializedDeferred.valueOrThrow()) === InitializationStatus.SUCCESS;\n    if (!initialized) {\n      throw new Error(`Failed to create target for page (id = ${targetId})`);\n    }\n    const page = await target.page();\n    if (!page) {\n      throw new Error(`Failed to create a page for context (id = ${contextId})`);\n    }\n    return page;\n  }\n  targets() {\n    return Array.from(this.#targetManager.getAvailableTargets().values()).filter(target => {\n      return target._isTargetExposed() && target._initializedDeferred.value() === InitializationStatus.SUCCESS;\n    });\n  }\n  target() {\n    const browserTarget = this.targets().find(target => {\n      return target.type() === 'browser';\n    });\n    if (!browserTarget) {\n      throw new Error('Browser target is not found');\n    }\n    return browserTarget;\n  }\n  async version() {\n    const version = await this.#getVersion();\n    return version.product;\n  }\n  async userAgent() {\n    const version = await this.#getVersion();\n    return version.userAgent;\n  }\n  async close() {\n    await this.#closeCallback.call(null);\n    this.disconnect();\n  }\n  disconnect() {\n    this.#targetManager.dispose();\n    this.#connection.dispose();\n    this._detach();\n  }\n  get connected() {\n    return !this.#connection._closed;\n  }\n  #getVersion() {\n    return this.#connection.send('Browser.getVersion');\n  }\n}\n/**\n * @internal\n */\nexport class CdpBrowserContext extends BrowserContext {\n  #connection;\n  #browser;\n  #id;\n  constructor(connection, browser, contextId) {\n    super();\n    this.#connection = connection;\n    this.#browser = browser;\n    this.#id = contextId;\n  }\n  get id() {\n    return this.#id;\n  }\n  targets() {\n    return this.#browser.targets().filter(target => {\n      return target.browserContext() === this;\n    });\n  }\n  waitForTarget(predicate) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.#browser.waitForTarget(target => {\n      return target.browserContext() === this && predicate(target);\n    }, options);\n  }\n  async pages() {\n    const pages = await Promise.all(this.targets().filter(target => {\n      return target.type() === 'page' || target.type() === 'other' && this.#browser._getIsPageTargetCallback()?.(target);\n    }).map(target => {\n      return target.page();\n    }));\n    return pages.filter(page => {\n      return !!page;\n    });\n  }\n  isIncognito() {\n    return !!this.#id;\n  }\n  async overridePermissions(origin, permissions) {\n    const protocolPermissions = permissions.map(permission => {\n      const protocolPermission = WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n      if (!protocolPermission) {\n        throw new Error('Unknown permission: ' + permission);\n      }\n      return protocolPermission;\n    });\n    await this.#connection.send('Browser.grantPermissions', {\n      origin,\n      browserContextId: this.#id || undefined,\n      permissions: protocolPermissions\n    });\n  }\n  async clearPermissionOverrides() {\n    await this.#connection.send('Browser.resetPermissions', {\n      browserContextId: this.#id || undefined\n    });\n  }\n  newPage() {\n    return this.#browser._createPageInContext(this.#id);\n  }\n  browser() {\n    return this.#browser;\n  }\n  async close() {\n    assert(this.#id, 'Non-incognito profiles cannot be closed!');\n    await this.#browser._disposeContext(this.#id);\n  }\n}","map":{"version":3,"mappings":"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","names":["Browser","BrowserBase","WEB_PERMISSION_TO_PROTOCOL_PERMISSION","BrowserContext","CDPSessionEvent","assert","ChromeTargetManager","FirefoxTargetManager","DevToolsTarget","InitializationStatus","OtherTarget","PageTarget","WorkerTarget","CdpBrowser","_create","product","connection","contextIds","ignoreHTTPSErrors","defaultViewport","process","closeCallback","targetFilterCallback","isPageTargetCallback","waitForInitiallyDiscoveredTargets","browser","_attach","Map","constructor","CdpBrowserContext","contextId","set","emit","undefined","on","Disconnected","initialize","_detach","off","_targetManager","target","type","_getIsPageTargetCallback","createIncognitoBrowserContext","options","proxyServer","proxyBypassList","browserContextId","send","join","context","browserContexts","Array","from","values","defaultBrowserContext","_disposeContext","delete","targetInfo","session","has","get","Error","createSession","isAutoAttachEmulated","_createSession","otherTarget","url","startsWith","_isTargetExposed","_initializedDeferred","valueOrThrow","SUCCESS","browserContext","resolve","ABORTED","_isClosedDeferred","wsEndpoint","newPage","_createPageInContext","targetId","waitForTarget","t","_targetId","initialized","page","targets","getAvailableTargets","filter","value","browserTarget","find","version","userAgent","close","call","disconnect","dispose","connected","_closed","id","predicate","pages","Promise","all","map","isIncognito","overridePermissions","origin","permissions","protocolPermissions","permission","protocolPermission","clearPermissionOverrides"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\Browser.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {ChildProcess} from 'child_process';\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport {\n  Browser as BrowserBase,\n  BrowserEvent,\n  WEB_PERMISSION_TO_PROTOCOL_PERMISSION,\n  type BrowserCloseCallback,\n  type BrowserContextOptions,\n  type IsPageTargetCallback,\n  type Permission,\n  type TargetFilterCallback,\n  type WaitForTargetOptions,\n} from '../api/Browser.js';\nimport {BrowserContext, BrowserContextEvent} from '../api/BrowserContext.js';\nimport {CDPSessionEvent, type CDPSession} from '../api/CDPSession.js';\nimport type {Page} from '../api/Page.js';\nimport type {Target} from '../api/Target.js';\nimport type {Viewport} from '../common/Viewport.js';\nimport {assert} from '../util/assert.js';\n\nimport {ChromeTargetManager} from './ChromeTargetManager.js';\nimport type {Connection} from './Connection.js';\nimport {FirefoxTargetManager} from './FirefoxTargetManager.js';\nimport {\n  DevToolsTarget,\n  InitializationStatus,\n  OtherTarget,\n  PageTarget,\n  WorkerTarget,\n  type CdpTarget,\n} from './Target.js';\nimport {TargetManagerEvent, type TargetManager} from './TargetManager.js';\n\n/**\n * @internal\n */\nexport class CdpBrowser extends BrowserBase {\n  static async _create(\n    product: 'firefox' | 'chrome' | undefined,\n    connection: Connection,\n    contextIds: string[],\n    ignoreHTTPSErrors: boolean,\n    defaultViewport?: Viewport | null,\n    process?: ChildProcess,\n    closeCallback?: BrowserCloseCallback,\n    targetFilterCallback?: TargetFilterCallback,\n    isPageTargetCallback?: IsPageTargetCallback,\n    waitForInitiallyDiscoveredTargets = true\n  ): Promise<CdpBrowser> {\n    const browser = new CdpBrowser(\n      product,\n      connection,\n      contextIds,\n      ignoreHTTPSErrors,\n      defaultViewport,\n      process,\n      closeCallback,\n      targetFilterCallback,\n      isPageTargetCallback,\n      waitForInitiallyDiscoveredTargets\n    );\n    await browser._attach();\n    return browser;\n  }\n  #ignoreHTTPSErrors: boolean;\n  #defaultViewport?: Viewport | null;\n  #process?: ChildProcess;\n  #connection: Connection;\n  #closeCallback: BrowserCloseCallback;\n  #targetFilterCallback: TargetFilterCallback;\n  #isPageTargetCallback!: IsPageTargetCallback;\n  #defaultContext: CdpBrowserContext;\n  #contexts = new Map<string, CdpBrowserContext>();\n  #targetManager: TargetManager;\n\n  constructor(\n    product: 'chrome' | 'firefox' | undefined,\n    connection: Connection,\n    contextIds: string[],\n    ignoreHTTPSErrors: boolean,\n    defaultViewport?: Viewport | null,\n    process?: ChildProcess,\n    closeCallback?: BrowserCloseCallback,\n    targetFilterCallback?: TargetFilterCallback,\n    isPageTargetCallback?: IsPageTargetCallback,\n    waitForInitiallyDiscoveredTargets = true\n  ) {\n    super();\n    product = product || 'chrome';\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#defaultViewport = defaultViewport;\n    this.#process = process;\n    this.#connection = connection;\n    this.#closeCallback = closeCallback || function (): void {};\n    this.#targetFilterCallback =\n      targetFilterCallback ||\n      ((): boolean => {\n        return true;\n      });\n    this.#setIsPageTargetCallback(isPageTargetCallback);\n    if (product === 'firefox') {\n      this.#targetManager = new FirefoxTargetManager(\n        connection,\n        this.#createTarget,\n        this.#targetFilterCallback\n      );\n    } else {\n      this.#targetManager = new ChromeTargetManager(\n        connection,\n        this.#createTarget,\n        this.#targetFilterCallback,\n        waitForInitiallyDiscoveredTargets\n      );\n    }\n    this.#defaultContext = new CdpBrowserContext(this.#connection, this);\n    for (const contextId of contextIds) {\n      this.#contexts.set(\n        contextId,\n        new CdpBrowserContext(this.#connection, this, contextId)\n      );\n    }\n  }\n\n  #emitDisconnected = () => {\n    this.emit(BrowserEvent.Disconnected, undefined);\n  };\n\n  override async _attach(): Promise<void> {\n    this.#connection.on(CDPSessionEvent.Disconnected, this.#emitDisconnected);\n    this.#targetManager.on(\n      TargetManagerEvent.TargetAvailable,\n      this.#onAttachedToTarget\n    );\n    this.#targetManager.on(\n      TargetManagerEvent.TargetGone,\n      this.#onDetachedFromTarget\n    );\n    this.#targetManager.on(\n      TargetManagerEvent.TargetChanged,\n      this.#onTargetChanged\n    );\n    this.#targetManager.on(\n      TargetManagerEvent.TargetDiscovered,\n      this.#onTargetDiscovered\n    );\n    await this.#targetManager.initialize();\n  }\n\n  override _detach(): void {\n    this.#connection.off(CDPSessionEvent.Disconnected, this.#emitDisconnected);\n    this.#targetManager.off(\n      TargetManagerEvent.TargetAvailable,\n      this.#onAttachedToTarget\n    );\n    this.#targetManager.off(\n      TargetManagerEvent.TargetGone,\n      this.#onDetachedFromTarget\n    );\n    this.#targetManager.off(\n      TargetManagerEvent.TargetChanged,\n      this.#onTargetChanged\n    );\n    this.#targetManager.off(\n      TargetManagerEvent.TargetDiscovered,\n      this.#onTargetDiscovered\n    );\n  }\n\n  override process(): ChildProcess | null {\n    return this.#process ?? null;\n  }\n\n  _targetManager(): TargetManager {\n    return this.#targetManager;\n  }\n\n  #setIsPageTargetCallback(isPageTargetCallback?: IsPageTargetCallback): void {\n    this.#isPageTargetCallback =\n      isPageTargetCallback ||\n      ((target: Target): boolean => {\n        return (\n          target.type() === 'page' ||\n          target.type() === 'background_page' ||\n          target.type() === 'webview'\n        );\n      });\n  }\n\n  override _getIsPageTargetCallback(): IsPageTargetCallback | undefined {\n    return this.#isPageTargetCallback;\n  }\n\n  override async createIncognitoBrowserContext(\n    options: BrowserContextOptions = {}\n  ): Promise<CdpBrowserContext> {\n    const {proxyServer, proxyBypassList} = options;\n\n    const {browserContextId} = await this.#connection.send(\n      'Target.createBrowserContext',\n      {\n        proxyServer,\n        proxyBypassList: proxyBypassList && proxyBypassList.join(','),\n      }\n    );\n    const context = new CdpBrowserContext(\n      this.#connection,\n      this,\n      browserContextId\n    );\n    this.#contexts.set(browserContextId, context);\n    return context;\n  }\n\n  override browserContexts(): CdpBrowserContext[] {\n    return [this.#defaultContext, ...Array.from(this.#contexts.values())];\n  }\n\n  override defaultBrowserContext(): CdpBrowserContext {\n    return this.#defaultContext;\n  }\n\n  override async _disposeContext(contextId?: string): Promise<void> {\n    if (!contextId) {\n      return;\n    }\n    await this.#connection.send('Target.disposeBrowserContext', {\n      browserContextId: contextId,\n    });\n    this.#contexts.delete(contextId);\n  }\n\n  #createTarget = (\n    targetInfo: Protocol.Target.TargetInfo,\n    session?: CDPSession\n  ) => {\n    const {browserContextId} = targetInfo;\n    const context =\n      browserContextId && this.#contexts.has(browserContextId)\n        ? this.#contexts.get(browserContextId)\n        : this.#defaultContext;\n\n    if (!context) {\n      throw new Error('Missing browser context');\n    }\n\n    const createSession = (isAutoAttachEmulated: boolean) => {\n      return this.#connection._createSession(targetInfo, isAutoAttachEmulated);\n    };\n    const otherTarget = new OtherTarget(\n      targetInfo,\n      session,\n      context,\n      this.#targetManager,\n      createSession\n    );\n    if (targetInfo.url?.startsWith('devtools://')) {\n      return new DevToolsTarget(\n        targetInfo,\n        session,\n        context,\n        this.#targetManager,\n        createSession,\n        this.#ignoreHTTPSErrors,\n        this.#defaultViewport ?? null\n      );\n    }\n    if (this.#isPageTargetCallback(otherTarget)) {\n      return new PageTarget(\n        targetInfo,\n        session,\n        context,\n        this.#targetManager,\n        createSession,\n        this.#ignoreHTTPSErrors,\n        this.#defaultViewport ?? null\n      );\n    }\n    if (\n      targetInfo.type === 'service_worker' ||\n      targetInfo.type === 'shared_worker'\n    ) {\n      return new WorkerTarget(\n        targetInfo,\n        session,\n        context,\n        this.#targetManager,\n        createSession\n      );\n    }\n    return otherTarget;\n  };\n\n  #onAttachedToTarget = async (target: CdpTarget) => {\n    if (\n      target._isTargetExposed() &&\n      (await target._initializedDeferred.valueOrThrow()) ===\n        InitializationStatus.SUCCESS\n    ) {\n      this.emit(BrowserEvent.TargetCreated, target);\n      target.browserContext().emit(BrowserContextEvent.TargetCreated, target);\n    }\n  };\n\n  #onDetachedFromTarget = async (target: CdpTarget): Promise<void> => {\n    target._initializedDeferred.resolve(InitializationStatus.ABORTED);\n    target._isClosedDeferred.resolve();\n    if (\n      target._isTargetExposed() &&\n      (await target._initializedDeferred.valueOrThrow()) ===\n        InitializationStatus.SUCCESS\n    ) {\n      this.emit(BrowserEvent.TargetDestroyed, target);\n      target.browserContext().emit(BrowserContextEvent.TargetDestroyed, target);\n    }\n  };\n\n  #onTargetChanged = ({target}: {target: CdpTarget}): void => {\n    this.emit(BrowserEvent.TargetChanged, target);\n    target.browserContext().emit(BrowserContextEvent.TargetChanged, target);\n  };\n\n  #onTargetDiscovered = (targetInfo: Protocol.Target.TargetInfo): void => {\n    this.emit(BrowserEvent.TargetDiscovered, targetInfo);\n  };\n\n  override wsEndpoint(): string {\n    return this.#connection.url();\n  }\n\n  override async newPage(): Promise<Page> {\n    return await this.#defaultContext.newPage();\n  }\n\n  override async _createPageInContext(contextId?: string): Promise<Page> {\n    const {targetId} = await this.#connection.send('Target.createTarget', {\n      url: 'about:blank',\n      browserContextId: contextId || undefined,\n    });\n    const target = (await this.waitForTarget(t => {\n      return (t as CdpTarget)._targetId === targetId;\n    })) as CdpTarget;\n    if (!target) {\n      throw new Error(`Missing target for page (id = ${targetId})`);\n    }\n    const initialized =\n      (await target._initializedDeferred.valueOrThrow()) ===\n      InitializationStatus.SUCCESS;\n    if (!initialized) {\n      throw new Error(`Failed to create target for page (id = ${targetId})`);\n    }\n    const page = await target.page();\n    if (!page) {\n      throw new Error(\n        `Failed to create a page for context (id = ${contextId})`\n      );\n    }\n    return page;\n  }\n\n  override targets(): CdpTarget[] {\n    return Array.from(\n      this.#targetManager.getAvailableTargets().values()\n    ).filter(target => {\n      return (\n        target._isTargetExposed() &&\n        target._initializedDeferred.value() === InitializationStatus.SUCCESS\n      );\n    });\n  }\n\n  override target(): CdpTarget {\n    const browserTarget = this.targets().find(target => {\n      return target.type() === 'browser';\n    });\n    if (!browserTarget) {\n      throw new Error('Browser target is not found');\n    }\n    return browserTarget;\n  }\n\n  override async version(): Promise<string> {\n    const version = await this.#getVersion();\n    return version.product;\n  }\n\n  override async userAgent(): Promise<string> {\n    const version = await this.#getVersion();\n    return version.userAgent;\n  }\n\n  override async close(): Promise<void> {\n    await this.#closeCallback.call(null);\n    this.disconnect();\n  }\n\n  override disconnect(): void {\n    this.#targetManager.dispose();\n    this.#connection.dispose();\n    this._detach();\n  }\n\n  override get connected(): boolean {\n    return !this.#connection._closed;\n  }\n\n  #getVersion(): Promise<Protocol.Browser.GetVersionResponse> {\n    return this.#connection.send('Browser.getVersion');\n  }\n}\n\n/**\n * @internal\n */\nexport class CdpBrowserContext extends BrowserContext {\n  #connection: Connection;\n  #browser: CdpBrowser;\n  #id?: string;\n\n  constructor(connection: Connection, browser: CdpBrowser, contextId?: string) {\n    super();\n    this.#connection = connection;\n    this.#browser = browser;\n    this.#id = contextId;\n  }\n\n  override get id(): string | undefined {\n    return this.#id;\n  }\n\n  override targets(): CdpTarget[] {\n    return this.#browser.targets().filter(target => {\n      return target.browserContext() === this;\n    });\n  }\n\n  override waitForTarget(\n    predicate: (x: Target) => boolean | Promise<boolean>,\n    options: WaitForTargetOptions = {}\n  ): Promise<Target> {\n    return this.#browser.waitForTarget(target => {\n      return target.browserContext() === this && predicate(target);\n    }, options);\n  }\n\n  override async pages(): Promise<Page[]> {\n    const pages = await Promise.all(\n      this.targets()\n        .filter(target => {\n          return (\n            target.type() === 'page' ||\n            (target.type() === 'other' &&\n              this.#browser._getIsPageTargetCallback()?.(target))\n          );\n        })\n        .map(target => {\n          return target.page();\n        })\n    );\n    return pages.filter((page): page is Page => {\n      return !!page;\n    });\n  }\n\n  override isIncognito(): boolean {\n    return !!this.#id;\n  }\n\n  override async overridePermissions(\n    origin: string,\n    permissions: Permission[]\n  ): Promise<void> {\n    const protocolPermissions = permissions.map(permission => {\n      const protocolPermission =\n        WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n      if (!protocolPermission) {\n        throw new Error('Unknown permission: ' + permission);\n      }\n      return protocolPermission;\n    });\n    await this.#connection.send('Browser.grantPermissions', {\n      origin,\n      browserContextId: this.#id || undefined,\n      permissions: protocolPermissions,\n    });\n  }\n\n  override async clearPermissionOverrides(): Promise<void> {\n    await this.#connection.send('Browser.resetPermissions', {\n      browserContextId: this.#id || undefined,\n    });\n  }\n\n  override newPage(): Promise<Page> {\n    return this.#browser._createPageInContext(this.#id);\n  }\n\n  override browser(): CdpBrowser {\n    return this.#browser;\n  }\n\n  override async close(): Promise<void> {\n    assert(this.#id, 'Non-incognito profiles cannot be closed!');\n    await this.#browser._disposeContext(this.#id);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}