{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Deferred } from '../util/Deferred.js';\nimport { rewriteError } from '../util/ErrorLike.js';\nimport { ProtocolError, TargetCloseError } from './Errors.js';\nimport { debugError } from './util.js';\n/**\n * Manages callbacks and their IDs for the protocol request/response communication.\n *\n * @internal\n */\nexport class CallbackRegistry {\n  #callbacks = new Map();\n  #idGenerator = createIncrementalIdGenerator();\n  create(label, timeout, request) {\n    const callback = new Callback(this.#idGenerator(), label, timeout);\n    this.#callbacks.set(callback.id, callback);\n    try {\n      request(callback.id);\n    } catch (error) {\n      // We still throw sync errors synchronously and clean up the scheduled\n      // callback.\n      callback.promise.valueOrThrow().catch(debugError).finally(() => {\n        this.#callbacks.delete(callback.id);\n      });\n      callback.reject(error);\n      throw error;\n    }\n    // Must only have sync code up until here.\n    return callback.promise.valueOrThrow().finally(() => {\n      this.#callbacks.delete(callback.id);\n    });\n  }\n  reject(id, message, originalMessage) {\n    const callback = this.#callbacks.get(id);\n    if (!callback) {\n      return;\n    }\n    this._reject(callback, message, originalMessage);\n  }\n  _reject(callback, errorMessage, originalMessage) {\n    let error;\n    let message;\n    if (errorMessage instanceof ProtocolError) {\n      error = errorMessage;\n      error.cause = callback.error;\n      message = errorMessage.message;\n    } else {\n      error = callback.error;\n      message = errorMessage;\n    }\n    callback.reject(rewriteError(error, `Protocol error (${callback.label}): ${message}`, originalMessage));\n  }\n  resolve(id, value) {\n    const callback = this.#callbacks.get(id);\n    if (!callback) {\n      return;\n    }\n    callback.resolve(value);\n  }\n  clear() {\n    for (const callback of this.#callbacks.values()) {\n      // TODO: probably we can accept error messages as params.\n      this._reject(callback, new TargetCloseError('Target closed'));\n    }\n    this.#callbacks.clear();\n  }\n}\n/**\n * @internal\n */\nexport class Callback {\n  #id;\n  #error = new ProtocolError();\n  #deferred = Deferred.create();\n  #timer;\n  #label;\n  constructor(id, label, timeout) {\n    this.#id = id;\n    this.#label = label;\n    if (timeout) {\n      this.#timer = setTimeout(() => {\n        this.#deferred.reject(rewriteError(this.#error, `${label} timed out. Increase the 'protocolTimeout' setting in launch/connect calls for a higher timeout if needed.`));\n      }, timeout);\n    }\n  }\n  resolve(value) {\n    clearTimeout(this.#timer);\n    this.#deferred.resolve(value);\n  }\n  reject(error) {\n    clearTimeout(this.#timer);\n    this.#deferred.reject(error);\n  }\n  get id() {\n    return this.#id;\n  }\n  get promise() {\n    return this.#deferred;\n  }\n  get error() {\n    return this.#error;\n  }\n  get label() {\n    return this.#label;\n  }\n}\n/**\n * @internal\n */\nexport function createIncrementalIdGenerator() {\n  let id = 0;\n  return () => {\n    return ++id;\n  };\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAQA,QAAQ,QAAO,qBAAqB;AAC5C,SAAQC,YAAY,QAAO,sBAAsB;AAEjD,SAAQC,aAAa,EAAEC,gBAAgB,QAAO,aAAa;AAC3D,SAAQC,UAAU,QAAO,WAAW;AAEpC;;;;;AAKA,OAAM,MAAOC,gBAAgB;EAC3B,UAAU,GAAG,IAAIC,GAAG,EAAoB;EACxC,YAAY,GAAGC,4BAA4B,EAAE;EAE7CC,MAAM,CACJC,KAAa,EACbC,OAA2B,EAC3BC,OAA6B;IAE7B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,EAAEJ,KAAK,EAAEC,OAAO,CAAC;IAClE,IAAI,CAAC,UAAU,CAACI,GAAG,CAACF,QAAQ,CAACG,EAAE,EAAEH,QAAQ,CAAC;IAC1C,IAAI;MACFD,OAAO,CAACC,QAAQ,CAACG,EAAE,CAAC;KACrB,CAAC,OAAOC,KAAK,EAAE;MACd;MACA;MACAJ,QAAQ,CAACK,OAAO,CACbC,YAAY,EAAE,CACdC,KAAK,CAACf,UAAU,CAAC,CACjBgB,OAAO,CAAC,MAAK;QACZ,IAAI,CAAC,UAAU,CAACC,MAAM,CAACT,QAAQ,CAACG,EAAE,CAAC;MACrC,CAAC,CAAC;MACJH,QAAQ,CAACU,MAAM,CAACN,KAAc,CAAC;MAC/B,MAAMA,KAAK;;IAEb;IACA,OAAOJ,QAAQ,CAACK,OAAO,CAACC,YAAY,EAAE,CAACE,OAAO,CAAC,MAAK;MAClD,IAAI,CAAC,UAAU,CAACC,MAAM,CAACT,QAAQ,CAACG,EAAE,CAAC;IACrC,CAAC,CAAC;EACJ;EAEAO,MAAM,CAACP,EAAU,EAAEQ,OAAe,EAAEC,eAAwB;IAC1D,MAAMZ,QAAQ,GAAG,IAAI,CAAC,UAAU,CAACa,GAAG,CAACV,EAAE,CAAC;IACxC,IAAI,CAACH,QAAQ,EAAE;MACb;;IAEF,IAAI,CAACc,OAAO,CAACd,QAAQ,EAAEW,OAAO,EAAEC,eAAe,CAAC;EAClD;EAEAE,OAAO,CACLd,QAAkB,EAClBe,YAAoC,EACpCH,eAAwB;IAExB,IAAIR,KAAoB;IACxB,IAAIO,OAAe;IACnB,IAAII,YAAY,YAAYzB,aAAa,EAAE;MACzCc,KAAK,GAAGW,YAAY;MACpBX,KAAK,CAACY,KAAK,GAAGhB,QAAQ,CAACI,KAAK;MAC5BO,OAAO,GAAGI,YAAY,CAACJ,OAAO;KAC/B,MAAM;MACLP,KAAK,GAAGJ,QAAQ,CAACI,KAAK;MACtBO,OAAO,GAAGI,YAAY;;IAGxBf,QAAQ,CAACU,MAAM,CACbrB,YAAY,CACVe,KAAK,EACL,mBAAmBJ,QAAQ,CAACH,KAAK,MAAMc,OAAO,EAAE,EAChDC,eAAe,CAChB,CACF;EACH;EAEAK,OAAO,CAACd,EAAU,EAAEe,KAAc;IAChC,MAAMlB,QAAQ,GAAG,IAAI,CAAC,UAAU,CAACa,GAAG,CAACV,EAAE,CAAC;IACxC,IAAI,CAACH,QAAQ,EAAE;MACb;;IAEFA,QAAQ,CAACiB,OAAO,CAACC,KAAK,CAAC;EACzB;EAEAC,KAAK;IACH,KAAK,MAAMnB,QAAQ,IAAI,IAAI,CAAC,UAAU,CAACoB,MAAM,EAAE,EAAE;MAC/C;MACA,IAAI,CAACN,OAAO,CAACd,QAAQ,EAAE,IAAIT,gBAAgB,CAAC,eAAe,CAAC,CAAC;;IAE/D,IAAI,CAAC,UAAU,CAAC4B,KAAK,EAAE;EACzB;;AAEF;;;AAIA,OAAM,MAAOlB,QAAQ;EACnB,GAAG;EACH,MAAM,GAAG,IAAIX,aAAa,EAAE;EAC5B,SAAS,GAAGF,QAAQ,CAACQ,MAAM,EAAW;EACtC,MAAM;EACN,MAAM;EAENyB,YAAYlB,EAAU,EAAEN,KAAa,EAAEC,OAAgB;IACrD,IAAI,CAAC,GAAG,GAAGK,EAAE;IACb,IAAI,CAAC,MAAM,GAAGN,KAAK;IACnB,IAAIC,OAAO,EAAE;MACX,IAAI,CAAC,MAAM,GAAGwB,UAAU,CAAC,MAAK;QAC5B,IAAI,CAAC,SAAS,CAACZ,MAAM,CACnBrB,YAAY,CACV,IAAI,CAAC,MAAM,EACX,GAAGQ,KAAK,4GAA4G,CACrH,CACF;MACH,CAAC,EAAEC,OAAO,CAAC;;EAEf;EAEAmB,OAAO,CAACC,KAAc;IACpBK,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC;IACzB,IAAI,CAAC,SAAS,CAACN,OAAO,CAACC,KAAK,CAAC;EAC/B;EAEAR,MAAM,CAACN,KAAY;IACjBmB,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC;IACzB,IAAI,CAAC,SAAS,CAACb,MAAM,CAACN,KAAK,CAAC;EAC9B;EAEA,IAAID,EAAE;IACJ,OAAO,IAAI,CAAC,GAAG;EACjB;EAEA,IAAIE,OAAO;IACT,OAAO,IAAI,CAAC,SAAS;EACvB;EAEA,IAAID,KAAK;IACP,OAAO,IAAI,CAAC,MAAM;EACpB;EAEA,IAAIP,KAAK;IACP,OAAO,IAAI,CAAC,MAAM;EACpB;;AAGF;;;AAGA,OAAM,SAAUF,4BAA4B;EAC1C,IAAIQ,EAAE,GAAG,CAAC;EACV,OAAO,MAAa;IAClB,OAAO,EAAEA,EAAE;EACb,CAAC;AACH","names":["Deferred","rewriteError","ProtocolError","TargetCloseError","debugError","CallbackRegistry","Map","createIncrementalIdGenerator","create","label","timeout","request","callback","Callback","set","id","error","promise","valueOrThrow","catch","finally","delete","reject","message","originalMessage","get","_reject","errorMessage","cause","resolve","value","clear","values","constructor","setTimeout","clearTimeout"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\common\\CallbackRegistry.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from '../util/Deferred.js';\nimport {rewriteError} from '../util/ErrorLike.js';\n\nimport {ProtocolError, TargetCloseError} from './Errors.js';\nimport {debugError} from './util.js';\n\n/**\n * Manages callbacks and their IDs for the protocol request/response communication.\n *\n * @internal\n */\nexport class CallbackRegistry {\n  #callbacks = new Map<number, Callback>();\n  #idGenerator = createIncrementalIdGenerator();\n\n  create(\n    label: string,\n    timeout: number | undefined,\n    request: (id: number) => void\n  ): Promise<unknown> {\n    const callback = new Callback(this.#idGenerator(), label, timeout);\n    this.#callbacks.set(callback.id, callback);\n    try {\n      request(callback.id);\n    } catch (error) {\n      // We still throw sync errors synchronously and clean up the scheduled\n      // callback.\n      callback.promise\n        .valueOrThrow()\n        .catch(debugError)\n        .finally(() => {\n          this.#callbacks.delete(callback.id);\n        });\n      callback.reject(error as Error);\n      throw error;\n    }\n    // Must only have sync code up until here.\n    return callback.promise.valueOrThrow().finally(() => {\n      this.#callbacks.delete(callback.id);\n    });\n  }\n\n  reject(id: number, message: string, originalMessage?: string): void {\n    const callback = this.#callbacks.get(id);\n    if (!callback) {\n      return;\n    }\n    this._reject(callback, message, originalMessage);\n  }\n\n  _reject(\n    callback: Callback,\n    errorMessage: string | ProtocolError,\n    originalMessage?: string\n  ): void {\n    let error: ProtocolError;\n    let message: string;\n    if (errorMessage instanceof ProtocolError) {\n      error = errorMessage;\n      error.cause = callback.error;\n      message = errorMessage.message;\n    } else {\n      error = callback.error;\n      message = errorMessage;\n    }\n\n    callback.reject(\n      rewriteError(\n        error,\n        `Protocol error (${callback.label}): ${message}`,\n        originalMessage\n      )\n    );\n  }\n\n  resolve(id: number, value: unknown): void {\n    const callback = this.#callbacks.get(id);\n    if (!callback) {\n      return;\n    }\n    callback.resolve(value);\n  }\n\n  clear(): void {\n    for (const callback of this.#callbacks.values()) {\n      // TODO: probably we can accept error messages as params.\n      this._reject(callback, new TargetCloseError('Target closed'));\n    }\n    this.#callbacks.clear();\n  }\n}\n/**\n * @internal\n */\n\nexport class Callback {\n  #id: number;\n  #error = new ProtocolError();\n  #deferred = Deferred.create<unknown>();\n  #timer?: ReturnType<typeof setTimeout>;\n  #label: string;\n\n  constructor(id: number, label: string, timeout?: number) {\n    this.#id = id;\n    this.#label = label;\n    if (timeout) {\n      this.#timer = setTimeout(() => {\n        this.#deferred.reject(\n          rewriteError(\n            this.#error,\n            `${label} timed out. Increase the 'protocolTimeout' setting in launch/connect calls for a higher timeout if needed.`\n          )\n        );\n      }, timeout);\n    }\n  }\n\n  resolve(value: unknown): void {\n    clearTimeout(this.#timer);\n    this.#deferred.resolve(value);\n  }\n\n  reject(error: Error): void {\n    clearTimeout(this.#timer);\n    this.#deferred.reject(error);\n  }\n\n  get id(): number {\n    return this.#id;\n  }\n\n  get promise(): Deferred<unknown> {\n    return this.#deferred;\n  }\n\n  get error(): ProtocolError {\n    return this.#error;\n  }\n\n  get label(): string {\n    return this.#label;\n  }\n}\n\n/**\n * @internal\n */\nexport function createIncrementalIdGenerator(): GetIdFn {\n  let id = 0;\n  return (): number => {\n    return ++id;\n  };\n}\n\n/**\n * @internal\n */\nexport type GetIdFn = () => number;\n"]},"metadata":{},"sourceType":"module"}