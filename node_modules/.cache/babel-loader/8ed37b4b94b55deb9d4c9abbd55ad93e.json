{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { debugError } from '../common/util.js';\nimport { asyncDisposeSymbol, disposeSymbol } from '../util/disposable.js';\n/**\n * {@link BrowserContext} represents individual sessions within a\n * {@link Browser | browser}.\n *\n * When a {@link Browser | browser} is launched, it has a single\n * {@link BrowserContext | browser context} by default. Others can be created\n * using {@link Browser.createIncognitoBrowserContext}.\n *\n * {@link BrowserContext} {@link EventEmitter | emits} various events which are\n * documented in the {@link BrowserContextEvent} enum.\n *\n * If a {@link Page | page} opens another {@link Page | page}, e.g. using\n * `window.open`, the popup will belong to the parent {@link Page.browserContext\n * | page's browser context}.\n *\n * @example Creating an incognito {@link BrowserContext | browser context}:\n *\n * ```ts\n * // Create a new incognito browser context\n * const context = await browser.createIncognitoBrowserContext();\n * // Create a new page inside context.\n * const page = await context.newPage();\n * // ... do stuff with page ...\n * await page.goto('https://example.com');\n * // Dispose context once it's no longer needed.\n * await context.close();\n * ```\n *\n * @public\n */\nexport class BrowserContext extends EventEmitter {\n  /**\n   * @internal\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Gets all active {@link Target | targets} inside this\n   * {@link BrowserContext | browser context}.\n   */\n  targets() {\n    throw new Error('Not implemented');\n  }\n  overridePermissions() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Clears all permission overrides for this\n   * {@link BrowserContext | browser context}.\n   *\n   * @example Clearing overridden permissions in the\n   * {@link Browser.defaultBrowserContext | default browser context}:\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * context.overridePermissions('https://example.com', ['clipboard-read']);\n   * // do stuff ..\n   * context.clearPermissionOverrides();\n   * ```\n   */\n  clearPermissionOverrides() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Whether this {@link BrowserContext | browser context} is closed.\n   */\n  get closed() {\n    return !this.browser().browserContexts().includes(this);\n  }\n  /**\n   * Identifier for this {@link BrowserContext | browser context}.\n   */\n  get id() {\n    return undefined;\n  }\n  /** @internal */\n  [disposeSymbol]() {\n    return void this.close().catch(debugError);\n  }\n  /** @internal */\n  [asyncDisposeSymbol]() {\n    return this.close();\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAQA,YAAY,QAAuB,2BAA2B;AACtE,SAAQC,UAAU,QAAO,mBAAmB;AAC5C,SAAQC,kBAAkB,EAAEC,aAAa,QAAO,uBAAuB;AAgDvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAM,MAAgBC,cAAe,SAAQJ,YAAkC;EAC7E;;;EAGAK;IACE,KAAK,EAAE;EACT;EAEA;;;;EAIAC,OAAO;IACL,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EA2DAC,mBAAmB;IACjB,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;;;;;;;;;;;EAcAE,wBAAwB;IACtB,MAAM,IAAIF,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAwBA;;;EAGA,IAAIG,MAAM;IACR,OAAO,CAAC,IAAI,CAACC,OAAO,EAAE,CAACC,eAAe,EAAE,CAACC,QAAQ,CAAC,IAAI,CAAC;EACzD;EAEA;;;EAGA,IAAIC,EAAE;IACJ,OAAOC,SAAS;EAClB;EAEA;EACA,CAACZ,aAAa,IAAC;IACb,OAAO,KAAK,IAAI,CAACa,KAAK,EAAE,CAACC,KAAK,CAAChB,UAAU,CAAC;EAC5C;EAEA;EACA,CAACC,kBAAkB,IAAC;IAClB,OAAO,IAAI,CAACc,KAAK,EAAE;EACrB","names":["EventEmitter","debugError","asyncDisposeSymbol","disposeSymbol","BrowserContext","constructor","targets","Error","overridePermissions","clearPermissionOverrides","closed","browser","browserContexts","includes","id","undefined","close","catch"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\api\\BrowserContext.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EventEmitter, type EventType} from '../common/EventEmitter.js';\nimport {debugError} from '../common/util.js';\nimport {asyncDisposeSymbol, disposeSymbol} from '../util/disposable.js';\n\nimport type {Browser, Permission, WaitForTargetOptions} from './Browser.js';\nimport type {Page} from './Page.js';\nimport type {Target} from './Target.js';\n\n/**\n * @public\n */\nexport const enum BrowserContextEvent {\n  /**\n   * Emitted when the url of a target inside the browser context changes.\n   * Contains a {@link Target} instance.\n   */\n  TargetChanged = 'targetchanged',\n\n  /**\n   * Emitted when a target is created within the browser context, for example\n   * when a new page is opened by\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open | window.open}\n   * or by {@link BrowserContext.newPage | browserContext.newPage}\n   *\n   * Contains a {@link Target} instance.\n   */\n  TargetCreated = 'targetcreated',\n  /**\n   * Emitted when a target is destroyed within the browser context, for example\n   * when a page is closed. Contains a {@link Target} instance.\n   */\n  TargetDestroyed = 'targetdestroyed',\n}\n\nexport {\n  /**\n   * @deprecated Use {@link BrowserContextEvent}\n   */\n  BrowserContextEvent as BrowserContextEmittedEvents,\n};\n\n/**\n * @public\n */\nexport interface BrowserContextEvents extends Record<EventType, unknown> {\n  [BrowserContextEvent.TargetChanged]: Target;\n  [BrowserContextEvent.TargetCreated]: Target;\n  [BrowserContextEvent.TargetDestroyed]: Target;\n}\n\n/**\n * {@link BrowserContext} represents individual sessions within a\n * {@link Browser | browser}.\n *\n * When a {@link Browser | browser} is launched, it has a single\n * {@link BrowserContext | browser context} by default. Others can be created\n * using {@link Browser.createIncognitoBrowserContext}.\n *\n * {@link BrowserContext} {@link EventEmitter | emits} various events which are\n * documented in the {@link BrowserContextEvent} enum.\n *\n * If a {@link Page | page} opens another {@link Page | page}, e.g. using\n * `window.open`, the popup will belong to the parent {@link Page.browserContext\n * | page's browser context}.\n *\n * @example Creating an incognito {@link BrowserContext | browser context}:\n *\n * ```ts\n * // Create a new incognito browser context\n * const context = await browser.createIncognitoBrowserContext();\n * // Create a new page inside context.\n * const page = await context.newPage();\n * // ... do stuff with page ...\n * await page.goto('https://example.com');\n * // Dispose context once it's no longer needed.\n * await context.close();\n * ```\n *\n * @public\n */\n\nexport abstract class BrowserContext extends EventEmitter<BrowserContextEvents> {\n  /**\n   * @internal\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Gets all active {@link Target | targets} inside this\n   * {@link BrowserContext | browser context}.\n   */\n  targets(): Target[] {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Waits until a {@link Target | target} matching the given `predicate`\n   * appears and returns it.\n   *\n   * This will look all open {@link BrowserContext | browser contexts}.\n   *\n   * @example Finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browserContext.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   */\n  abstract waitForTarget(\n    predicate: (x: Target) => boolean | Promise<boolean>,\n    options?: WaitForTargetOptions\n  ): Promise<Target>;\n\n  /**\n   * Gets a list of all open {@link Page | pages} inside this\n   * {@link BrowserContext | browser context}.\n   *\n   * @remarks Non-visible {@link Page | pages}, such as `\"background_page\"`,\n   * will not be listed here. You can find them using {@link Target.page}.\n   */\n  abstract pages(): Promise<Page[]>;\n\n  /**\n   * Whether this {@link BrowserContext | browser context} is incognito.\n   *\n   * The {@link Browser.defaultBrowserContext | default browser context} is the\n   * only non-incognito browser context.\n   */\n  abstract isIncognito(): boolean;\n\n  /**\n   * Grants this {@link BrowserContext | browser context} the given\n   * `permissions` within the given `origin`.\n   *\n   * @example Overriding permissions in the\n   * {@link Browser.defaultBrowserContext | default browser context}:\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * await context.overridePermissions('https://html5demos.com', [\n   *   'geolocation',\n   * ]);\n   * ```\n   *\n   * @param origin - The origin to grant permissions to, e.g.\n   * \"https://example.com\".\n   * @param permissions - An array of permissions to grant. All permissions that\n   * are not listed here will be automatically denied.\n   */\n  overridePermissions(origin: string, permissions: Permission[]): Promise<void>;\n  overridePermissions(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Clears all permission overrides for this\n   * {@link BrowserContext | browser context}.\n   *\n   * @example Clearing overridden permissions in the\n   * {@link Browser.defaultBrowserContext | default browser context}:\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * context.overridePermissions('https://example.com', ['clipboard-read']);\n   * // do stuff ..\n   * context.clearPermissionOverrides();\n   * ```\n   */\n  clearPermissionOverrides(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Creates a new {@link Page | page} in this\n   * {@link BrowserContext | browser context}.\n   */\n  abstract newPage(): Promise<Page>;\n\n  /**\n   * Gets the {@link Browser | browser} associated with this\n   * {@link BrowserContext | browser context}.\n   */\n  abstract browser(): Browser;\n\n  /**\n   * Closes this {@link BrowserContext | browser context} and all associated\n   * {@link Page | pages}.\n   *\n   * @remarks The\n   * {@link Browser.defaultBrowserContext | default browser context} cannot be\n   * closed.\n   */\n  abstract close(): Promise<void>;\n\n  /**\n   * Whether this {@link BrowserContext | browser context} is closed.\n   */\n  get closed(): boolean {\n    return !this.browser().browserContexts().includes(this);\n  }\n\n  /**\n   * Identifier for this {@link BrowserContext | browser context}.\n   */\n  get id(): string | undefined {\n    return undefined;\n  }\n\n  /** @internal */\n  [disposeSymbol](): void {\n    return void this.close().catch(debugError);\n  }\n\n  /** @internal */\n  [asyncDisposeSymbol](): Promise<void> {\n    return this.close();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}