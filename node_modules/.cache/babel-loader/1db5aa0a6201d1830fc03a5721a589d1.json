{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuickJSWASMModule = exports.applyModuleEvalRuntimeOptions = exports.applyBaseRuntimeOptions = exports.QuickJSModuleCallbacks = void 0;\nconst debug_1 = require(\"./debug\");\nconst errors_1 = require(\"./errors\");\nconst lifetime_1 = require(\"./lifetime\");\nconst runtime_1 = require(\"./runtime\");\nconst types_1 = require(\"./types\");\nclass QuickJSEmscriptenModuleCallbacks {\n  constructor(args) {\n    this.callFunction = args.callFunction;\n    this.shouldInterrupt = args.shouldInterrupt;\n    this.loadModuleSource = args.loadModuleSource;\n    this.normalizeModule = args.normalizeModule;\n  }\n}\n/**\n * We use static functions per module to dispatch runtime or context calls from\n * C to the host.  This class manages the indirection from a specific runtime or\n * context pointer to the appropriate callback handler.\n *\n * @private\n */\nclass QuickJSModuleCallbacks {\n  constructor(module) {\n    this.contextCallbacks = new Map();\n    this.runtimeCallbacks = new Map();\n    this.suspendedCount = 0;\n    this.cToHostCallbacks = new QuickJSEmscriptenModuleCallbacks({\n      callFunction: (asyncify, ctx, this_ptr, argc, argv, fn_id) => this.handleAsyncify(asyncify, () => {\n        try {\n          const vm = this.contextCallbacks.get(ctx);\n          if (!vm) {\n            throw new Error(`QuickJSContext(ctx = ${ctx}) not found for C function call \"${fn_id}\"`);\n          }\n          return vm.callFunction(ctx, this_ptr, argc, argv, fn_id);\n        } catch (error) {\n          console.error(\"[C to host error: returning null]\", error);\n          return 0;\n        }\n      }),\n      shouldInterrupt: (asyncify, rt) => this.handleAsyncify(asyncify, () => {\n        try {\n          const vm = this.runtimeCallbacks.get(rt);\n          if (!vm) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C interrupt`);\n          }\n          return vm.shouldInterrupt(rt);\n        } catch (error) {\n          console.error(\"[C to host interrupt: returning error]\", error);\n          return 1;\n        }\n      }),\n      loadModuleSource: (asyncify, rt, ctx, moduleName) => this.handleAsyncify(asyncify, () => {\n        try {\n          const runtimeCallbacks = this.runtimeCallbacks.get(rt);\n          if (!runtimeCallbacks) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C module loader`);\n          }\n          const loadModule = runtimeCallbacks.loadModuleSource;\n          if (!loadModule) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) does not support module loading`);\n          }\n          return loadModule(rt, ctx, moduleName);\n        } catch (error) {\n          console.error(\"[C to host module loader error: returning null]\", error);\n          return 0;\n        }\n      }),\n      normalizeModule: (asyncify, rt, ctx, moduleBaseName, moduleName) => this.handleAsyncify(asyncify, () => {\n        try {\n          const runtimeCallbacks = this.runtimeCallbacks.get(rt);\n          if (!runtimeCallbacks) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C module loader`);\n          }\n          const normalizeModule = runtimeCallbacks.normalizeModule;\n          if (!normalizeModule) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) does not support module loading`);\n          }\n          return normalizeModule(rt, ctx, moduleBaseName, moduleName);\n        } catch (error) {\n          console.error(\"[C to host module loader error: returning null]\", error);\n          return 0;\n        }\n      })\n    });\n    this.module = module;\n    this.module.callbacks = this.cToHostCallbacks;\n  }\n  setRuntimeCallbacks(rt, callbacks) {\n    this.runtimeCallbacks.set(rt, callbacks);\n  }\n  deleteRuntime(rt) {\n    this.runtimeCallbacks.delete(rt);\n  }\n  setContextCallbacks(ctx, callbacks) {\n    this.contextCallbacks.set(ctx, callbacks);\n  }\n  deleteContext(ctx) {\n    this.contextCallbacks.delete(ctx);\n  }\n  handleAsyncify(asyncify, fn) {\n    if (asyncify) {\n      // We must always call asyncify.handleSync around our function.\n      // This allows asyncify to resume suspended execution on the second call.\n      // Asyncify internally can detect sync behavior, and avoid suspending.\n      return asyncify.handleSleep(done => {\n        try {\n          const result = fn();\n          if (!(result instanceof Promise)) {\n            (0, debug_1.debugLog)(\"asyncify.handleSleep: not suspending:\", result);\n            done(result);\n            return;\n          }\n          // Is promise, we intend to suspend.\n          if (this.suspended) {\n            throw new errors_1.QuickJSAsyncifyError(`Already suspended at: ${this.suspended.stack}\\nAttempted to suspend at:`);\n          } else {\n            this.suspended = new errors_1.QuickJSAsyncifySuspended(`(${this.suspendedCount++})`);\n            (0, debug_1.debugLog)(\"asyncify.handleSleep: suspending:\", this.suspended);\n          }\n          result.then(resolvedResult => {\n            this.suspended = undefined;\n            (0, debug_1.debugLog)(\"asyncify.handleSleep: resolved:\", resolvedResult);\n            done(resolvedResult);\n          }, error => {\n            (0, debug_1.debugLog)(\"asyncify.handleSleep: rejected:\", error);\n            console.error(\"QuickJS: cannot handle error in suspended function\", error);\n            this.suspended = undefined;\n          });\n        } catch (error) {\n          (0, debug_1.debugLog)(\"asyncify.handleSleep: error:\", error);\n          this.suspended = undefined;\n          throw error;\n        }\n      });\n    }\n    // No asyncify - we should never return a promise.\n    const value = fn();\n    if (value instanceof Promise) {\n      throw new Error(\"Promise return value not supported in non-asyncify context.\");\n    }\n    return value;\n  }\n}\nexports.QuickJSModuleCallbacks = QuickJSModuleCallbacks;\n/**\n * Process RuntimeOptions and apply them to a QuickJSRuntime.\n * @private\n */\nfunction applyBaseRuntimeOptions(runtime, options) {\n  if (options.interruptHandler) {\n    runtime.setInterruptHandler(options.interruptHandler);\n  }\n  if (options.maxStackSizeBytes !== undefined) {\n    runtime.setMaxStackSize(options.maxStackSizeBytes);\n  }\n  if (options.memoryLimitBytes !== undefined) {\n    runtime.setMemoryLimit(options.memoryLimitBytes);\n  }\n}\nexports.applyBaseRuntimeOptions = applyBaseRuntimeOptions;\n/**\n * Process ModuleEvalOptions and apply them to a QuickJSRuntime.\n * @private\n */\nfunction applyModuleEvalRuntimeOptions(runtime, options) {\n  if (options.moduleLoader) {\n    runtime.setModuleLoader(options.moduleLoader);\n  }\n  if (options.shouldInterrupt) {\n    runtime.setInterruptHandler(options.shouldInterrupt);\n  }\n  if (options.memoryLimitBytes !== undefined) {\n    runtime.setMemoryLimit(options.memoryLimitBytes);\n  }\n  if (options.maxStackSizeBytes !== undefined) {\n    runtime.setMaxStackSize(options.maxStackSizeBytes);\n  }\n}\nexports.applyModuleEvalRuntimeOptions = applyModuleEvalRuntimeOptions;\n/**\n * This class presents a Javascript interface to QuickJS, a Javascript interpreter\n * that supports EcmaScript 2020 (ES2020).\n *\n * It wraps a single WebAssembly module containing the QuickJS library and\n * associated helper C code. WebAssembly modules are completely isolated from\n * each other by the host's WebAssembly runtime. Separate WebAssembly modules\n * have the most isolation guarantees possible with this library.\n *\n * The simplest way to start running code is {@link evalCode}. This shortcut\n * method will evaluate Javascript safely and return the result as a native\n * Javascript value.\n *\n * For more control over the execution environment, or to interact with values\n * inside QuickJS, create a context with {@link newContext} or a runtime with\n * {@link newRuntime}.\n */\nclass QuickJSWASMModule {\n  /** @private */\n  constructor(module, ffi) {\n    this.module = module;\n    this.ffi = ffi;\n    this.callbacks = new QuickJSModuleCallbacks(module);\n  }\n  /**\n   * Create a runtime.\n   * Use the runtime to set limits on CPU and memory usage and configure module\n   * loading for one or more [[QuickJSContext]]s inside the runtime.\n   */\n  newRuntime() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const rt = new lifetime_1.Lifetime(this.ffi.QTS_NewRuntime(), undefined, rt_ptr => {\n      this.callbacks.deleteRuntime(rt_ptr);\n      this.ffi.QTS_FreeRuntime(rt_ptr);\n    });\n    const runtime = new runtime_1.QuickJSRuntime({\n      module: this.module,\n      callbacks: this.callbacks,\n      ffi: this.ffi,\n      rt\n    });\n    applyBaseRuntimeOptions(runtime, options);\n    if (options.moduleLoader) {\n      runtime.setModuleLoader(options.moduleLoader);\n    }\n    return runtime;\n  }\n  /**\n   * A simplified API to create a new [[QuickJSRuntime]] and a\n   * [[QuickJSContext]] inside that runtime at the same time. The runtime will\n   * be disposed when the context is disposed.\n   */\n  newContext() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const runtime = this.newRuntime();\n    const context = runtime.newContext({\n      ...options,\n      ownedLifetimes: (0, types_1.concat)(runtime, options.ownedLifetimes)\n    });\n    runtime.context = context;\n    return context;\n  }\n  /**\n   * One-off evaluate code without needing to create a [[QuickJSRuntime]] or\n   * [[QuickJSContext]] explicitly.\n   *\n   * To protect against infinite loops, use the `shouldInterrupt` option. The\n   * [[shouldInterruptAfterDeadline]] function will create a time-based deadline.\n   *\n   * If you need more control over how the code executes, create a\n   * [[QuickJSRuntime]] (with [[newRuntime]]) or a [[QuickJSContext]] (with\n   * [[newContext]] or [[QuickJSRuntime.newContext]]), and use its\n   * [[QuickJSContext.evalCode]] method.\n   *\n   * Asynchronous callbacks may not run during the first call to `evalCode`. If\n   * you need to work with async code inside QuickJS, create a runtime and use\n   * [[QuickJSRuntime.executePendingJobs]].\n   *\n   * @returns The result is coerced to a native Javascript value using JSON\n   * serialization, so properties and values unsupported by JSON will be dropped.\n   *\n   * @throws If `code` throws during evaluation, the exception will be\n   * converted into a native Javascript value and thrown.\n   *\n   * @throws if `options.shouldInterrupt` interrupted execution, will throw a Error\n   * with name `\"InternalError\"` and  message `\"interrupted\"`.\n   */\n  evalCode(code) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return lifetime_1.Scope.withScope(scope => {\n      const vm = scope.manage(this.newContext());\n      applyModuleEvalRuntimeOptions(vm.runtime, options);\n      const result = vm.evalCode(code, \"eval.js\");\n      if (options.memoryLimitBytes !== undefined) {\n        // Remove memory limit so we can dump the result without exceeding it.\n        vm.runtime.setMemoryLimit(-1);\n      }\n      if (result.error) {\n        const error = vm.dump(scope.manage(result.error));\n        throw error;\n      }\n      const value = vm.dump(scope.manage(result.value));\n      return value;\n    });\n  }\n  /**\n   * Get a low-level interface to the QuickJS functions in this WebAssembly\n   * module.\n   * @experimental\n   * @unstable No warranty is provided with this API. It could change at any time.\n   * @private\n   */\n  getFFI() {\n    return this.ffi;\n  }\n}\nexports.QuickJSWASMModule = QuickJSWASMModule;","map":{"version":3,"mappings":"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","names":["QuickJSEmscriptenModuleCallbacks","constructor","args","callFunction","shouldInterrupt","loadModuleSource","normalizeModule","QuickJSModuleCallbacks","module","Map","asyncify","ctx","this_ptr","argc","argv","fn_id","handleAsyncify","vm","contextCallbacks","get","Error","error","console","rt","runtimeCallbacks","moduleName","loadModule","moduleBaseName","callbacks","cToHostCallbacks","setRuntimeCallbacks","set","deleteRuntime","delete","setContextCallbacks","deleteContext","fn","handleSleep","done","result","Promise","suspended","errors_1","stack","suspendedCount","then","resolvedResult","undefined","value","exports","applyBaseRuntimeOptions","runtime","options","interruptHandler","setInterruptHandler","maxStackSizeBytes","setMaxStackSize","memoryLimitBytes","setMemoryLimit","applyModuleEvalRuntimeOptions","moduleLoader","setModuleLoader","QuickJSWASMModule","ffi","newRuntime","lifetime_1","QTS_NewRuntime","rt_ptr","QTS_FreeRuntime","runtime_1","newContext","context","ownedLifetimes","evalCode","code","withScope","scope","manage","dump","getFFI"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\@tootallnate\\quickjs-emscripten\\ts\\module.ts"],"sourcesContent":["import { QuickJSContext } from \"./context\"\nimport { debugLog } from \"./debug\"\nimport {\n  Asyncify,\n  AsyncifySleepResult,\n  EitherModule,\n  EmscriptenModuleCallbacks,\n} from \"./emscripten-types\"\nimport { QuickJSAsyncifyError, QuickJSAsyncifySuspended } from \"./errors\"\nimport {\n  BorrowedHeapCharPointer,\n  JSContextPointer,\n  JSRuntimePointer,\n  JSValuePointer,\n} from \"./types-ffi\"\nimport { Lifetime, Scope } from \"./lifetime\"\nimport { InterruptHandler, QuickJSRuntime } from \"./runtime\"\nimport {\n  AsyncRuntimeOptions,\n  concat,\n  ContextOptions,\n  EitherFFI,\n  JSModuleLoader,\n  RuntimeOptions,\n  RuntimeOptionsBase,\n} from \"./types\"\n\ntype EmscriptenCallback<BaseArgs extends any[], Result> = (\n  ...args: [Asyncify | undefined, ...BaseArgs]\n) => Result | AsyncifySleepResult<Result>\ntype MaybeAsyncEmscriptenCallback<T extends EmscriptenCallback<any, any>> =\n  T extends EmscriptenCallback<infer Args, infer Result>\n    ? (...args: Args) => Result | Promise<Result>\n    : never\ntype MaybeAsyncEmscriptenCallbacks = {\n  [K in keyof EmscriptenModuleCallbacks]: MaybeAsyncEmscriptenCallback<EmscriptenModuleCallbacks[K]>\n}\n\n/**\n * @private\n */\nexport interface ContextCallbacks {\n  callFunction: MaybeAsyncEmscriptenCallbacks[\"callFunction\"]\n}\n\n/**\n * @private\n */\nexport interface RuntimeCallbacks {\n  shouldInterrupt: MaybeAsyncEmscriptenCallbacks[\"shouldInterrupt\"]\n  loadModuleSource: MaybeAsyncEmscriptenCallbacks[\"loadModuleSource\"]\n  normalizeModule: MaybeAsyncEmscriptenCallbacks[\"normalizeModule\"]\n}\n\nclass QuickJSEmscriptenModuleCallbacks implements EmscriptenModuleCallbacks {\n  public callFunction: EmscriptenModuleCallbacks[\"callFunction\"]\n  public shouldInterrupt: EmscriptenModuleCallbacks[\"shouldInterrupt\"]\n  public loadModuleSource: EmscriptenModuleCallbacks[\"loadModuleSource\"]\n  public normalizeModule: EmscriptenModuleCallbacks[\"normalizeModule\"]\n  constructor(args: EmscriptenModuleCallbacks) {\n    this.callFunction = args.callFunction\n    this.shouldInterrupt = args.shouldInterrupt\n    this.loadModuleSource = args.loadModuleSource\n    this.normalizeModule = args.normalizeModule\n  }\n}\n\n/**\n * Options for [[QuickJSWASMModule.evalCode]].\n */\nexport interface ModuleEvalOptions {\n  /**\n   * Interrupt evaluation if `shouldInterrupt` returns `true`.\n   * See [[shouldInterruptAfterDeadline]].\n   */\n  shouldInterrupt?: InterruptHandler\n\n  /**\n   * Memory limit, in bytes, of WebAssembly heap memory used by the QuickJS VM.\n   */\n  memoryLimitBytes?: number\n\n  /**\n   * Stack size limit for this vm, in bytes\n   * To remove the limit, set to `0`.\n   */\n  maxStackSizeBytes?: number\n\n  /**\n   * Module loader for any `import` statements or expressions.\n   */\n  moduleLoader?: JSModuleLoader\n}\n\n/**\n * We use static functions per module to dispatch runtime or context calls from\n * C to the host.  This class manages the indirection from a specific runtime or\n * context pointer to the appropriate callback handler.\n *\n * @private\n */\nexport class QuickJSModuleCallbacks {\n  private module: EitherModule\n  private contextCallbacks = new Map<JSContextPointer, ContextCallbacks>()\n  private runtimeCallbacks = new Map<JSRuntimePointer, RuntimeCallbacks>()\n\n  constructor(module: EitherModule) {\n    this.module = module\n    this.module.callbacks = this.cToHostCallbacks\n  }\n\n  setRuntimeCallbacks(rt: JSRuntimePointer, callbacks: RuntimeCallbacks) {\n    this.runtimeCallbacks.set(rt, callbacks)\n  }\n\n  deleteRuntime(rt: JSRuntimePointer) {\n    this.runtimeCallbacks.delete(rt)\n  }\n\n  setContextCallbacks(ctx: JSContextPointer, callbacks: ContextCallbacks) {\n    this.contextCallbacks.set(ctx, callbacks)\n  }\n\n  deleteContext(ctx: JSContextPointer) {\n    this.contextCallbacks.delete(ctx)\n  }\n\n  private suspendedCount = 0\n  private suspended: QuickJSAsyncifySuspended | undefined\n\n  private handleAsyncify<T>(\n    asyncify: Asyncify | undefined,\n    fn: () => T | Promise<T>\n  ): T | AsyncifySleepResult<T> {\n    if (asyncify) {\n      // We must always call asyncify.handleSync around our function.\n      // This allows asyncify to resume suspended execution on the second call.\n      // Asyncify internally can detect sync behavior, and avoid suspending.\n      return asyncify.handleSleep((done) => {\n        try {\n          const result = fn()\n          if (!(result instanceof Promise)) {\n            debugLog(\"asyncify.handleSleep: not suspending:\", result)\n            done(result)\n            return\n          }\n\n          // Is promise, we intend to suspend.\n          if (this.suspended) {\n            throw new QuickJSAsyncifyError(\n              `Already suspended at: ${this.suspended.stack}\\nAttempted to suspend at:`\n            )\n          } else {\n            this.suspended = new QuickJSAsyncifySuspended(`(${this.suspendedCount++})`)\n            debugLog(\"asyncify.handleSleep: suspending:\", this.suspended)\n          }\n\n          result.then(\n            (resolvedResult) => {\n              this.suspended = undefined\n              debugLog(\"asyncify.handleSleep: resolved:\", resolvedResult)\n              done(resolvedResult)\n            },\n            (error) => {\n              debugLog(\"asyncify.handleSleep: rejected:\", error)\n              console.error(\"QuickJS: cannot handle error in suspended function\", error)\n              this.suspended = undefined\n            }\n          )\n        } catch (error) {\n          debugLog(\"asyncify.handleSleep: error:\", error)\n          this.suspended = undefined\n          throw error\n        }\n      })\n    }\n\n    // No asyncify - we should never return a promise.\n    const value = fn()\n    if (value instanceof Promise) {\n      throw new Error(\"Promise return value not supported in non-asyncify context.\")\n    }\n    return value\n  }\n\n  private cToHostCallbacks = new QuickJSEmscriptenModuleCallbacks({\n    callFunction: (asyncify, ctx, this_ptr, argc, argv, fn_id) =>\n      this.handleAsyncify(asyncify, () => {\n        try {\n          const vm = this.contextCallbacks.get(ctx)\n          if (!vm) {\n            throw new Error(`QuickJSContext(ctx = ${ctx}) not found for C function call \"${fn_id}\"`)\n          }\n          return vm.callFunction(ctx, this_ptr, argc, argv, fn_id)\n        } catch (error) {\n          console.error(\"[C to host error: returning null]\", error)\n          return 0 as JSValuePointer\n        }\n      }),\n\n    shouldInterrupt: (asyncify, rt) =>\n      this.handleAsyncify(asyncify, () => {\n        try {\n          const vm = this.runtimeCallbacks.get(rt)\n          if (!vm) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C interrupt`)\n          }\n          return vm.shouldInterrupt(rt)\n        } catch (error) {\n          console.error(\"[C to host interrupt: returning error]\", error)\n          return 1\n        }\n      }),\n\n    loadModuleSource: (asyncify, rt, ctx, moduleName) =>\n      this.handleAsyncify(asyncify, () => {\n        try {\n          const runtimeCallbacks = this.runtimeCallbacks.get(rt)\n          if (!runtimeCallbacks) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C module loader`)\n          }\n\n          const loadModule = runtimeCallbacks.loadModuleSource\n          if (!loadModule) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) does not support module loading`)\n          }\n          return loadModule(rt, ctx, moduleName)\n        } catch (error) {\n          console.error(\"[C to host module loader error: returning null]\", error)\n          return 0 as BorrowedHeapCharPointer\n        }\n      }),\n\n    normalizeModule: (asyncify, rt, ctx, moduleBaseName, moduleName) =>\n      this.handleAsyncify(asyncify, () => {\n        try {\n          const runtimeCallbacks = this.runtimeCallbacks.get(rt)\n          if (!runtimeCallbacks) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C module loader`)\n          }\n\n          const normalizeModule = runtimeCallbacks.normalizeModule\n          if (!normalizeModule) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) does not support module loading`)\n          }\n          return normalizeModule(rt, ctx, moduleBaseName, moduleName)\n        } catch (error) {\n          console.error(\"[C to host module loader error: returning null]\", error)\n          return 0 as BorrowedHeapCharPointer\n        }\n      }),\n  })\n}\n\n/**\n * Process RuntimeOptions and apply them to a QuickJSRuntime.\n * @private\n */\nexport function applyBaseRuntimeOptions(\n  runtime: QuickJSRuntime,\n  options: RuntimeOptionsBase\n): void {\n  if (options.interruptHandler) {\n    runtime.setInterruptHandler(options.interruptHandler)\n  }\n\n  if (options.maxStackSizeBytes !== undefined) {\n    runtime.setMaxStackSize(options.maxStackSizeBytes)\n  }\n\n  if (options.memoryLimitBytes !== undefined) {\n    runtime.setMemoryLimit(options.memoryLimitBytes)\n  }\n}\n\n/**\n * Process ModuleEvalOptions and apply them to a QuickJSRuntime.\n * @private\n */\nexport function applyModuleEvalRuntimeOptions<T extends QuickJSRuntime>(\n  runtime: T,\n  options: ModuleEvalOptions\n) {\n  if (options.moduleLoader) {\n    runtime.setModuleLoader(options.moduleLoader)\n  }\n\n  if (options.shouldInterrupt) {\n    runtime.setInterruptHandler(options.shouldInterrupt)\n  }\n\n  if (options.memoryLimitBytes !== undefined) {\n    runtime.setMemoryLimit(options.memoryLimitBytes)\n  }\n\n  if (options.maxStackSizeBytes !== undefined) {\n    runtime.setMaxStackSize(options.maxStackSizeBytes)\n  }\n}\n\n/**\n * This class presents a Javascript interface to QuickJS, a Javascript interpreter\n * that supports EcmaScript 2020 (ES2020).\n *\n * It wraps a single WebAssembly module containing the QuickJS library and\n * associated helper C code. WebAssembly modules are completely isolated from\n * each other by the host's WebAssembly runtime. Separate WebAssembly modules\n * have the most isolation guarantees possible with this library.\n *\n * The simplest way to start running code is {@link evalCode}. This shortcut\n * method will evaluate Javascript safely and return the result as a native\n * Javascript value.\n *\n * For more control over the execution environment, or to interact with values\n * inside QuickJS, create a context with {@link newContext} or a runtime with\n * {@link newRuntime}.\n */\nexport class QuickJSWASMModule {\n  /** @private */\n  protected ffi: EitherFFI\n  /** @private */\n  protected callbacks: QuickJSModuleCallbacks\n  /** @private */\n  protected module: EitherModule\n\n  /** @private */\n  constructor(module: EitherModule, ffi: EitherFFI) {\n    this.module = module\n    this.ffi = ffi\n    this.callbacks = new QuickJSModuleCallbacks(module)\n  }\n\n  /**\n   * Create a runtime.\n   * Use the runtime to set limits on CPU and memory usage and configure module\n   * loading for one or more [[QuickJSContext]]s inside the runtime.\n   */\n  newRuntime(options: RuntimeOptions = {}): QuickJSRuntime {\n    const rt = new Lifetime(this.ffi.QTS_NewRuntime(), undefined, (rt_ptr) => {\n      this.callbacks.deleteRuntime(rt_ptr)\n      this.ffi.QTS_FreeRuntime(rt_ptr)\n    })\n\n    const runtime = new QuickJSRuntime({\n      module: this.module,\n      callbacks: this.callbacks,\n      ffi: this.ffi,\n      rt,\n    })\n\n    applyBaseRuntimeOptions(runtime, options)\n\n    if (options.moduleLoader) {\n      runtime.setModuleLoader(options.moduleLoader)\n    }\n\n    return runtime\n  }\n\n  /**\n   * A simplified API to create a new [[QuickJSRuntime]] and a\n   * [[QuickJSContext]] inside that runtime at the same time. The runtime will\n   * be disposed when the context is disposed.\n   */\n  newContext(options: ContextOptions = {}): QuickJSContext {\n    const runtime = this.newRuntime()\n    const context = runtime.newContext({\n      ...options,\n      ownedLifetimes: concat(runtime, options.ownedLifetimes),\n    })\n    runtime.context = context\n    return context\n  }\n\n  /**\n   * One-off evaluate code without needing to create a [[QuickJSRuntime]] or\n   * [[QuickJSContext]] explicitly.\n   *\n   * To protect against infinite loops, use the `shouldInterrupt` option. The\n   * [[shouldInterruptAfterDeadline]] function will create a time-based deadline.\n   *\n   * If you need more control over how the code executes, create a\n   * [[QuickJSRuntime]] (with [[newRuntime]]) or a [[QuickJSContext]] (with\n   * [[newContext]] or [[QuickJSRuntime.newContext]]), and use its\n   * [[QuickJSContext.evalCode]] method.\n   *\n   * Asynchronous callbacks may not run during the first call to `evalCode`. If\n   * you need to work with async code inside QuickJS, create a runtime and use\n   * [[QuickJSRuntime.executePendingJobs]].\n   *\n   * @returns The result is coerced to a native Javascript value using JSON\n   * serialization, so properties and values unsupported by JSON will be dropped.\n   *\n   * @throws If `code` throws during evaluation, the exception will be\n   * converted into a native Javascript value and thrown.\n   *\n   * @throws if `options.shouldInterrupt` interrupted execution, will throw a Error\n   * with name `\"InternalError\"` and  message `\"interrupted\"`.\n   */\n  evalCode(code: string, options: ModuleEvalOptions = {}): unknown {\n    return Scope.withScope((scope) => {\n      const vm = scope.manage(this.newContext())\n\n      applyModuleEvalRuntimeOptions(vm.runtime, options)\n      const result = vm.evalCode(code, \"eval.js\")\n\n      if (options.memoryLimitBytes !== undefined) {\n        // Remove memory limit so we can dump the result without exceeding it.\n        vm.runtime.setMemoryLimit(-1)\n      }\n\n      if (result.error) {\n        const error = vm.dump(scope.manage(result.error))\n        throw error\n      }\n\n      const value = vm.dump(scope.manage(result.value))\n      return value\n    })\n  }\n\n  /**\n   * Get a low-level interface to the QuickJS functions in this WebAssembly\n   * module.\n   * @experimental\n   * @unstable No warranty is provided with this API. It could change at any time.\n   * @private\n   */\n  getFFI(): EitherFFI {\n    return this.ffi\n  }\n}\n"]},"metadata":{},"sourceType":"script"}