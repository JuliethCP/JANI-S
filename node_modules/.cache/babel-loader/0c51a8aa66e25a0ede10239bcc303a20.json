{"ast":null,"code":"/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Deferred } from '../util/Deferred.js';\n/**\n * Keeps track of the page frame tree and it's is managed by\n * {@link FrameManager}. FrameTree uses frame IDs to reference frame and it\n * means that referenced frames might not be in the tree anymore. Thus, the tree\n * structure is eventually consistent.\n * @internal\n */\nexport class FrameTree {\n  #frames = new Map();\n  // frameID -> parentFrameID\n  #parentIds = new Map();\n  // frameID -> childFrameIDs\n  #childIds = new Map();\n  #mainFrame;\n  #waitRequests = new Map();\n  getMainFrame() {\n    return this.#mainFrame;\n  }\n  getById(frameId) {\n    return this.#frames.get(frameId);\n  }\n  /**\n   * Returns a promise that is resolved once the frame with\n   * the given ID is added to the tree.\n   */\n  waitForFrame(frameId) {\n    const frame = this.getById(frameId);\n    if (frame) {\n      return Promise.resolve(frame);\n    }\n    const deferred = Deferred.create();\n    const callbacks = this.#waitRequests.get(frameId) || new Set();\n    callbacks.add(deferred);\n    return deferred.valueOrThrow();\n  }\n  frames() {\n    return Array.from(this.#frames.values());\n  }\n  addFrame(frame) {\n    this.#frames.set(frame._id, frame);\n    if (frame._parentId) {\n      this.#parentIds.set(frame._id, frame._parentId);\n      if (!this.#childIds.has(frame._parentId)) {\n        this.#childIds.set(frame._parentId, new Set());\n      }\n      this.#childIds.get(frame._parentId).add(frame._id);\n    } else if (!this.#mainFrame) {\n      this.#mainFrame = frame;\n    }\n    this.#waitRequests.get(frame._id)?.forEach(request => {\n      return request.resolve(frame);\n    });\n  }\n  removeFrame(frame) {\n    this.#frames.delete(frame._id);\n    this.#parentIds.delete(frame._id);\n    if (frame._parentId) {\n      this.#childIds.get(frame._parentId)?.delete(frame._id);\n    } else {\n      this.#mainFrame = undefined;\n    }\n  }\n  childFrames(frameId) {\n    const childIds = this.#childIds.get(frameId);\n    if (!childIds) {\n      return [];\n    }\n    return Array.from(childIds).map(id => {\n      return this.getById(id);\n    }).filter(frame => {\n      return frame !== undefined;\n    });\n  }\n  parentFrame(frameId) {\n    const parentId = this.#parentIds.get(frameId);\n    return parentId ? this.getById(parentId) : undefined;\n  }\n}","map":{"version":3,"mappings":"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","names":["Deferred","FrameTree","Map","getMainFrame","getById","frameId","get","waitForFrame","frame","Promise","resolve","deferred","create","callbacks","Set","add","valueOrThrow","frames","Array","from","values","addFrame","set","_id","_parentId","has","forEach","request","removeFrame","delete","undefined","childFrames","childIds","map","id","filter","parentFrame","parentId"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\FrameTree.ts"],"sourcesContent":["/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Frame} from '../api/Frame.js';\nimport {Deferred} from '../util/Deferred.js';\n\n/**\n * Keeps track of the page frame tree and it's is managed by\n * {@link FrameManager}. FrameTree uses frame IDs to reference frame and it\n * means that referenced frames might not be in the tree anymore. Thus, the tree\n * structure is eventually consistent.\n * @internal\n */\nexport class FrameTree<FrameType extends Frame> {\n  #frames = new Map<string, FrameType>();\n  // frameID -> parentFrameID\n  #parentIds = new Map<string, string>();\n  // frameID -> childFrameIDs\n  #childIds = new Map<string, Set<string>>();\n  #mainFrame?: FrameType;\n  #waitRequests = new Map<string, Set<Deferred<FrameType>>>();\n\n  getMainFrame(): FrameType | undefined {\n    return this.#mainFrame;\n  }\n\n  getById(frameId: string): FrameType | undefined {\n    return this.#frames.get(frameId);\n  }\n\n  /**\n   * Returns a promise that is resolved once the frame with\n   * the given ID is added to the tree.\n   */\n  waitForFrame(frameId: string): Promise<FrameType> {\n    const frame = this.getById(frameId);\n    if (frame) {\n      return Promise.resolve(frame);\n    }\n    const deferred = Deferred.create<FrameType>();\n    const callbacks =\n      this.#waitRequests.get(frameId) || new Set<Deferred<FrameType>>();\n    callbacks.add(deferred);\n    return deferred.valueOrThrow();\n  }\n\n  frames(): FrameType[] {\n    return Array.from(this.#frames.values());\n  }\n\n  addFrame(frame: FrameType): void {\n    this.#frames.set(frame._id, frame);\n    if (frame._parentId) {\n      this.#parentIds.set(frame._id, frame._parentId);\n      if (!this.#childIds.has(frame._parentId)) {\n        this.#childIds.set(frame._parentId, new Set());\n      }\n      this.#childIds.get(frame._parentId)!.add(frame._id);\n    } else if (!this.#mainFrame) {\n      this.#mainFrame = frame;\n    }\n    this.#waitRequests.get(frame._id)?.forEach(request => {\n      return request.resolve(frame);\n    });\n  }\n\n  removeFrame(frame: FrameType): void {\n    this.#frames.delete(frame._id);\n    this.#parentIds.delete(frame._id);\n    if (frame._parentId) {\n      this.#childIds.get(frame._parentId)?.delete(frame._id);\n    } else {\n      this.#mainFrame = undefined;\n    }\n  }\n\n  childFrames(frameId: string): FrameType[] {\n    const childIds = this.#childIds.get(frameId);\n    if (!childIds) {\n      return [];\n    }\n    return Array.from(childIds)\n      .map(id => {\n        return this.getById(id);\n      })\n      .filter((frame): frame is FrameType => {\n        return frame !== undefined;\n      });\n  }\n\n  parentFrame(frameId: string): FrameType | undefined {\n    const parentId = this.#parentIds.get(frameId);\n    return parentId ? this.getById(parentId) : undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}