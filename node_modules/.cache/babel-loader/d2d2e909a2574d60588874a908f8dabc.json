{"ast":null,"code":"\"use strict\";\n\n;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar babel_core_1 = tslib_1.__importDefault(require(\"./babel-core\"));\nvar type_annotations_1 = tslib_1.__importDefault(require(\"./type-annotations\"));\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\nfunction default_1(fork) {\n  // Since TypeScript is parsed by Babylon, include the core Babylon types\n  // but omit the Flow-related types.\n  fork.use(babel_core_1.default);\n  fork.use(type_annotations_1.default);\n  var types = fork.use(types_1.default);\n  var n = types.namedTypes;\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var defaults = fork.use(shared_1.default).defaults;\n  var StringLiteral = types.Type.from(function (value, deep) {\n    if (n.StringLiteral && n.StringLiteral.check(value, deep)) {\n      return true;\n    }\n    if (n.Literal && n.Literal.check(value, deep) && typeof value.value === \"string\") {\n      return true;\n    }\n    return false;\n  }, \"StringLiteral\");\n  def(\"TSType\").bases(\"Node\");\n  var TSEntityName = or(def(\"Identifier\"), def(\"TSQualifiedName\"));\n  def(\"TSTypeReference\").bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\").build(\"typeName\", \"typeParameters\").field(\"typeName\", TSEntityName);\n  // An abstract (non-buildable) base type that provide a commonly-needed\n  // optional .typeParameters field.\n  def(\"TSHasOptionalTypeParameterInstantiation\").field(\"typeParameters\", or(def(\"TSTypeParameterInstantiation\"), null), defaults[\"null\"]);\n  // An abstract (non-buildable) base type that provide a commonly-needed\n  // optional .typeParameters field.\n  def(\"TSHasOptionalTypeParameters\").field(\"typeParameters\", or(def(\"TSTypeParameterDeclaration\"), null, void 0), defaults[\"null\"]);\n  // An abstract (non-buildable) base type that provide a commonly-needed\n  // optional .typeAnnotation field.\n  def(\"TSHasOptionalTypeAnnotation\").field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"]);\n  def(\"TSQualifiedName\").bases(\"Node\").build(\"left\", \"right\").field(\"left\", TSEntityName).field(\"right\", TSEntityName);\n  def(\"TSAsExpression\").bases(\"Expression\", \"Pattern\").build(\"expression\", \"typeAnnotation\").field(\"expression\", def(\"Expression\")).field(\"typeAnnotation\", def(\"TSType\")).field(\"extra\", or({\n    parenthesized: Boolean\n  }, null), defaults[\"null\"]);\n  def(\"TSNonNullExpression\").bases(\"Expression\", \"Pattern\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n  [\"TSAnyKeyword\", \"TSBigIntKeyword\", \"TSBooleanKeyword\", \"TSNeverKeyword\", \"TSNullKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSUndefinedKeyword\", \"TSUnknownKeyword\", \"TSVoidKeyword\", \"TSThisType\"].forEach(function (keywordType) {\n    def(keywordType).bases(\"TSType\").build();\n  });\n  def(\"TSArrayType\").bases(\"TSType\").build(\"elementType\").field(\"elementType\", def(\"TSType\"));\n  def(\"TSLiteralType\").bases(\"TSType\").build(\"literal\").field(\"literal\", or(def(\"NumericLiteral\"), def(\"StringLiteral\"), def(\"BooleanLiteral\"), def(\"TemplateLiteral\"), def(\"UnaryExpression\")));\n  [\"TSUnionType\", \"TSIntersectionType\"].forEach(function (typeName) {\n    def(typeName).bases(\"TSType\").build(\"types\").field(\"types\", [def(\"TSType\")]);\n  });\n  def(\"TSConditionalType\").bases(\"TSType\").build(\"checkType\", \"extendsType\", \"trueType\", \"falseType\").field(\"checkType\", def(\"TSType\")).field(\"extendsType\", def(\"TSType\")).field(\"trueType\", def(\"TSType\")).field(\"falseType\", def(\"TSType\"));\n  def(\"TSInferType\").bases(\"TSType\").build(\"typeParameter\").field(\"typeParameter\", def(\"TSTypeParameter\"));\n  def(\"TSParenthesizedType\").bases(\"TSType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TSType\"));\n  var ParametersType = [or(def(\"Identifier\"), def(\"RestElement\"), def(\"ArrayPattern\"), def(\"ObjectPattern\"))];\n  [\"TSFunctionType\", \"TSConstructorType\"].forEach(function (typeName) {\n    def(typeName).bases(\"TSType\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\").build(\"parameters\").field(\"parameters\", ParametersType);\n  });\n  def(\"TSDeclareFunction\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"id\", \"params\", \"returnType\").field(\"declare\", Boolean, defaults[\"false\"]).field(\"async\", Boolean, defaults[\"false\"]).field(\"generator\", Boolean, defaults[\"false\"]).field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"]).field(\"params\", [def(\"Pattern\")])\n  // tSFunctionTypeAnnotationCommon\n  .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"),\n  // Still used?\n  null), defaults[\"null\"]);\n  def(\"TSDeclareMethod\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"key\", \"params\", \"returnType\").field(\"async\", Boolean, defaults[\"false\"]).field(\"generator\", Boolean, defaults[\"false\"]).field(\"params\", [def(\"Pattern\")])\n  // classMethodOrPropertyCommon\n  .field(\"abstract\", Boolean, defaults[\"false\"]).field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]).field(\"static\", Boolean, defaults[\"false\"]).field(\"computed\", Boolean, defaults[\"false\"]).field(\"optional\", Boolean, defaults[\"false\"]).field(\"key\", or(def(\"Identifier\"), def(\"StringLiteral\"), def(\"NumericLiteral\"),\n  // Only allowed if .computed is true.\n  def(\"Expression\")))\n  // classMethodOrDeclareMethodCommon\n  .field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"), function getDefault() {\n    return \"method\";\n  }).field(\"access\",\n  // Not \"accessibility\"?\n  or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]).field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"])\n  // tSFunctionTypeAnnotationCommon\n  .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"),\n  // Still used?\n  null), defaults[\"null\"]);\n  def(\"TSMappedType\").bases(\"TSType\").build(\"typeParameter\", \"typeAnnotation\").field(\"readonly\", or(Boolean, \"+\", \"-\"), defaults[\"false\"]).field(\"typeParameter\", def(\"TSTypeParameter\")).field(\"optional\", or(Boolean, \"+\", \"-\"), defaults[\"false\"]).field(\"typeAnnotation\", or(def(\"TSType\"), null), defaults[\"null\"]);\n  def(\"TSTupleType\").bases(\"TSType\").build(\"elementTypes\").field(\"elementTypes\", [or(def(\"TSType\"), def(\"TSNamedTupleMember\"))]);\n  def(\"TSNamedTupleMember\").bases(\"TSType\").build(\"label\", \"elementType\", \"optional\").field(\"label\", def(\"Identifier\")).field(\"optional\", Boolean, defaults[\"false\"]).field(\"elementType\", def(\"TSType\"));\n  def(\"TSRestType\").bases(\"TSType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TSType\"));\n  def(\"TSOptionalType\").bases(\"TSType\").build(\"typeAnnotation\").field(\"typeAnnotation\", def(\"TSType\"));\n  def(\"TSIndexedAccessType\").bases(\"TSType\").build(\"objectType\", \"indexType\").field(\"objectType\", def(\"TSType\")).field(\"indexType\", def(\"TSType\"));\n  def(\"TSTypeOperator\").bases(\"TSType\").build(\"operator\").field(\"operator\", String).field(\"typeAnnotation\", def(\"TSType\"));\n  def(\"TSTypeAnnotation\").bases(\"Node\").build(\"typeAnnotation\").field(\"typeAnnotation\", or(def(\"TSType\"), def(\"TSTypeAnnotation\")));\n  def(\"TSIndexSignature\").bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\").build(\"parameters\", \"typeAnnotation\").field(\"parameters\", [def(\"Identifier\")]) // Length === 1\n  .field(\"readonly\", Boolean, defaults[\"false\"]);\n  def(\"TSPropertySignature\").bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\").build(\"key\", \"typeAnnotation\", \"optional\").field(\"key\", def(\"Expression\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"readonly\", Boolean, defaults[\"false\"]).field(\"optional\", Boolean, defaults[\"false\"]).field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n  def(\"TSMethodSignature\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\").build(\"key\", \"parameters\", \"typeAnnotation\").field(\"key\", def(\"Expression\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"optional\", Boolean, defaults[\"false\"]).field(\"parameters\", ParametersType);\n  def(\"TSTypePredicate\").bases(\"TSTypeAnnotation\", \"TSType\").build(\"parameterName\", \"typeAnnotation\", \"asserts\").field(\"parameterName\", or(def(\"Identifier\"), def(\"TSThisType\"))).field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"]).field(\"asserts\", Boolean, defaults[\"false\"]);\n  [\"TSCallSignatureDeclaration\", \"TSConstructSignatureDeclaration\"].forEach(function (typeName) {\n    def(typeName).bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\").build(\"parameters\", \"typeAnnotation\").field(\"parameters\", ParametersType);\n  });\n  def(\"TSEnumMember\").bases(\"Node\").build(\"id\", \"initializer\").field(\"id\", or(def(\"Identifier\"), StringLiteral)).field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n  def(\"TSTypeQuery\").bases(\"TSType\").build(\"exprName\").field(\"exprName\", or(TSEntityName, def(\"TSImportType\")));\n  // Inferred from Babylon's tsParseTypeMember method.\n  var TSTypeMember = or(def(\"TSCallSignatureDeclaration\"), def(\"TSConstructSignatureDeclaration\"), def(\"TSIndexSignature\"), def(\"TSMethodSignature\"), def(\"TSPropertySignature\"));\n  def(\"TSTypeLiteral\").bases(\"TSType\").build(\"members\").field(\"members\", [TSTypeMember]);\n  def(\"TSTypeParameter\").bases(\"Identifier\").build(\"name\", \"constraint\", \"default\").field(\"name\", String).field(\"constraint\", or(def(\"TSType\"), void 0), defaults[\"undefined\"]).field(\"default\", or(def(\"TSType\"), void 0), defaults[\"undefined\"]);\n  def(\"TSTypeAssertion\").bases(\"Expression\", \"Pattern\").build(\"typeAnnotation\", \"expression\").field(\"typeAnnotation\", def(\"TSType\")).field(\"expression\", def(\"Expression\")).field(\"extra\", or({\n    parenthesized: Boolean\n  }, null), defaults[\"null\"]);\n  def(\"TSTypeParameterDeclaration\").bases(\"Declaration\").build(\"params\").field(\"params\", [def(\"TSTypeParameter\")]);\n  def(\"TSTypeParameterInstantiation\").bases(\"Node\").build(\"params\").field(\"params\", [def(\"TSType\")]);\n  def(\"TSEnumDeclaration\").bases(\"Declaration\").build(\"id\", \"members\").field(\"id\", def(\"Identifier\")).field(\"const\", Boolean, defaults[\"false\"]).field(\"declare\", Boolean, defaults[\"false\"]).field(\"members\", [def(\"TSEnumMember\")]).field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n  def(\"TSTypeAliasDeclaration\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"id\", \"typeAnnotation\").field(\"id\", def(\"Identifier\")).field(\"declare\", Boolean, defaults[\"false\"]).field(\"typeAnnotation\", def(\"TSType\"));\n  def(\"TSModuleBlock\").bases(\"Node\").build(\"body\").field(\"body\", [def(\"Statement\")]);\n  def(\"TSModuleDeclaration\").bases(\"Declaration\").build(\"id\", \"body\").field(\"id\", or(StringLiteral, TSEntityName)).field(\"declare\", Boolean, defaults[\"false\"]).field(\"global\", Boolean, defaults[\"false\"]).field(\"body\", or(def(\"TSModuleBlock\"), def(\"TSModuleDeclaration\"), null), defaults[\"null\"]);\n  def(\"TSImportType\").bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\").build(\"argument\", \"qualifier\", \"typeParameters\").field(\"argument\", StringLiteral).field(\"qualifier\", or(TSEntityName, void 0), defaults[\"undefined\"]);\n  def(\"TSImportEqualsDeclaration\").bases(\"Declaration\").build(\"id\", \"moduleReference\").field(\"id\", def(\"Identifier\")).field(\"isExport\", Boolean, defaults[\"false\"]).field(\"moduleReference\", or(TSEntityName, def(\"TSExternalModuleReference\")));\n  def(\"TSExternalModuleReference\").bases(\"Declaration\").build(\"expression\").field(\"expression\", StringLiteral);\n  def(\"TSExportAssignment\").bases(\"Statement\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n  def(\"TSNamespaceExportDeclaration\").bases(\"Declaration\").build(\"id\").field(\"id\", def(\"Identifier\"));\n  def(\"TSInterfaceBody\").bases(\"Node\").build(\"body\").field(\"body\", [TSTypeMember]);\n  def(\"TSExpressionWithTypeArguments\").bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\").build(\"expression\", \"typeParameters\").field(\"expression\", TSEntityName);\n  def(\"TSInterfaceDeclaration\").bases(\"Declaration\", \"TSHasOptionalTypeParameters\").build(\"id\", \"body\").field(\"id\", TSEntityName).field(\"declare\", Boolean, defaults[\"false\"]).field(\"extends\", or([def(\"TSExpressionWithTypeArguments\")], null), defaults[\"null\"]).field(\"body\", def(\"TSInterfaceBody\"));\n  def(\"TSParameterProperty\").bases(\"Pattern\").build(\"parameter\").field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]).field(\"readonly\", Boolean, defaults[\"false\"]).field(\"parameter\", or(def(\"Identifier\"), def(\"AssignmentPattern\")));\n  def(\"ClassProperty\").field(\"access\",\n  // Not \"accessibility\"?\n  or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]);\n  // Defined already in es6 and babel-core.\n  def(\"ClassBody\").field(\"body\", [or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"), def(\"ClassPrivateProperty\"), def(\"ClassMethod\"), def(\"ClassPrivateMethod\"),\n  // Just need to add these types:\n  def(\"TSDeclareMethod\"), TSTypeMember)]);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib_1","require","babel_core_1","__importDefault","type_annotations_1","types_1","shared_1","default_1","fork","use","default","types","n","namedTypes","def","Type","or","defaults","StringLiteral","from","deep","check","Literal","bases","TSEntityName","build","field","parenthesized","Boolean","forEach","keywordType","typeName","ParametersType","getDefault","String","TSTypeMember","module"],"sources":["D:/Julieth-Campos/PSO/node_modules/ast-types/def/typescript.js"],"sourcesContent":["\"use strict\";;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar babel_core_1 = tslib_1.__importDefault(require(\"./babel-core\"));\nvar type_annotations_1 = tslib_1.__importDefault(require(\"./type-annotations\"));\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\nfunction default_1(fork) {\n    // Since TypeScript is parsed by Babylon, include the core Babylon types\n    // but omit the Flow-related types.\n    fork.use(babel_core_1.default);\n    fork.use(type_annotations_1.default);\n    var types = fork.use(types_1.default);\n    var n = types.namedTypes;\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    var StringLiteral = types.Type.from(function (value, deep) {\n        if (n.StringLiteral &&\n            n.StringLiteral.check(value, deep)) {\n            return true;\n        }\n        if (n.Literal &&\n            n.Literal.check(value, deep) &&\n            typeof value.value === \"string\") {\n            return true;\n        }\n        return false;\n    }, \"StringLiteral\");\n    def(\"TSType\")\n        .bases(\"Node\");\n    var TSEntityName = or(def(\"Identifier\"), def(\"TSQualifiedName\"));\n    def(\"TSTypeReference\")\n        .bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\")\n        .build(\"typeName\", \"typeParameters\")\n        .field(\"typeName\", TSEntityName);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeParameters field.\n    def(\"TSHasOptionalTypeParameterInstantiation\")\n        .field(\"typeParameters\", or(def(\"TSTypeParameterInstantiation\"), null), defaults[\"null\"]);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeParameters field.\n    def(\"TSHasOptionalTypeParameters\")\n        .field(\"typeParameters\", or(def(\"TSTypeParameterDeclaration\"), null, void 0), defaults[\"null\"]);\n    // An abstract (non-buildable) base type that provide a commonly-needed\n    // optional .typeAnnotation field.\n    def(\"TSHasOptionalTypeAnnotation\")\n        .field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"]);\n    def(\"TSQualifiedName\")\n        .bases(\"Node\")\n        .build(\"left\", \"right\")\n        .field(\"left\", TSEntityName)\n        .field(\"right\", TSEntityName);\n    def(\"TSAsExpression\")\n        .bases(\"Expression\", \"Pattern\")\n        .build(\"expression\", \"typeAnnotation\")\n        .field(\"expression\", def(\"Expression\"))\n        .field(\"typeAnnotation\", def(\"TSType\"))\n        .field(\"extra\", or({ parenthesized: Boolean }, null), defaults[\"null\"]);\n    def(\"TSNonNullExpression\")\n        .bases(\"Expression\", \"Pattern\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    [\n        \"TSAnyKeyword\",\n        \"TSBigIntKeyword\",\n        \"TSBooleanKeyword\",\n        \"TSNeverKeyword\",\n        \"TSNullKeyword\",\n        \"TSNumberKeyword\",\n        \"TSObjectKeyword\",\n        \"TSStringKeyword\",\n        \"TSSymbolKeyword\",\n        \"TSUndefinedKeyword\",\n        \"TSUnknownKeyword\",\n        \"TSVoidKeyword\",\n        \"TSThisType\",\n    ].forEach(function (keywordType) {\n        def(keywordType)\n            .bases(\"TSType\")\n            .build();\n    });\n    def(\"TSArrayType\")\n        .bases(\"TSType\")\n        .build(\"elementType\")\n        .field(\"elementType\", def(\"TSType\"));\n    def(\"TSLiteralType\")\n        .bases(\"TSType\")\n        .build(\"literal\")\n        .field(\"literal\", or(def(\"NumericLiteral\"), def(\"StringLiteral\"), def(\"BooleanLiteral\"), def(\"TemplateLiteral\"), def(\"UnaryExpression\")));\n    [\"TSUnionType\",\n        \"TSIntersectionType\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .bases(\"TSType\")\n            .build(\"types\")\n            .field(\"types\", [def(\"TSType\")]);\n    });\n    def(\"TSConditionalType\")\n        .bases(\"TSType\")\n        .build(\"checkType\", \"extendsType\", \"trueType\", \"falseType\")\n        .field(\"checkType\", def(\"TSType\"))\n        .field(\"extendsType\", def(\"TSType\"))\n        .field(\"trueType\", def(\"TSType\"))\n        .field(\"falseType\", def(\"TSType\"));\n    def(\"TSInferType\")\n        .bases(\"TSType\")\n        .build(\"typeParameter\")\n        .field(\"typeParameter\", def(\"TSTypeParameter\"));\n    def(\"TSParenthesizedType\")\n        .bases(\"TSType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    var ParametersType = [or(def(\"Identifier\"), def(\"RestElement\"), def(\"ArrayPattern\"), def(\"ObjectPattern\"))];\n    [\"TSFunctionType\",\n        \"TSConstructorType\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .bases(\"TSType\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\")\n            .build(\"parameters\")\n            .field(\"parameters\", ParametersType);\n    });\n    def(\"TSDeclareFunction\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"id\", \"params\", \"returnType\")\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"async\", Boolean, defaults[\"false\"])\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"params\", [def(\"Pattern\")])\n        // tSFunctionTypeAnnotationCommon\n        .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), // Still used?\n    null), defaults[\"null\"]);\n    def(\"TSDeclareMethod\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"key\", \"params\", \"returnType\")\n        .field(\"async\", Boolean, defaults[\"false\"])\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"params\", [def(\"Pattern\")])\n        // classMethodOrPropertyCommon\n        .field(\"abstract\", Boolean, defaults[\"false\"])\n        .field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"])\n        .field(\"static\", Boolean, defaults[\"false\"])\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"key\", or(def(\"Identifier\"), def(\"StringLiteral\"), def(\"NumericLiteral\"), \n    // Only allowed if .computed is true.\n    def(\"Expression\")))\n        // classMethodOrDeclareMethodCommon\n        .field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"), function getDefault() { return \"method\"; })\n        .field(\"access\", // Not \"accessibility\"?\n    or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"])\n        .field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"])\n        // tSFunctionTypeAnnotationCommon\n        .field(\"returnType\", or(def(\"TSTypeAnnotation\"), def(\"Noop\"), // Still used?\n    null), defaults[\"null\"]);\n    def(\"TSMappedType\")\n        .bases(\"TSType\")\n        .build(\"typeParameter\", \"typeAnnotation\")\n        .field(\"readonly\", or(Boolean, \"+\", \"-\"), defaults[\"false\"])\n        .field(\"typeParameter\", def(\"TSTypeParameter\"))\n        .field(\"optional\", or(Boolean, \"+\", \"-\"), defaults[\"false\"])\n        .field(\"typeAnnotation\", or(def(\"TSType\"), null), defaults[\"null\"]);\n    def(\"TSTupleType\")\n        .bases(\"TSType\")\n        .build(\"elementTypes\")\n        .field(\"elementTypes\", [or(def(\"TSType\"), def(\"TSNamedTupleMember\"))]);\n    def(\"TSNamedTupleMember\")\n        .bases(\"TSType\")\n        .build(\"label\", \"elementType\", \"optional\")\n        .field(\"label\", def(\"Identifier\"))\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"elementType\", def(\"TSType\"));\n    def(\"TSRestType\")\n        .bases(\"TSType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSOptionalType\")\n        .bases(\"TSType\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSIndexedAccessType\")\n        .bases(\"TSType\")\n        .build(\"objectType\", \"indexType\")\n        .field(\"objectType\", def(\"TSType\"))\n        .field(\"indexType\", def(\"TSType\"));\n    def(\"TSTypeOperator\")\n        .bases(\"TSType\")\n        .build(\"operator\")\n        .field(\"operator\", String)\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSTypeAnnotation\")\n        .bases(\"Node\")\n        .build(\"typeAnnotation\")\n        .field(\"typeAnnotation\", or(def(\"TSType\"), def(\"TSTypeAnnotation\")));\n    def(\"TSIndexSignature\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\")\n        .build(\"parameters\", \"typeAnnotation\")\n        .field(\"parameters\", [def(\"Identifier\")]) // Length === 1\n        .field(\"readonly\", Boolean, defaults[\"false\"]);\n    def(\"TSPropertySignature\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\")\n        .build(\"key\", \"typeAnnotation\", \"optional\")\n        .field(\"key\", def(\"Expression\"))\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"readonly\", Boolean, defaults[\"false\"])\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSMethodSignature\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\")\n        .build(\"key\", \"parameters\", \"typeAnnotation\")\n        .field(\"key\", def(\"Expression\"))\n        .field(\"computed\", Boolean, defaults[\"false\"])\n        .field(\"optional\", Boolean, defaults[\"false\"])\n        .field(\"parameters\", ParametersType);\n    def(\"TSTypePredicate\")\n        .bases(\"TSTypeAnnotation\", \"TSType\")\n        .build(\"parameterName\", \"typeAnnotation\", \"asserts\")\n        .field(\"parameterName\", or(def(\"Identifier\"), def(\"TSThisType\")))\n        .field(\"typeAnnotation\", or(def(\"TSTypeAnnotation\"), null), defaults[\"null\"])\n        .field(\"asserts\", Boolean, defaults[\"false\"]);\n    [\"TSCallSignatureDeclaration\",\n        \"TSConstructSignatureDeclaration\",\n    ].forEach(function (typeName) {\n        def(typeName)\n            .bases(\"Declaration\", \"TSHasOptionalTypeParameters\", \"TSHasOptionalTypeAnnotation\")\n            .build(\"parameters\", \"typeAnnotation\")\n            .field(\"parameters\", ParametersType);\n    });\n    def(\"TSEnumMember\")\n        .bases(\"Node\")\n        .build(\"id\", \"initializer\")\n        .field(\"id\", or(def(\"Identifier\"), StringLiteral))\n        .field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSTypeQuery\")\n        .bases(\"TSType\")\n        .build(\"exprName\")\n        .field(\"exprName\", or(TSEntityName, def(\"TSImportType\")));\n    // Inferred from Babylon's tsParseTypeMember method.\n    var TSTypeMember = or(def(\"TSCallSignatureDeclaration\"), def(\"TSConstructSignatureDeclaration\"), def(\"TSIndexSignature\"), def(\"TSMethodSignature\"), def(\"TSPropertySignature\"));\n    def(\"TSTypeLiteral\")\n        .bases(\"TSType\")\n        .build(\"members\")\n        .field(\"members\", [TSTypeMember]);\n    def(\"TSTypeParameter\")\n        .bases(\"Identifier\")\n        .build(\"name\", \"constraint\", \"default\")\n        .field(\"name\", String)\n        .field(\"constraint\", or(def(\"TSType\"), void 0), defaults[\"undefined\"])\n        .field(\"default\", or(def(\"TSType\"), void 0), defaults[\"undefined\"]);\n    def(\"TSTypeAssertion\")\n        .bases(\"Expression\", \"Pattern\")\n        .build(\"typeAnnotation\", \"expression\")\n        .field(\"typeAnnotation\", def(\"TSType\"))\n        .field(\"expression\", def(\"Expression\"))\n        .field(\"extra\", or({ parenthesized: Boolean }, null), defaults[\"null\"]);\n    def(\"TSTypeParameterDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"params\")\n        .field(\"params\", [def(\"TSTypeParameter\")]);\n    def(\"TSTypeParameterInstantiation\")\n        .bases(\"Node\")\n        .build(\"params\")\n        .field(\"params\", [def(\"TSType\")]);\n    def(\"TSEnumDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"members\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"const\", Boolean, defaults[\"false\"])\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"members\", [def(\"TSEnumMember\")])\n        .field(\"initializer\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"TSTypeAliasDeclaration\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"id\", \"typeAnnotation\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"typeAnnotation\", def(\"TSType\"));\n    def(\"TSModuleBlock\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n    def(\"TSModuleDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"body\")\n        .field(\"id\", or(StringLiteral, TSEntityName))\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"global\", Boolean, defaults[\"false\"])\n        .field(\"body\", or(def(\"TSModuleBlock\"), def(\"TSModuleDeclaration\"), null), defaults[\"null\"]);\n    def(\"TSImportType\")\n        .bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\")\n        .build(\"argument\", \"qualifier\", \"typeParameters\")\n        .field(\"argument\", StringLiteral)\n        .field(\"qualifier\", or(TSEntityName, void 0), defaults[\"undefined\"]);\n    def(\"TSImportEqualsDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\", \"moduleReference\")\n        .field(\"id\", def(\"Identifier\"))\n        .field(\"isExport\", Boolean, defaults[\"false\"])\n        .field(\"moduleReference\", or(TSEntityName, def(\"TSExternalModuleReference\")));\n    def(\"TSExternalModuleReference\")\n        .bases(\"Declaration\")\n        .build(\"expression\")\n        .field(\"expression\", StringLiteral);\n    def(\"TSExportAssignment\")\n        .bases(\"Statement\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    def(\"TSNamespaceExportDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"id\")\n        .field(\"id\", def(\"Identifier\"));\n    def(\"TSInterfaceBody\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [TSTypeMember]);\n    def(\"TSExpressionWithTypeArguments\")\n        .bases(\"TSType\", \"TSHasOptionalTypeParameterInstantiation\")\n        .build(\"expression\", \"typeParameters\")\n        .field(\"expression\", TSEntityName);\n    def(\"TSInterfaceDeclaration\")\n        .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n        .build(\"id\", \"body\")\n        .field(\"id\", TSEntityName)\n        .field(\"declare\", Boolean, defaults[\"false\"])\n        .field(\"extends\", or([def(\"TSExpressionWithTypeArguments\")], null), defaults[\"null\"])\n        .field(\"body\", def(\"TSInterfaceBody\"));\n    def(\"TSParameterProperty\")\n        .bases(\"Pattern\")\n        .build(\"parameter\")\n        .field(\"accessibility\", or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"])\n        .field(\"readonly\", Boolean, defaults[\"false\"])\n        .field(\"parameter\", or(def(\"Identifier\"), def(\"AssignmentPattern\")));\n    def(\"ClassProperty\")\n        .field(\"access\", // Not \"accessibility\"?\n    or(\"public\", \"private\", \"protected\", void 0), defaults[\"undefined\"]);\n    // Defined already in es6 and babel-core.\n    def(\"ClassBody\")\n        .field(\"body\", [or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"), def(\"ClassPrivateProperty\"), def(\"ClassMethod\"), def(\"ClassPrivateMethod\"), \n        // Just need to add these types:\n        def(\"TSDeclareMethod\"), TSTypeMember)]);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}