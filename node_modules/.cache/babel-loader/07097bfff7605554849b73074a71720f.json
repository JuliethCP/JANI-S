{"ast":null,"code":"/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JSHandle } from '../api/JSHandle.js';\nimport { debugError, valueFromRemoteObject } from '../common/util.js';\n/**\n * @internal\n */\nexport class CdpJSHandle extends JSHandle {\n  #disposed = false;\n  #remoteObject;\n  #world;\n  constructor(world, remoteObject) {\n    super();\n    this.#world = world;\n    this.#remoteObject = remoteObject;\n  }\n  get disposed() {\n    return this.#disposed;\n  }\n  get realm() {\n    return this.#world;\n  }\n  get client() {\n    return this.realm.environment.client;\n  }\n  async jsonValue() {\n    if (!this.#remoteObject.objectId) {\n      return valueFromRemoteObject(this.#remoteObject);\n    }\n    const value = await this.evaluate(object => {\n      return object;\n    });\n    if (value === undefined) {\n      throw new Error('Could not serialize referenced object');\n    }\n    return value;\n  }\n  /**\n   * Either `null` or the handle itself if the handle is an\n   * instance of {@link ElementHandle}.\n   */\n  asElement() {\n    return null;\n  }\n  async dispose() {\n    if (this.#disposed) {\n      return;\n    }\n    this.#disposed = true;\n    await releaseObject(this.client, this.#remoteObject);\n  }\n  toString() {\n    if (!this.#remoteObject.objectId) {\n      return 'JSHandle:' + valueFromRemoteObject(this.#remoteObject);\n    }\n    const type = this.#remoteObject.subtype || this.#remoteObject.type;\n    return 'JSHandle@' + type;\n  }\n  get id() {\n    return this.#remoteObject.objectId;\n  }\n  remoteObject() {\n    return this.#remoteObject;\n  }\n}\n/**\n * @internal\n */\nexport async function releaseObject(client, remoteObject) {\n  if (!remoteObject.objectId) {\n    return;\n  }\n  await client.send('Runtime.releaseObject', {\n    objectId: remoteObject.objectId\n  }).catch(error => {\n    // Exceptions might happen in case of a page been navigated or closed.\n    // Swallow these since they are harmless and we don't leak anything in this case.\n    debugError(error);\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAmBA,SAAQA,QAAQ,QAAO,oBAAoB;AAC3C,SAAQC,UAAU,EAAEC,qBAAqB,QAAO,mBAAmB;AAKnE;;;AAGA,OAAM,MAAOC,WAAyB,SAAQH,QAAW;EACvD,SAAS,GAAG,KAAK;EACR,aAAa;EACb,MAAM;EAEfI,YACEC,KAAoB,EACpBC,YAA2C;IAE3C,KAAK,EAAE;IACP,IAAI,CAAC,MAAM,GAAGD,KAAK;IACnB,IAAI,CAAC,aAAa,GAAGC,YAAY;EACnC;EAEA,IAAaC,QAAQ;IACnB,OAAO,IAAI,CAAC,SAAS;EACvB;EAEA,IAAaC,KAAK;IAChB,OAAO,IAAI,CAAC,MAAM;EACpB;EAEA,IAAIC,MAAM;IACR,OAAO,IAAI,CAACD,KAAK,CAACE,WAAW,CAACD,MAAM;EACtC;EAES,MAAME,SAAS;IACtB,IAAI,CAAC,IAAI,CAAC,aAAa,CAACC,QAAQ,EAAE;MAChC,OAAOV,qBAAqB,CAAC,IAAI,CAAC,aAAa,CAAC;;IAElD,MAAMW,KAAK,GAAG,MAAM,IAAI,CAACC,QAAQ,CAACC,MAAM,IAAG;MACzC,OAAOA,MAAM;IACf,CAAC,CAAC;IACF,IAAIF,KAAK,KAAKG,SAAS,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;;IAE1D,OAAOJ,KAAK;EACd;EAEA;;;;EAISK,SAAS;IAChB,OAAO,IAAI;EACb;EAES,MAAMC,OAAO;IACpB,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB;;IAEF,IAAI,CAAC,SAAS,GAAG,IAAI;IACrB,MAAMC,aAAa,CAAC,IAAI,CAACX,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC;EACtD;EAESY,QAAQ;IACf,IAAI,CAAC,IAAI,CAAC,aAAa,CAACT,QAAQ,EAAE;MAChC,OAAO,WAAW,GAAGV,qBAAqB,CAAC,IAAI,CAAC,aAAa,CAAC;;IAEhE,MAAMoB,IAAI,GAAG,IAAI,CAAC,aAAa,CAACC,OAAO,IAAI,IAAI,CAAC,aAAa,CAACD,IAAI;IAClE,OAAO,WAAW,GAAGA,IAAI;EAC3B;EAEA,IAAaE,EAAE;IACb,OAAO,IAAI,CAAC,aAAa,CAACZ,QAAQ;EACpC;EAESN,YAAY;IACnB,OAAO,IAAI,CAAC,aAAa;EAC3B;;AAGF;;;AAGA,OAAO,eAAec,aAAa,CACjCX,MAAkB,EAClBH,YAA2C;EAE3C,IAAI,CAACA,YAAY,CAACM,QAAQ,EAAE;IAC1B;;EAEF,MAAMH,MAAM,CACTgB,IAAI,CAAC,uBAAuB,EAAE;IAACb,QAAQ,EAAEN,YAAY,CAACM;EAAQ,CAAC,CAAC,CAChEc,KAAK,CAACC,KAAK,IAAG;IACb;IACA;IACA1B,UAAU,CAAC0B,KAAK,CAAC;EACnB,CAAC,CAAC;AACN","names":["JSHandle","debugError","valueFromRemoteObject","CdpJSHandle","constructor","world","remoteObject","disposed","realm","client","environment","jsonValue","objectId","value","evaluate","object","undefined","Error","asElement","dispose","releaseObject","toString","type","subtype","id","send","catch","error"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\JSHandle.ts"],"sourcesContent":["/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {JSHandle} from '../api/JSHandle.js';\nimport {debugError, valueFromRemoteObject} from '../common/util.js';\n\nimport type {CdpElementHandle} from './ElementHandle.js';\nimport type {IsolatedWorld} from './IsolatedWorld.js';\n\n/**\n * @internal\n */\nexport class CdpJSHandle<T = unknown> extends JSHandle<T> {\n  #disposed = false;\n  readonly #remoteObject: Protocol.Runtime.RemoteObject;\n  readonly #world: IsolatedWorld;\n\n  constructor(\n    world: IsolatedWorld,\n    remoteObject: Protocol.Runtime.RemoteObject\n  ) {\n    super();\n    this.#world = world;\n    this.#remoteObject = remoteObject;\n  }\n\n  override get disposed(): boolean {\n    return this.#disposed;\n  }\n\n  override get realm(): IsolatedWorld {\n    return this.#world;\n  }\n\n  get client(): CDPSession {\n    return this.realm.environment.client;\n  }\n\n  override async jsonValue(): Promise<T> {\n    if (!this.#remoteObject.objectId) {\n      return valueFromRemoteObject(this.#remoteObject);\n    }\n    const value = await this.evaluate(object => {\n      return object;\n    });\n    if (value === undefined) {\n      throw new Error('Could not serialize referenced object');\n    }\n    return value;\n  }\n\n  /**\n   * Either `null` or the handle itself if the handle is an\n   * instance of {@link ElementHandle}.\n   */\n  override asElement(): CdpElementHandle<Node> | null {\n    return null;\n  }\n\n  override async dispose(): Promise<void> {\n    if (this.#disposed) {\n      return;\n    }\n    this.#disposed = true;\n    await releaseObject(this.client, this.#remoteObject);\n  }\n\n  override toString(): string {\n    if (!this.#remoteObject.objectId) {\n      return 'JSHandle:' + valueFromRemoteObject(this.#remoteObject);\n    }\n    const type = this.#remoteObject.subtype || this.#remoteObject.type;\n    return 'JSHandle@' + type;\n  }\n\n  override get id(): string | undefined {\n    return this.#remoteObject.objectId;\n  }\n\n  override remoteObject(): Protocol.Runtime.RemoteObject {\n    return this.#remoteObject;\n  }\n}\n\n/**\n * @internal\n */\nexport async function releaseObject(\n  client: CDPSession,\n  remoteObject: Protocol.Runtime.RemoteObject\n): Promise<void> {\n  if (!remoteObject.objectId) {\n    return;\n  }\n  await client\n    .send('Runtime.releaseObject', {objectId: remoteObject.objectId})\n    .catch(error => {\n      // Exceptions might happen in case of a page been navigated or closed.\n      // Swallow these since they are harmless and we don't leak anything in this case.\n      debugError(error);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}