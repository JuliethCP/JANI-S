{"ast":null,"code":"var fs = require(\"fs\");\nvar zlib = require(\"zlib\");\nvar fd_slicer = require(\"fd-slicer\");\nvar crc32 = require(\"buffer-crc32\");\nvar util = require(\"util\");\nvar EventEmitter = require(\"events\").EventEmitter;\nvar Transform = require(\"stream\").Transform;\nvar PassThrough = require(\"stream\").PassThrough;\nvar Writable = require(\"stream\").Writable;\nexports.open = open;\nexports.fromFd = fromFd;\nexports.fromBuffer = fromBuffer;\nexports.fromRandomAccessReader = fromRandomAccessReader;\nexports.dosDateTimeToDate = dosDateTimeToDate;\nexports.validateFileName = validateFileName;\nexports.ZipFile = ZipFile;\nexports.Entry = Entry;\nexports.RandomAccessReader = RandomAccessReader;\nfunction open(path, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.open(path, \"r\", function (err, fd) {\n    if (err) return callback(err);\n    fromFd(fd, options, function (err, zipfile) {\n      if (err) fs.close(fd, defaultCallback);\n      callback(err, zipfile);\n    });\n  });\n}\nfunction fromFd(fd, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.fstat(fd, function (err, stats) {\n    if (err) return callback(err);\n    var reader = fd_slicer.createFromFd(fd, {\n      autoClose: true\n    });\n    fromRandomAccessReader(reader, stats.size, options, callback);\n  });\n}\nfunction fromBuffer(buffer, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  // limit the max chunk size. see https://github.com/thejoshwolfe/yauzl/issues/87\n  var reader = fd_slicer.createFromBuffer(buffer, {\n    maxChunkSize: 0x10000\n  });\n  fromRandomAccessReader(reader, buffer.length, options, callback);\n}\nfunction fromRandomAccessReader(reader, totalSize, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  var decodeStrings = !!options.decodeStrings;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  if (typeof totalSize !== \"number\") throw new Error(\"expected totalSize parameter to be a number\");\n  if (totalSize > Number.MAX_SAFE_INTEGER) {\n    throw new Error(\"zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.\");\n  }\n\n  // the matching unref() call is in zipfile.close()\n  reader.ref();\n\n  // eocdr means End of Central Directory Record.\n  // search backwards for the eocdr signature.\n  // the last field of the eocdr is a variable-length comment.\n  // the comment size is encoded in a 2-byte field in the eocdr, which we can't find without trudging backwards through the comment to find it.\n  // as a consequence of this design decision, it's possible to have ambiguous zip file metadata if a coherent eocdr was in the comment.\n  // we search backwards for a eocdr signature, and hope that whoever made the zip file was smart enough to forbid the eocdr signature in the comment.\n  var eocdrWithoutCommentSize = 22;\n  var maxCommentSize = 0xffff; // 2-byte size\n  var bufferSize = Math.min(eocdrWithoutCommentSize + maxCommentSize, totalSize);\n  var buffer = newBuffer(bufferSize);\n  var bufferReadStart = totalSize - buffer.length;\n  readAndAssertNoEof(reader, buffer, 0, bufferSize, bufferReadStart, function (err) {\n    if (err) return callback(err);\n    for (var i = bufferSize - eocdrWithoutCommentSize; i >= 0; i -= 1) {\n      if (buffer.readUInt32LE(i) !== 0x06054b50) continue;\n      // found eocdr\n      var eocdrBuffer = buffer.slice(i);\n\n      // 0 - End of central directory signature = 0x06054b50\n      // 4 - Number of this disk\n      var diskNumber = eocdrBuffer.readUInt16LE(4);\n      if (diskNumber !== 0) {\n        return callback(new Error(\"multi-disk zip files are not supported: found disk number: \" + diskNumber));\n      }\n      // 6 - Disk where central directory starts\n      // 8 - Number of central directory records on this disk\n      // 10 - Total number of central directory records\n      var entryCount = eocdrBuffer.readUInt16LE(10);\n      // 12 - Size of central directory (bytes)\n      // 16 - Offset of start of central directory, relative to start of archive\n      var centralDirectoryOffset = eocdrBuffer.readUInt32LE(16);\n      // 20 - Comment length\n      var commentLength = eocdrBuffer.readUInt16LE(20);\n      var expectedCommentLength = eocdrBuffer.length - eocdrWithoutCommentSize;\n      if (commentLength !== expectedCommentLength) {\n        return callback(new Error(\"invalid comment length. expected: \" + expectedCommentLength + \". found: \" + commentLength));\n      }\n      // 22 - Comment\n      // the encoding is always cp437.\n      var comment = decodeStrings ? decodeBuffer(eocdrBuffer, 22, eocdrBuffer.length, false) : eocdrBuffer.slice(22);\n      if (!(entryCount === 0xffff || centralDirectoryOffset === 0xffffffff)) {\n        return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n      }\n\n      // ZIP64 format\n\n      // ZIP64 Zip64 end of central directory locator\n      var zip64EocdlBuffer = newBuffer(20);\n      var zip64EocdlOffset = bufferReadStart + i - zip64EocdlBuffer.length;\n      readAndAssertNoEof(reader, zip64EocdlBuffer, 0, zip64EocdlBuffer.length, zip64EocdlOffset, function (err) {\n        if (err) return callback(err);\n\n        // 0 - zip64 end of central dir locator signature = 0x07064b50\n        if (zip64EocdlBuffer.readUInt32LE(0) !== 0x07064b50) {\n          return callback(new Error(\"invalid zip64 end of central directory locator signature\"));\n        }\n        // 4 - number of the disk with the start of the zip64 end of central directory\n        // 8 - relative offset of the zip64 end of central directory record\n        var zip64EocdrOffset = readUInt64LE(zip64EocdlBuffer, 8);\n        // 16 - total number of disks\n\n        // ZIP64 end of central directory record\n        var zip64EocdrBuffer = newBuffer(56);\n        readAndAssertNoEof(reader, zip64EocdrBuffer, 0, zip64EocdrBuffer.length, zip64EocdrOffset, function (err) {\n          if (err) return callback(err);\n\n          // 0 - zip64 end of central dir signature                           4 bytes  (0x06064b50)\n          if (zip64EocdrBuffer.readUInt32LE(0) !== 0x06064b50) {\n            return callback(new Error(\"invalid zip64 end of central directory record signature\"));\n          }\n          // 4 - size of zip64 end of central directory record                8 bytes\n          // 12 - version made by                                             2 bytes\n          // 14 - version needed to extract                                   2 bytes\n          // 16 - number of this disk                                         4 bytes\n          // 20 - number of the disk with the start of the central directory  4 bytes\n          // 24 - total number of entries in the central directory on this disk         8 bytes\n          // 32 - total number of entries in the central directory            8 bytes\n          entryCount = readUInt64LE(zip64EocdrBuffer, 32);\n          // 40 - size of the central directory                               8 bytes\n          // 48 - offset of start of central directory with respect to the starting disk number     8 bytes\n          centralDirectoryOffset = readUInt64LE(zip64EocdrBuffer, 48);\n          // 56 - zip64 extensible data sector                                (variable size)\n          return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n        });\n      });\n      return;\n    }\n    callback(new Error(\"end of central directory record signature not found\"));\n  });\n}\nutil.inherits(ZipFile, EventEmitter);\nfunction ZipFile(reader, centralDirectoryOffset, fileSize, entryCount, comment, autoClose, lazyEntries, decodeStrings, validateEntrySizes, strictFileNames) {\n  var self = this;\n  EventEmitter.call(self);\n  self.reader = reader;\n  // forward close events\n  self.reader.on(\"error\", function (err) {\n    // error closing the fd\n    emitError(self, err);\n  });\n  self.reader.once(\"close\", function () {\n    self.emit(\"close\");\n  });\n  self.readEntryCursor = centralDirectoryOffset;\n  self.fileSize = fileSize;\n  self.entryCount = entryCount;\n  self.comment = comment;\n  self.entriesRead = 0;\n  self.autoClose = !!autoClose;\n  self.lazyEntries = !!lazyEntries;\n  self.decodeStrings = !!decodeStrings;\n  self.validateEntrySizes = !!validateEntrySizes;\n  self.strictFileNames = !!strictFileNames;\n  self.isOpen = true;\n  self.emittedError = false;\n  if (!self.lazyEntries) self._readEntry();\n}\nZipFile.prototype.close = function () {\n  if (!this.isOpen) return;\n  this.isOpen = false;\n  this.reader.unref();\n};\nfunction emitErrorAndAutoClose(self, err) {\n  if (self.autoClose) self.close();\n  emitError(self, err);\n}\nfunction emitError(self, err) {\n  if (self.emittedError) return;\n  self.emittedError = true;\n  self.emit(\"error\", err);\n}\nZipFile.prototype.readEntry = function () {\n  if (!this.lazyEntries) throw new Error(\"readEntry() called without lazyEntries:true\");\n  this._readEntry();\n};\nZipFile.prototype._readEntry = function () {\n  var self = this;\n  if (self.entryCount === self.entriesRead) {\n    // done with metadata\n    setImmediate(function () {\n      if (self.autoClose) self.close();\n      if (self.emittedError) return;\n      self.emit(\"end\");\n    });\n    return;\n  }\n  if (self.emittedError) return;\n  var buffer = newBuffer(46);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function (err) {\n    if (err) return emitErrorAndAutoClose(self, err);\n    if (self.emittedError) return;\n    var entry = new Entry();\n    // 0 - Central directory file header signature\n    var signature = buffer.readUInt32LE(0);\n    if (signature !== 0x02014b50) return emitErrorAndAutoClose(self, new Error(\"invalid central directory file header signature: 0x\" + signature.toString(16)));\n    // 4 - Version made by\n    entry.versionMadeBy = buffer.readUInt16LE(4);\n    // 6 - Version needed to extract (minimum)\n    entry.versionNeededToExtract = buffer.readUInt16LE(6);\n    // 8 - General purpose bit flag\n    entry.generalPurposeBitFlag = buffer.readUInt16LE(8);\n    // 10 - Compression method\n    entry.compressionMethod = buffer.readUInt16LE(10);\n    // 12 - File last modification time\n    entry.lastModFileTime = buffer.readUInt16LE(12);\n    // 14 - File last modification date\n    entry.lastModFileDate = buffer.readUInt16LE(14);\n    // 16 - CRC-32\n    entry.crc32 = buffer.readUInt32LE(16);\n    // 20 - Compressed size\n    entry.compressedSize = buffer.readUInt32LE(20);\n    // 24 - Uncompressed size\n    entry.uncompressedSize = buffer.readUInt32LE(24);\n    // 28 - File name length (n)\n    entry.fileNameLength = buffer.readUInt16LE(28);\n    // 30 - Extra field length (m)\n    entry.extraFieldLength = buffer.readUInt16LE(30);\n    // 32 - File comment length (k)\n    entry.fileCommentLength = buffer.readUInt16LE(32);\n    // 34 - Disk number where file starts\n    // 36 - Internal file attributes\n    entry.internalFileAttributes = buffer.readUInt16LE(36);\n    // 38 - External file attributes\n    entry.externalFileAttributes = buffer.readUInt32LE(38);\n    // 42 - Relative offset of local file header\n    entry.relativeOffsetOfLocalHeader = buffer.readUInt32LE(42);\n    if (entry.generalPurposeBitFlag & 0x40) return emitErrorAndAutoClose(self, new Error(\"strong encryption is not supported\"));\n    self.readEntryCursor += 46;\n    buffer = newBuffer(entry.fileNameLength + entry.extraFieldLength + entry.fileCommentLength);\n    readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function (err) {\n      if (err) return emitErrorAndAutoClose(self, err);\n      if (self.emittedError) return;\n      // 46 - File name\n      var isUtf8 = (entry.generalPurposeBitFlag & 0x800) !== 0;\n      entry.fileName = self.decodeStrings ? decodeBuffer(buffer, 0, entry.fileNameLength, isUtf8) : buffer.slice(0, entry.fileNameLength);\n\n      // 46+n - Extra field\n      var fileCommentStart = entry.fileNameLength + entry.extraFieldLength;\n      var extraFieldBuffer = buffer.slice(entry.fileNameLength, fileCommentStart);\n      entry.extraFields = [];\n      var i = 0;\n      while (i < extraFieldBuffer.length - 3) {\n        var headerId = extraFieldBuffer.readUInt16LE(i + 0);\n        var dataSize = extraFieldBuffer.readUInt16LE(i + 2);\n        var dataStart = i + 4;\n        var dataEnd = dataStart + dataSize;\n        if (dataEnd > extraFieldBuffer.length) return emitErrorAndAutoClose(self, new Error(\"extra field length exceeds extra field buffer size\"));\n        var dataBuffer = newBuffer(dataSize);\n        extraFieldBuffer.copy(dataBuffer, 0, dataStart, dataEnd);\n        entry.extraFields.push({\n          id: headerId,\n          data: dataBuffer\n        });\n        i = dataEnd;\n      }\n\n      // 46+n+m - File comment\n      entry.fileComment = self.decodeStrings ? decodeBuffer(buffer, fileCommentStart, fileCommentStart + entry.fileCommentLength, isUtf8) : buffer.slice(fileCommentStart, fileCommentStart + entry.fileCommentLength);\n      // compatibility hack for https://github.com/thejoshwolfe/yauzl/issues/47\n      entry.comment = entry.fileComment;\n      self.readEntryCursor += buffer.length;\n      self.entriesRead += 1;\n      if (entry.uncompressedSize === 0xffffffff || entry.compressedSize === 0xffffffff || entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n        // ZIP64 format\n        // find the Zip64 Extended Information Extra Field\n        var zip64EiefBuffer = null;\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x0001) {\n            zip64EiefBuffer = extraField.data;\n            break;\n          }\n        }\n        if (zip64EiefBuffer == null) {\n          return emitErrorAndAutoClose(self, new Error(\"expected zip64 extended information extra field\"));\n        }\n        var index = 0;\n        // 0 - Original Size          8 bytes\n        if (entry.uncompressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include uncompressed size\"));\n          }\n          entry.uncompressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 8 - Compressed Size        8 bytes\n        if (entry.compressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include compressed size\"));\n          }\n          entry.compressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 16 - Relative Header Offset 8 bytes\n        if (entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include relative header offset\"));\n          }\n          entry.relativeOffsetOfLocalHeader = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 24 - Disk Start Number      4 bytes\n      }\n\n      // check for Info-ZIP Unicode Path Extra Field (0x7075)\n      // see https://github.com/thejoshwolfe/yauzl/issues/33\n      if (self.decodeStrings) {\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x7075) {\n            if (extraField.data.length < 6) {\n              // too short to be meaningful\n              continue;\n            }\n            // Version       1 byte      version of this extra field, currently 1\n            if (extraField.data.readUInt8(0) !== 1) {\n              // > Changes may not be backward compatible so this extra\n              // > field should not be used if the version is not recognized.\n              continue;\n            }\n            // NameCRC32     4 bytes     File Name Field CRC32 Checksum\n            var oldNameCrc32 = extraField.data.readUInt32LE(1);\n            if (crc32.unsigned(buffer.slice(0, entry.fileNameLength)) !== oldNameCrc32) {\n              // > If the CRC check fails, this UTF-8 Path Extra Field should be\n              // > ignored and the File Name field in the header should be used instead.\n              continue;\n            }\n            // UnicodeName   Variable    UTF-8 version of the entry File Name\n            entry.fileName = decodeBuffer(extraField.data, 5, extraField.data.length, true);\n            break;\n          }\n        }\n      }\n\n      // validate file size\n      if (self.validateEntrySizes && entry.compressionMethod === 0) {\n        var expectedCompressedSize = entry.uncompressedSize;\n        if (entry.isEncrypted()) {\n          // traditional encryption prefixes the file data with a header\n          expectedCompressedSize += 12;\n        }\n        if (entry.compressedSize !== expectedCompressedSize) {\n          var msg = \"compressed/uncompressed size mismatch for stored file: \" + entry.compressedSize + \" != \" + entry.uncompressedSize;\n          return emitErrorAndAutoClose(self, new Error(msg));\n        }\n      }\n      if (self.decodeStrings) {\n        if (!self.strictFileNames) {\n          // allow backslash\n          entry.fileName = entry.fileName.replace(/\\\\/g, \"/\");\n        }\n        var errorMessage = validateFileName(entry.fileName, self.validateFileNameOptions);\n        if (errorMessage != null) return emitErrorAndAutoClose(self, new Error(errorMessage));\n      }\n      self.emit(\"entry\", entry);\n      if (!self.lazyEntries) self._readEntry();\n    });\n  });\n};\nZipFile.prototype.openReadStream = function (entry, options, callback) {\n  var self = this;\n  // parameter validation\n  var relativeStart = 0;\n  var relativeEnd = entry.compressedSize;\n  if (callback == null) {\n    callback = options;\n    options = {};\n  } else {\n    // validate options that the caller has no excuse to get wrong\n    if (options.decrypt != null) {\n      if (!entry.isEncrypted()) {\n        throw new Error(\"options.decrypt can only be specified for encrypted entries\");\n      }\n      if (options.decrypt !== false) throw new Error(\"invalid options.decrypt value: \" + options.decrypt);\n      if (entry.isCompressed()) {\n        if (options.decompress !== false) throw new Error(\"entry is encrypted and compressed, and options.decompress !== false\");\n      }\n    }\n    if (options.decompress != null) {\n      if (!entry.isCompressed()) {\n        throw new Error(\"options.decompress can only be specified for compressed entries\");\n      }\n      if (!(options.decompress === false || options.decompress === true)) {\n        throw new Error(\"invalid options.decompress value: \" + options.decompress);\n      }\n    }\n    if (options.start != null || options.end != null) {\n      if (entry.isCompressed() && options.decompress !== false) {\n        throw new Error(\"start/end range not allowed for compressed entry without options.decompress === false\");\n      }\n      if (entry.isEncrypted() && options.decrypt !== false) {\n        throw new Error(\"start/end range not allowed for encrypted entry without options.decrypt === false\");\n      }\n    }\n    if (options.start != null) {\n      relativeStart = options.start;\n      if (relativeStart < 0) throw new Error(\"options.start < 0\");\n      if (relativeStart > entry.compressedSize) throw new Error(\"options.start > entry.compressedSize\");\n    }\n    if (options.end != null) {\n      relativeEnd = options.end;\n      if (relativeEnd < 0) throw new Error(\"options.end < 0\");\n      if (relativeEnd > entry.compressedSize) throw new Error(\"options.end > entry.compressedSize\");\n      if (relativeEnd < relativeStart) throw new Error(\"options.end < options.start\");\n    }\n  }\n  // any further errors can either be caused by the zipfile,\n  // or were introduced in a minor version of yauzl,\n  // so should be passed to the client rather than thrown.\n  if (!self.isOpen) return callback(new Error(\"closed\"));\n  if (entry.isEncrypted()) {\n    if (options.decrypt !== false) return callback(new Error(\"entry is encrypted, and options.decrypt !== false\"));\n  }\n  // make sure we don't lose the fd before we open the actual read stream\n  self.reader.ref();\n  var buffer = newBuffer(30);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, entry.relativeOffsetOfLocalHeader, function (err) {\n    try {\n      if (err) return callback(err);\n      // 0 - Local file header signature = 0x04034b50\n      var signature = buffer.readUInt32LE(0);\n      if (signature !== 0x04034b50) {\n        return callback(new Error(\"invalid local file header signature: 0x\" + signature.toString(16)));\n      }\n      // all this should be redundant\n      // 4 - Version needed to extract (minimum)\n      // 6 - General purpose bit flag\n      // 8 - Compression method\n      // 10 - File last modification time\n      // 12 - File last modification date\n      // 14 - CRC-32\n      // 18 - Compressed size\n      // 22 - Uncompressed size\n      // 26 - File name length (n)\n      var fileNameLength = buffer.readUInt16LE(26);\n      // 28 - Extra field length (m)\n      var extraFieldLength = buffer.readUInt16LE(28);\n      // 30 - File name\n      // 30+n - Extra field\n      var localFileHeaderEnd = entry.relativeOffsetOfLocalHeader + buffer.length + fileNameLength + extraFieldLength;\n      var decompress;\n      if (entry.compressionMethod === 0) {\n        // 0 - The file is stored (no compression)\n        decompress = false;\n      } else if (entry.compressionMethod === 8) {\n        // 8 - The file is Deflated\n        decompress = options.decompress != null ? options.decompress : true;\n      } else {\n        return callback(new Error(\"unsupported compression method: \" + entry.compressionMethod));\n      }\n      var fileDataStart = localFileHeaderEnd;\n      var fileDataEnd = fileDataStart + entry.compressedSize;\n      if (entry.compressedSize !== 0) {\n        // bounds check now, because the read streams will probably not complain loud enough.\n        // since we're dealing with an unsigned offset plus an unsigned size,\n        // we only have 1 thing to check for.\n        if (fileDataEnd > self.fileSize) {\n          return callback(new Error(\"file data overflows file bounds: \" + fileDataStart + \" + \" + entry.compressedSize + \" > \" + self.fileSize));\n        }\n      }\n      var readStream = self.reader.createReadStream({\n        start: fileDataStart + relativeStart,\n        end: fileDataStart + relativeEnd\n      });\n      var endpointStream = readStream;\n      if (decompress) {\n        var destroyed = false;\n        var inflateFilter = zlib.createInflateRaw();\n        readStream.on(\"error\", function (err) {\n          // setImmediate here because errors can be emitted during the first call to pipe()\n          setImmediate(function () {\n            if (!destroyed) inflateFilter.emit(\"error\", err);\n          });\n        });\n        readStream.pipe(inflateFilter);\n        if (self.validateEntrySizes) {\n          endpointStream = new AssertByteCountStream(entry.uncompressedSize);\n          inflateFilter.on(\"error\", function (err) {\n            // forward zlib errors to the client-visible stream\n            setImmediate(function () {\n              if (!destroyed) endpointStream.emit(\"error\", err);\n            });\n          });\n          inflateFilter.pipe(endpointStream);\n        } else {\n          // the zlib filter is the client-visible stream\n          endpointStream = inflateFilter;\n        }\n        // this is part of yauzl's API, so implement this function on the client-visible stream\n        endpointStream.destroy = function () {\n          destroyed = true;\n          if (inflateFilter !== endpointStream) inflateFilter.unpipe(endpointStream);\n          readStream.unpipe(inflateFilter);\n          // TODO: the inflateFilter may cause a memory leak. see Issue #27.\n          readStream.destroy();\n        };\n      }\n      callback(null, endpointStream);\n    } finally {\n      self.reader.unref();\n    }\n  });\n};\nfunction Entry() {}\nEntry.prototype.getLastModDate = function () {\n  return dosDateTimeToDate(this.lastModFileDate, this.lastModFileTime);\n};\nEntry.prototype.isEncrypted = function () {\n  return (this.generalPurposeBitFlag & 0x1) !== 0;\n};\nEntry.prototype.isCompressed = function () {\n  return this.compressionMethod === 8;\n};\nfunction dosDateTimeToDate(date, time) {\n  var day = date & 0x1f; // 1-31\n  var month = (date >> 5 & 0xf) - 1; // 1-12, 0-11\n  var year = (date >> 9 & 0x7f) + 1980; // 0-128, 1980-2108\n\n  var millisecond = 0;\n  var second = (time & 0x1f) * 2; // 0-29, 0-58 (even numbers)\n  var minute = time >> 5 & 0x3f; // 0-59\n  var hour = time >> 11 & 0x1f; // 0-23\n\n  return new Date(year, month, day, hour, minute, second, millisecond);\n}\nfunction validateFileName(fileName) {\n  if (fileName.indexOf(\"\\\\\") !== -1) {\n    return \"invalid characters in fileName: \" + fileName;\n  }\n  if (/^[a-zA-Z]:/.test(fileName) || /^\\//.test(fileName)) {\n    return \"absolute path: \" + fileName;\n  }\n  if (fileName.split(\"/\").indexOf(\"..\") !== -1) {\n    return \"invalid relative path: \" + fileName;\n  }\n  // all good\n  return null;\n}\nfunction readAndAssertNoEof(reader, buffer, offset, length, position, callback) {\n  if (length === 0) {\n    // fs.read will throw an out-of-bounds error if you try to read 0 bytes from a 0 byte file\n    return setImmediate(function () {\n      callback(null, newBuffer(0));\n    });\n  }\n  reader.read(buffer, offset, length, position, function (err, bytesRead) {\n    if (err) return callback(err);\n    if (bytesRead < length) {\n      return callback(new Error(\"unexpected EOF\"));\n    }\n    callback();\n  });\n}\nutil.inherits(AssertByteCountStream, Transform);\nfunction AssertByteCountStream(byteCount) {\n  Transform.call(this);\n  this.actualByteCount = 0;\n  this.expectedByteCount = byteCount;\n}\nAssertByteCountStream.prototype._transform = function (chunk, encoding, cb) {\n  this.actualByteCount += chunk.length;\n  if (this.actualByteCount > this.expectedByteCount) {\n    var msg = \"too many bytes in the stream. expected \" + this.expectedByteCount + \". got at least \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb(null, chunk);\n};\nAssertByteCountStream.prototype._flush = function (cb) {\n  if (this.actualByteCount < this.expectedByteCount) {\n    var msg = \"not enough bytes in the stream. expected \" + this.expectedByteCount + \". got only \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb();\n};\nutil.inherits(RandomAccessReader, EventEmitter);\nfunction RandomAccessReader() {\n  EventEmitter.call(this);\n  this.refCount = 0;\n}\nRandomAccessReader.prototype.ref = function () {\n  this.refCount += 1;\n};\nRandomAccessReader.prototype.unref = function () {\n  var self = this;\n  self.refCount -= 1;\n  if (self.refCount > 0) return;\n  if (self.refCount < 0) throw new Error(\"invalid unref\");\n  self.close(onCloseDone);\n  function onCloseDone(err) {\n    if (err) return self.emit('error', err);\n    self.emit('close');\n  }\n};\nRandomAccessReader.prototype.createReadStream = function (options) {\n  var start = options.start;\n  var end = options.end;\n  if (start === end) {\n    var emptyStream = new PassThrough();\n    setImmediate(function () {\n      emptyStream.end();\n    });\n    return emptyStream;\n  }\n  var stream = this._readStreamForRange(start, end);\n  var destroyed = false;\n  var refUnrefFilter = new RefUnrefFilter(this);\n  stream.on(\"error\", function (err) {\n    setImmediate(function () {\n      if (!destroyed) refUnrefFilter.emit(\"error\", err);\n    });\n  });\n  refUnrefFilter.destroy = function () {\n    stream.unpipe(refUnrefFilter);\n    refUnrefFilter.unref();\n    stream.destroy();\n  };\n  var byteCounter = new AssertByteCountStream(end - start);\n  refUnrefFilter.on(\"error\", function (err) {\n    setImmediate(function () {\n      if (!destroyed) byteCounter.emit(\"error\", err);\n    });\n  });\n  byteCounter.destroy = function () {\n    destroyed = true;\n    refUnrefFilter.unpipe(byteCounter);\n    refUnrefFilter.destroy();\n  };\n  return stream.pipe(refUnrefFilter).pipe(byteCounter);\n};\nRandomAccessReader.prototype._readStreamForRange = function (start, end) {\n  throw new Error(\"not implemented\");\n};\nRandomAccessReader.prototype.read = function (buffer, offset, length, position, callback) {\n  var readStream = this.createReadStream({\n    start: position,\n    end: position + length\n  });\n  var writeStream = new Writable();\n  var written = 0;\n  writeStream._write = function (chunk, encoding, cb) {\n    chunk.copy(buffer, offset + written, 0, chunk.length);\n    written += chunk.length;\n    cb();\n  };\n  writeStream.on(\"finish\", callback);\n  readStream.on(\"error\", function (error) {\n    callback(error);\n  });\n  readStream.pipe(writeStream);\n};\nRandomAccessReader.prototype.close = function (callback) {\n  setImmediate(callback);\n};\nutil.inherits(RefUnrefFilter, PassThrough);\nfunction RefUnrefFilter(context) {\n  PassThrough.call(this);\n  this.context = context;\n  this.context.ref();\n  this.unreffedYet = false;\n}\nRefUnrefFilter.prototype._flush = function (cb) {\n  this.unref();\n  cb();\n};\nRefUnrefFilter.prototype.unref = function (cb) {\n  if (this.unreffedYet) return;\n  this.unreffedYet = true;\n  this.context.unref();\n};\nvar cp437 = '\\u0000☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ';\nfunction decodeBuffer(buffer, start, end, isUtf8) {\n  if (isUtf8) {\n    return buffer.toString(\"utf8\", start, end);\n  } else {\n    var result = \"\";\n    for (var i = start; i < end; i++) {\n      result += cp437[buffer[i]];\n    }\n    return result;\n  }\n}\nfunction readUInt64LE(buffer, offset) {\n  // there is no native function for this, because we can't actually store 64-bit integers precisely.\n  // after 53 bits, JavaScript's Number type (IEEE 754 double) can't store individual integers anymore.\n  // but since 53 bits is a whole lot more than 32 bits, we do our best anyway.\n  var lower32 = buffer.readUInt32LE(offset);\n  var upper32 = buffer.readUInt32LE(offset + 4);\n  // we can't use bitshifting here, because JavaScript bitshifting only works on 32-bit integers.\n  return upper32 * 0x100000000 + lower32;\n  // as long as we're bounds checking the result of this function against the total file size,\n  // we'll catch any overflow errors, because we already made sure the total file size was within reason.\n}\n\n// Node 10 deprecated new Buffer().\nvar newBuffer;\nif (typeof Buffer.allocUnsafe === \"function\") {\n  newBuffer = function (len) {\n    return Buffer.allocUnsafe(len);\n  };\n} else {\n  newBuffer = function (len) {\n    return new Buffer(len);\n  };\n}\nfunction defaultCallback(err) {\n  if (err) throw err;\n}","map":{"version":3,"names":["fs","require","zlib","fd_slicer","crc32","util","EventEmitter","Transform","PassThrough","Writable","exports","open","fromFd","fromBuffer","fromRandomAccessReader","dosDateTimeToDate","validateFileName","ZipFile","Entry","RandomAccessReader","path","options","callback","autoClose","lazyEntries","decodeStrings","validateEntrySizes","strictFileNames","defaultCallback","err","fd","zipfile","close","fstat","stats","reader","createFromFd","size","buffer","createFromBuffer","maxChunkSize","length","totalSize","Error","Number","MAX_SAFE_INTEGER","ref","eocdrWithoutCommentSize","maxCommentSize","bufferSize","Math","min","newBuffer","bufferReadStart","readAndAssertNoEof","i","readUInt32LE","eocdrBuffer","slice","diskNumber","readUInt16LE","entryCount","centralDirectoryOffset","commentLength","expectedCommentLength","comment","decodeBuffer","zip64EocdlBuffer","zip64EocdlOffset","zip64EocdrOffset","readUInt64LE","zip64EocdrBuffer","inherits","fileSize","self","call","on","emitError","once","emit","readEntryCursor","entriesRead","isOpen","emittedError","_readEntry","prototype","unref","emitErrorAndAutoClose","readEntry","setImmediate","entry","signature","toString","versionMadeBy","versionNeededToExtract","generalPurposeBitFlag","compressionMethod","lastModFileTime","lastModFileDate","compressedSize","uncompressedSize","fileNameLength","extraFieldLength","fileCommentLength","internalFileAttributes","externalFileAttributes","relativeOffsetOfLocalHeader","isUtf8","fileName","fileCommentStart","extraFieldBuffer","extraFields","headerId","dataSize","dataStart","dataEnd","dataBuffer","copy","push","id","data","fileComment","zip64EiefBuffer","extraField","index","readUInt8","oldNameCrc32","unsigned","expectedCompressedSize","isEncrypted","msg","replace","errorMessage","validateFileNameOptions","openReadStream","relativeStart","relativeEnd","decrypt","isCompressed","decompress","start","end","localFileHeaderEnd","fileDataStart","fileDataEnd","readStream","createReadStream","endpointStream","destroyed","inflateFilter","createInflateRaw","pipe","AssertByteCountStream","destroy","unpipe","getLastModDate","date","time","day","month","year","millisecond","second","minute","hour","Date","indexOf","test","split","offset","position","read","bytesRead","byteCount","actualByteCount","expectedByteCount","_transform","chunk","encoding","cb","_flush","refCount","onCloseDone","emptyStream","stream","_readStreamForRange","refUnrefFilter","RefUnrefFilter","byteCounter","writeStream","written","_write","error","context","unreffedYet","cp437","result","lower32","upper32","Buffer","allocUnsafe","len"],"sources":["D:/Julieth-Campos/PSO/node_modules/yauzl/index.js"],"sourcesContent":["var fs = require(\"fs\");\nvar zlib = require(\"zlib\");\nvar fd_slicer = require(\"fd-slicer\");\nvar crc32 = require(\"buffer-crc32\");\nvar util = require(\"util\");\nvar EventEmitter = require(\"events\").EventEmitter;\nvar Transform = require(\"stream\").Transform;\nvar PassThrough = require(\"stream\").PassThrough;\nvar Writable = require(\"stream\").Writable;\n\nexports.open = open;\nexports.fromFd = fromFd;\nexports.fromBuffer = fromBuffer;\nexports.fromRandomAccessReader = fromRandomAccessReader;\nexports.dosDateTimeToDate = dosDateTimeToDate;\nexports.validateFileName = validateFileName;\nexports.ZipFile = ZipFile;\nexports.Entry = Entry;\nexports.RandomAccessReader = RandomAccessReader;\n\nfunction open(path, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.open(path, \"r\", function(err, fd) {\n    if (err) return callback(err);\n    fromFd(fd, options, function(err, zipfile) {\n      if (err) fs.close(fd, defaultCallback);\n      callback(err, zipfile);\n    });\n  });\n}\n\nfunction fromFd(fd, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  fs.fstat(fd, function(err, stats) {\n    if (err) return callback(err);\n    var reader = fd_slicer.createFromFd(fd, {autoClose: true});\n    fromRandomAccessReader(reader, stats.size, options, callback);\n  });\n}\n\nfunction fromBuffer(buffer, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  options.autoClose = false;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  // limit the max chunk size. see https://github.com/thejoshwolfe/yauzl/issues/87\n  var reader = fd_slicer.createFromBuffer(buffer, {maxChunkSize: 0x10000});\n  fromRandomAccessReader(reader, buffer.length, options, callback);\n}\n\nfunction fromRandomAccessReader(reader, totalSize, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = null;\n  }\n  if (options == null) options = {};\n  if (options.autoClose == null) options.autoClose = true;\n  if (options.lazyEntries == null) options.lazyEntries = false;\n  if (options.decodeStrings == null) options.decodeStrings = true;\n  var decodeStrings = !!options.decodeStrings;\n  if (options.validateEntrySizes == null) options.validateEntrySizes = true;\n  if (options.strictFileNames == null) options.strictFileNames = false;\n  if (callback == null) callback = defaultCallback;\n  if (typeof totalSize !== \"number\") throw new Error(\"expected totalSize parameter to be a number\");\n  if (totalSize > Number.MAX_SAFE_INTEGER) {\n    throw new Error(\"zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.\");\n  }\n\n  // the matching unref() call is in zipfile.close()\n  reader.ref();\n\n  // eocdr means End of Central Directory Record.\n  // search backwards for the eocdr signature.\n  // the last field of the eocdr is a variable-length comment.\n  // the comment size is encoded in a 2-byte field in the eocdr, which we can't find without trudging backwards through the comment to find it.\n  // as a consequence of this design decision, it's possible to have ambiguous zip file metadata if a coherent eocdr was in the comment.\n  // we search backwards for a eocdr signature, and hope that whoever made the zip file was smart enough to forbid the eocdr signature in the comment.\n  var eocdrWithoutCommentSize = 22;\n  var maxCommentSize = 0xffff; // 2-byte size\n  var bufferSize = Math.min(eocdrWithoutCommentSize + maxCommentSize, totalSize);\n  var buffer = newBuffer(bufferSize);\n  var bufferReadStart = totalSize - buffer.length;\n  readAndAssertNoEof(reader, buffer, 0, bufferSize, bufferReadStart, function(err) {\n    if (err) return callback(err);\n    for (var i = bufferSize - eocdrWithoutCommentSize; i >= 0; i -= 1) {\n      if (buffer.readUInt32LE(i) !== 0x06054b50) continue;\n      // found eocdr\n      var eocdrBuffer = buffer.slice(i);\n\n      // 0 - End of central directory signature = 0x06054b50\n      // 4 - Number of this disk\n      var diskNumber = eocdrBuffer.readUInt16LE(4);\n      if (diskNumber !== 0) {\n        return callback(new Error(\"multi-disk zip files are not supported: found disk number: \" + diskNumber));\n      }\n      // 6 - Disk where central directory starts\n      // 8 - Number of central directory records on this disk\n      // 10 - Total number of central directory records\n      var entryCount = eocdrBuffer.readUInt16LE(10);\n      // 12 - Size of central directory (bytes)\n      // 16 - Offset of start of central directory, relative to start of archive\n      var centralDirectoryOffset = eocdrBuffer.readUInt32LE(16);\n      // 20 - Comment length\n      var commentLength = eocdrBuffer.readUInt16LE(20);\n      var expectedCommentLength = eocdrBuffer.length - eocdrWithoutCommentSize;\n      if (commentLength !== expectedCommentLength) {\n        return callback(new Error(\"invalid comment length. expected: \" + expectedCommentLength + \". found: \" + commentLength));\n      }\n      // 22 - Comment\n      // the encoding is always cp437.\n      var comment = decodeStrings ? decodeBuffer(eocdrBuffer, 22, eocdrBuffer.length, false)\n                                  : eocdrBuffer.slice(22);\n\n      if (!(entryCount === 0xffff || centralDirectoryOffset === 0xffffffff)) {\n        return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n      }\n\n      // ZIP64 format\n\n      // ZIP64 Zip64 end of central directory locator\n      var zip64EocdlBuffer = newBuffer(20);\n      var zip64EocdlOffset = bufferReadStart + i - zip64EocdlBuffer.length;\n      readAndAssertNoEof(reader, zip64EocdlBuffer, 0, zip64EocdlBuffer.length, zip64EocdlOffset, function(err) {\n        if (err) return callback(err);\n\n        // 0 - zip64 end of central dir locator signature = 0x07064b50\n        if (zip64EocdlBuffer.readUInt32LE(0) !== 0x07064b50) {\n          return callback(new Error(\"invalid zip64 end of central directory locator signature\"));\n        }\n        // 4 - number of the disk with the start of the zip64 end of central directory\n        // 8 - relative offset of the zip64 end of central directory record\n        var zip64EocdrOffset = readUInt64LE(zip64EocdlBuffer, 8);\n        // 16 - total number of disks\n\n        // ZIP64 end of central directory record\n        var zip64EocdrBuffer = newBuffer(56);\n        readAndAssertNoEof(reader, zip64EocdrBuffer, 0, zip64EocdrBuffer.length, zip64EocdrOffset, function(err) {\n          if (err) return callback(err);\n\n          // 0 - zip64 end of central dir signature                           4 bytes  (0x06064b50)\n          if (zip64EocdrBuffer.readUInt32LE(0) !== 0x06064b50) {\n            return callback(new Error(\"invalid zip64 end of central directory record signature\"));\n          }\n          // 4 - size of zip64 end of central directory record                8 bytes\n          // 12 - version made by                                             2 bytes\n          // 14 - version needed to extract                                   2 bytes\n          // 16 - number of this disk                                         4 bytes\n          // 20 - number of the disk with the start of the central directory  4 bytes\n          // 24 - total number of entries in the central directory on this disk         8 bytes\n          // 32 - total number of entries in the central directory            8 bytes\n          entryCount = readUInt64LE(zip64EocdrBuffer, 32);\n          // 40 - size of the central directory                               8 bytes\n          // 48 - offset of start of central directory with respect to the starting disk number     8 bytes\n          centralDirectoryOffset = readUInt64LE(zip64EocdrBuffer, 48);\n          // 56 - zip64 extensible data sector                                (variable size)\n          return callback(null, new ZipFile(reader, centralDirectoryOffset, totalSize, entryCount, comment, options.autoClose, options.lazyEntries, decodeStrings, options.validateEntrySizes, options.strictFileNames));\n        });\n      });\n      return;\n    }\n    callback(new Error(\"end of central directory record signature not found\"));\n  });\n}\n\nutil.inherits(ZipFile, EventEmitter);\nfunction ZipFile(reader, centralDirectoryOffset, fileSize, entryCount, comment, autoClose, lazyEntries, decodeStrings, validateEntrySizes, strictFileNames) {\n  var self = this;\n  EventEmitter.call(self);\n  self.reader = reader;\n  // forward close events\n  self.reader.on(\"error\", function(err) {\n    // error closing the fd\n    emitError(self, err);\n  });\n  self.reader.once(\"close\", function() {\n    self.emit(\"close\");\n  });\n  self.readEntryCursor = centralDirectoryOffset;\n  self.fileSize = fileSize;\n  self.entryCount = entryCount;\n  self.comment = comment;\n  self.entriesRead = 0;\n  self.autoClose = !!autoClose;\n  self.lazyEntries = !!lazyEntries;\n  self.decodeStrings = !!decodeStrings;\n  self.validateEntrySizes = !!validateEntrySizes;\n  self.strictFileNames = !!strictFileNames;\n  self.isOpen = true;\n  self.emittedError = false;\n\n  if (!self.lazyEntries) self._readEntry();\n}\nZipFile.prototype.close = function() {\n  if (!this.isOpen) return;\n  this.isOpen = false;\n  this.reader.unref();\n};\n\nfunction emitErrorAndAutoClose(self, err) {\n  if (self.autoClose) self.close();\n  emitError(self, err);\n}\nfunction emitError(self, err) {\n  if (self.emittedError) return;\n  self.emittedError = true;\n  self.emit(\"error\", err);\n}\n\nZipFile.prototype.readEntry = function() {\n  if (!this.lazyEntries) throw new Error(\"readEntry() called without lazyEntries:true\");\n  this._readEntry();\n};\nZipFile.prototype._readEntry = function() {\n  var self = this;\n  if (self.entryCount === self.entriesRead) {\n    // done with metadata\n    setImmediate(function() {\n      if (self.autoClose) self.close();\n      if (self.emittedError) return;\n      self.emit(\"end\");\n    });\n    return;\n  }\n  if (self.emittedError) return;\n  var buffer = newBuffer(46);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function(err) {\n    if (err) return emitErrorAndAutoClose(self, err);\n    if (self.emittedError) return;\n    var entry = new Entry();\n    // 0 - Central directory file header signature\n    var signature = buffer.readUInt32LE(0);\n    if (signature !== 0x02014b50) return emitErrorAndAutoClose(self, new Error(\"invalid central directory file header signature: 0x\" + signature.toString(16)));\n    // 4 - Version made by\n    entry.versionMadeBy = buffer.readUInt16LE(4);\n    // 6 - Version needed to extract (minimum)\n    entry.versionNeededToExtract = buffer.readUInt16LE(6);\n    // 8 - General purpose bit flag\n    entry.generalPurposeBitFlag = buffer.readUInt16LE(8);\n    // 10 - Compression method\n    entry.compressionMethod = buffer.readUInt16LE(10);\n    // 12 - File last modification time\n    entry.lastModFileTime = buffer.readUInt16LE(12);\n    // 14 - File last modification date\n    entry.lastModFileDate = buffer.readUInt16LE(14);\n    // 16 - CRC-32\n    entry.crc32 = buffer.readUInt32LE(16);\n    // 20 - Compressed size\n    entry.compressedSize = buffer.readUInt32LE(20);\n    // 24 - Uncompressed size\n    entry.uncompressedSize = buffer.readUInt32LE(24);\n    // 28 - File name length (n)\n    entry.fileNameLength = buffer.readUInt16LE(28);\n    // 30 - Extra field length (m)\n    entry.extraFieldLength = buffer.readUInt16LE(30);\n    // 32 - File comment length (k)\n    entry.fileCommentLength = buffer.readUInt16LE(32);\n    // 34 - Disk number where file starts\n    // 36 - Internal file attributes\n    entry.internalFileAttributes = buffer.readUInt16LE(36);\n    // 38 - External file attributes\n    entry.externalFileAttributes = buffer.readUInt32LE(38);\n    // 42 - Relative offset of local file header\n    entry.relativeOffsetOfLocalHeader = buffer.readUInt32LE(42);\n\n    if (entry.generalPurposeBitFlag & 0x40) return emitErrorAndAutoClose(self, new Error(\"strong encryption is not supported\"));\n\n    self.readEntryCursor += 46;\n\n    buffer = newBuffer(entry.fileNameLength + entry.extraFieldLength + entry.fileCommentLength);\n    readAndAssertNoEof(self.reader, buffer, 0, buffer.length, self.readEntryCursor, function(err) {\n      if (err) return emitErrorAndAutoClose(self, err);\n      if (self.emittedError) return;\n      // 46 - File name\n      var isUtf8 = (entry.generalPurposeBitFlag & 0x800) !== 0;\n      entry.fileName = self.decodeStrings ? decodeBuffer(buffer, 0, entry.fileNameLength, isUtf8)\n                                          : buffer.slice(0, entry.fileNameLength);\n\n      // 46+n - Extra field\n      var fileCommentStart = entry.fileNameLength + entry.extraFieldLength;\n      var extraFieldBuffer = buffer.slice(entry.fileNameLength, fileCommentStart);\n      entry.extraFields = [];\n      var i = 0;\n      while (i < extraFieldBuffer.length - 3) {\n        var headerId = extraFieldBuffer.readUInt16LE(i + 0);\n        var dataSize = extraFieldBuffer.readUInt16LE(i + 2);\n        var dataStart = i + 4;\n        var dataEnd = dataStart + dataSize;\n        if (dataEnd > extraFieldBuffer.length) return emitErrorAndAutoClose(self, new Error(\"extra field length exceeds extra field buffer size\"));\n        var dataBuffer = newBuffer(dataSize);\n        extraFieldBuffer.copy(dataBuffer, 0, dataStart, dataEnd);\n        entry.extraFields.push({\n          id: headerId,\n          data: dataBuffer,\n        });\n        i = dataEnd;\n      }\n\n      // 46+n+m - File comment\n      entry.fileComment = self.decodeStrings ? decodeBuffer(buffer, fileCommentStart, fileCommentStart + entry.fileCommentLength, isUtf8)\n                                             : buffer.slice(fileCommentStart, fileCommentStart + entry.fileCommentLength);\n      // compatibility hack for https://github.com/thejoshwolfe/yauzl/issues/47\n      entry.comment = entry.fileComment;\n\n      self.readEntryCursor += buffer.length;\n      self.entriesRead += 1;\n\n      if (entry.uncompressedSize            === 0xffffffff ||\n          entry.compressedSize              === 0xffffffff ||\n          entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n        // ZIP64 format\n        // find the Zip64 Extended Information Extra Field\n        var zip64EiefBuffer = null;\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x0001) {\n            zip64EiefBuffer = extraField.data;\n            break;\n          }\n        }\n        if (zip64EiefBuffer == null) {\n          return emitErrorAndAutoClose(self, new Error(\"expected zip64 extended information extra field\"));\n        }\n        var index = 0;\n        // 0 - Original Size          8 bytes\n        if (entry.uncompressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include uncompressed size\"));\n          }\n          entry.uncompressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 8 - Compressed Size        8 bytes\n        if (entry.compressedSize === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include compressed size\"));\n          }\n          entry.compressedSize = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 16 - Relative Header Offset 8 bytes\n        if (entry.relativeOffsetOfLocalHeader === 0xffffffff) {\n          if (index + 8 > zip64EiefBuffer.length) {\n            return emitErrorAndAutoClose(self, new Error(\"zip64 extended information extra field does not include relative header offset\"));\n          }\n          entry.relativeOffsetOfLocalHeader = readUInt64LE(zip64EiefBuffer, index);\n          index += 8;\n        }\n        // 24 - Disk Start Number      4 bytes\n      }\n\n      // check for Info-ZIP Unicode Path Extra Field (0x7075)\n      // see https://github.com/thejoshwolfe/yauzl/issues/33\n      if (self.decodeStrings) {\n        for (var i = 0; i < entry.extraFields.length; i++) {\n          var extraField = entry.extraFields[i];\n          if (extraField.id === 0x7075) {\n            if (extraField.data.length < 6) {\n              // too short to be meaningful\n              continue;\n            }\n            // Version       1 byte      version of this extra field, currently 1\n            if (extraField.data.readUInt8(0) !== 1) {\n              // > Changes may not be backward compatible so this extra\n              // > field should not be used if the version is not recognized.\n              continue;\n            }\n            // NameCRC32     4 bytes     File Name Field CRC32 Checksum\n            var oldNameCrc32 = extraField.data.readUInt32LE(1);\n            if (crc32.unsigned(buffer.slice(0, entry.fileNameLength)) !== oldNameCrc32) {\n              // > If the CRC check fails, this UTF-8 Path Extra Field should be\n              // > ignored and the File Name field in the header should be used instead.\n              continue;\n            }\n            // UnicodeName   Variable    UTF-8 version of the entry File Name\n            entry.fileName = decodeBuffer(extraField.data, 5, extraField.data.length, true);\n            break;\n          }\n        }\n      }\n\n      // validate file size\n      if (self.validateEntrySizes && entry.compressionMethod === 0) {\n        var expectedCompressedSize = entry.uncompressedSize;\n        if (entry.isEncrypted()) {\n          // traditional encryption prefixes the file data with a header\n          expectedCompressedSize += 12;\n        }\n        if (entry.compressedSize !== expectedCompressedSize) {\n          var msg = \"compressed/uncompressed size mismatch for stored file: \" + entry.compressedSize + \" != \" + entry.uncompressedSize;\n          return emitErrorAndAutoClose(self, new Error(msg));\n        }\n      }\n\n      if (self.decodeStrings) {\n        if (!self.strictFileNames) {\n          // allow backslash\n          entry.fileName = entry.fileName.replace(/\\\\/g, \"/\");\n        }\n        var errorMessage = validateFileName(entry.fileName, self.validateFileNameOptions);\n        if (errorMessage != null) return emitErrorAndAutoClose(self, new Error(errorMessage));\n      }\n      self.emit(\"entry\", entry);\n\n      if (!self.lazyEntries) self._readEntry();\n    });\n  });\n};\n\nZipFile.prototype.openReadStream = function(entry, options, callback) {\n  var self = this;\n  // parameter validation\n  var relativeStart = 0;\n  var relativeEnd = entry.compressedSize;\n  if (callback == null) {\n    callback = options;\n    options = {};\n  } else {\n    // validate options that the caller has no excuse to get wrong\n    if (options.decrypt != null) {\n      if (!entry.isEncrypted()) {\n        throw new Error(\"options.decrypt can only be specified for encrypted entries\");\n      }\n      if (options.decrypt !== false) throw new Error(\"invalid options.decrypt value: \" + options.decrypt);\n      if (entry.isCompressed()) {\n        if (options.decompress !== false) throw new Error(\"entry is encrypted and compressed, and options.decompress !== false\");\n      }\n    }\n    if (options.decompress != null) {\n      if (!entry.isCompressed()) {\n        throw new Error(\"options.decompress can only be specified for compressed entries\");\n      }\n      if (!(options.decompress === false || options.decompress === true)) {\n        throw new Error(\"invalid options.decompress value: \" + options.decompress);\n      }\n    }\n    if (options.start != null || options.end != null) {\n      if (entry.isCompressed() && options.decompress !== false) {\n        throw new Error(\"start/end range not allowed for compressed entry without options.decompress === false\");\n      }\n      if (entry.isEncrypted() && options.decrypt !== false) {\n        throw new Error(\"start/end range not allowed for encrypted entry without options.decrypt === false\");\n      }\n    }\n    if (options.start != null) {\n      relativeStart = options.start;\n      if (relativeStart < 0) throw new Error(\"options.start < 0\");\n      if (relativeStart > entry.compressedSize) throw new Error(\"options.start > entry.compressedSize\");\n    }\n    if (options.end != null) {\n      relativeEnd = options.end;\n      if (relativeEnd < 0) throw new Error(\"options.end < 0\");\n      if (relativeEnd > entry.compressedSize) throw new Error(\"options.end > entry.compressedSize\");\n      if (relativeEnd < relativeStart) throw new Error(\"options.end < options.start\");\n    }\n  }\n  // any further errors can either be caused by the zipfile,\n  // or were introduced in a minor version of yauzl,\n  // so should be passed to the client rather than thrown.\n  if (!self.isOpen) return callback(new Error(\"closed\"));\n  if (entry.isEncrypted()) {\n    if (options.decrypt !== false) return callback(new Error(\"entry is encrypted, and options.decrypt !== false\"));\n  }\n  // make sure we don't lose the fd before we open the actual read stream\n  self.reader.ref();\n  var buffer = newBuffer(30);\n  readAndAssertNoEof(self.reader, buffer, 0, buffer.length, entry.relativeOffsetOfLocalHeader, function(err) {\n    try {\n      if (err) return callback(err);\n      // 0 - Local file header signature = 0x04034b50\n      var signature = buffer.readUInt32LE(0);\n      if (signature !== 0x04034b50) {\n        return callback(new Error(\"invalid local file header signature: 0x\" + signature.toString(16)));\n      }\n      // all this should be redundant\n      // 4 - Version needed to extract (minimum)\n      // 6 - General purpose bit flag\n      // 8 - Compression method\n      // 10 - File last modification time\n      // 12 - File last modification date\n      // 14 - CRC-32\n      // 18 - Compressed size\n      // 22 - Uncompressed size\n      // 26 - File name length (n)\n      var fileNameLength = buffer.readUInt16LE(26);\n      // 28 - Extra field length (m)\n      var extraFieldLength = buffer.readUInt16LE(28);\n      // 30 - File name\n      // 30+n - Extra field\n      var localFileHeaderEnd = entry.relativeOffsetOfLocalHeader + buffer.length + fileNameLength + extraFieldLength;\n      var decompress;\n      if (entry.compressionMethod === 0) {\n        // 0 - The file is stored (no compression)\n        decompress = false;\n      } else if (entry.compressionMethod === 8) {\n        // 8 - The file is Deflated\n        decompress = options.decompress != null ? options.decompress : true;\n      } else {\n        return callback(new Error(\"unsupported compression method: \" + entry.compressionMethod));\n      }\n      var fileDataStart = localFileHeaderEnd;\n      var fileDataEnd = fileDataStart + entry.compressedSize;\n      if (entry.compressedSize !== 0) {\n        // bounds check now, because the read streams will probably not complain loud enough.\n        // since we're dealing with an unsigned offset plus an unsigned size,\n        // we only have 1 thing to check for.\n        if (fileDataEnd > self.fileSize) {\n          return callback(new Error(\"file data overflows file bounds: \" +\n              fileDataStart + \" + \" + entry.compressedSize + \" > \" + self.fileSize));\n        }\n      }\n      var readStream = self.reader.createReadStream({\n        start: fileDataStart + relativeStart,\n        end: fileDataStart + relativeEnd,\n      });\n      var endpointStream = readStream;\n      if (decompress) {\n        var destroyed = false;\n        var inflateFilter = zlib.createInflateRaw();\n        readStream.on(\"error\", function(err) {\n          // setImmediate here because errors can be emitted during the first call to pipe()\n          setImmediate(function() {\n            if (!destroyed) inflateFilter.emit(\"error\", err);\n          });\n        });\n        readStream.pipe(inflateFilter);\n\n        if (self.validateEntrySizes) {\n          endpointStream = new AssertByteCountStream(entry.uncompressedSize);\n          inflateFilter.on(\"error\", function(err) {\n            // forward zlib errors to the client-visible stream\n            setImmediate(function() {\n              if (!destroyed) endpointStream.emit(\"error\", err);\n            });\n          });\n          inflateFilter.pipe(endpointStream);\n        } else {\n          // the zlib filter is the client-visible stream\n          endpointStream = inflateFilter;\n        }\n        // this is part of yauzl's API, so implement this function on the client-visible stream\n        endpointStream.destroy = function() {\n          destroyed = true;\n          if (inflateFilter !== endpointStream) inflateFilter.unpipe(endpointStream);\n          readStream.unpipe(inflateFilter);\n          // TODO: the inflateFilter may cause a memory leak. see Issue #27.\n          readStream.destroy();\n        };\n      }\n      callback(null, endpointStream);\n    } finally {\n      self.reader.unref();\n    }\n  });\n};\n\nfunction Entry() {\n}\nEntry.prototype.getLastModDate = function() {\n  return dosDateTimeToDate(this.lastModFileDate, this.lastModFileTime);\n};\nEntry.prototype.isEncrypted = function() {\n  return (this.generalPurposeBitFlag & 0x1) !== 0;\n};\nEntry.prototype.isCompressed = function() {\n  return this.compressionMethod === 8;\n};\n\nfunction dosDateTimeToDate(date, time) {\n  var day = date & 0x1f; // 1-31\n  var month = (date >> 5 & 0xf) - 1; // 1-12, 0-11\n  var year = (date >> 9 & 0x7f) + 1980; // 0-128, 1980-2108\n\n  var millisecond = 0;\n  var second = (time & 0x1f) * 2; // 0-29, 0-58 (even numbers)\n  var minute = time >> 5 & 0x3f; // 0-59\n  var hour = time >> 11 & 0x1f; // 0-23\n\n  return new Date(year, month, day, hour, minute, second, millisecond);\n}\n\nfunction validateFileName(fileName) {\n  if (fileName.indexOf(\"\\\\\") !== -1) {\n    return \"invalid characters in fileName: \" + fileName;\n  }\n  if (/^[a-zA-Z]:/.test(fileName) || /^\\//.test(fileName)) {\n    return \"absolute path: \" + fileName;\n  }\n  if (fileName.split(\"/\").indexOf(\"..\") !== -1) {\n    return \"invalid relative path: \" + fileName;\n  }\n  // all good\n  return null;\n}\n\nfunction readAndAssertNoEof(reader, buffer, offset, length, position, callback) {\n  if (length === 0) {\n    // fs.read will throw an out-of-bounds error if you try to read 0 bytes from a 0 byte file\n    return setImmediate(function() { callback(null, newBuffer(0)); });\n  }\n  reader.read(buffer, offset, length, position, function(err, bytesRead) {\n    if (err) return callback(err);\n    if (bytesRead < length) {\n      return callback(new Error(\"unexpected EOF\"));\n    }\n    callback();\n  });\n}\n\nutil.inherits(AssertByteCountStream, Transform);\nfunction AssertByteCountStream(byteCount) {\n  Transform.call(this);\n  this.actualByteCount = 0;\n  this.expectedByteCount = byteCount;\n}\nAssertByteCountStream.prototype._transform = function(chunk, encoding, cb) {\n  this.actualByteCount += chunk.length;\n  if (this.actualByteCount > this.expectedByteCount) {\n    var msg = \"too many bytes in the stream. expected \" + this.expectedByteCount + \". got at least \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb(null, chunk);\n};\nAssertByteCountStream.prototype._flush = function(cb) {\n  if (this.actualByteCount < this.expectedByteCount) {\n    var msg = \"not enough bytes in the stream. expected \" + this.expectedByteCount + \". got only \" + this.actualByteCount;\n    return cb(new Error(msg));\n  }\n  cb();\n};\n\nutil.inherits(RandomAccessReader, EventEmitter);\nfunction RandomAccessReader() {\n  EventEmitter.call(this);\n  this.refCount = 0;\n}\nRandomAccessReader.prototype.ref = function() {\n  this.refCount += 1;\n};\nRandomAccessReader.prototype.unref = function() {\n  var self = this;\n  self.refCount -= 1;\n\n  if (self.refCount > 0) return;\n  if (self.refCount < 0) throw new Error(\"invalid unref\");\n\n  self.close(onCloseDone);\n\n  function onCloseDone(err) {\n    if (err) return self.emit('error', err);\n    self.emit('close');\n  }\n};\nRandomAccessReader.prototype.createReadStream = function(options) {\n  var start = options.start;\n  var end = options.end;\n  if (start === end) {\n    var emptyStream = new PassThrough();\n    setImmediate(function() {\n      emptyStream.end();\n    });\n    return emptyStream;\n  }\n  var stream = this._readStreamForRange(start, end);\n\n  var destroyed = false;\n  var refUnrefFilter = new RefUnrefFilter(this);\n  stream.on(\"error\", function(err) {\n    setImmediate(function() {\n      if (!destroyed) refUnrefFilter.emit(\"error\", err);\n    });\n  });\n  refUnrefFilter.destroy = function() {\n    stream.unpipe(refUnrefFilter);\n    refUnrefFilter.unref();\n    stream.destroy();\n  };\n\n  var byteCounter = new AssertByteCountStream(end - start);\n  refUnrefFilter.on(\"error\", function(err) {\n    setImmediate(function() {\n      if (!destroyed) byteCounter.emit(\"error\", err);\n    });\n  });\n  byteCounter.destroy = function() {\n    destroyed = true;\n    refUnrefFilter.unpipe(byteCounter);\n    refUnrefFilter.destroy();\n  };\n\n  return stream.pipe(refUnrefFilter).pipe(byteCounter);\n};\nRandomAccessReader.prototype._readStreamForRange = function(start, end) {\n  throw new Error(\"not implemented\");\n};\nRandomAccessReader.prototype.read = function(buffer, offset, length, position, callback) {\n  var readStream = this.createReadStream({start: position, end: position + length});\n  var writeStream = new Writable();\n  var written = 0;\n  writeStream._write = function(chunk, encoding, cb) {\n    chunk.copy(buffer, offset + written, 0, chunk.length);\n    written += chunk.length;\n    cb();\n  };\n  writeStream.on(\"finish\", callback);\n  readStream.on(\"error\", function(error) {\n    callback(error);\n  });\n  readStream.pipe(writeStream);\n};\nRandomAccessReader.prototype.close = function(callback) {\n  setImmediate(callback);\n};\n\nutil.inherits(RefUnrefFilter, PassThrough);\nfunction RefUnrefFilter(context) {\n  PassThrough.call(this);\n  this.context = context;\n  this.context.ref();\n  this.unreffedYet = false;\n}\nRefUnrefFilter.prototype._flush = function(cb) {\n  this.unref();\n  cb();\n};\nRefUnrefFilter.prototype.unref = function(cb) {\n  if (this.unreffedYet) return;\n  this.unreffedYet = true;\n  this.context.unref();\n};\n\nvar cp437 = '\\u0000☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ';\nfunction decodeBuffer(buffer, start, end, isUtf8) {\n  if (isUtf8) {\n    return buffer.toString(\"utf8\", start, end);\n  } else {\n    var result = \"\";\n    for (var i = start; i < end; i++) {\n      result += cp437[buffer[i]];\n    }\n    return result;\n  }\n}\n\nfunction readUInt64LE(buffer, offset) {\n  // there is no native function for this, because we can't actually store 64-bit integers precisely.\n  // after 53 bits, JavaScript's Number type (IEEE 754 double) can't store individual integers anymore.\n  // but since 53 bits is a whole lot more than 32 bits, we do our best anyway.\n  var lower32 = buffer.readUInt32LE(offset);\n  var upper32 = buffer.readUInt32LE(offset + 4);\n  // we can't use bitshifting here, because JavaScript bitshifting only works on 32-bit integers.\n  return upper32 * 0x100000000 + lower32;\n  // as long as we're bounds checking the result of this function against the total file size,\n  // we'll catch any overflow errors, because we already made sure the total file size was within reason.\n}\n\n// Node 10 deprecated new Buffer().\nvar newBuffer;\nif (typeof Buffer.allocUnsafe === \"function\") {\n  newBuffer = function(len) {\n    return Buffer.allocUnsafe(len);\n  };\n} else {\n  newBuffer = function(len) {\n    return new Buffer(len);\n  };\n}\n\nfunction defaultCallback(err) {\n  if (err) throw err;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}