{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LazyArg } from '../common/LazyArg.js';\nimport { scriptInjector } from '../common/ScriptInjector.js';\nimport { PuppeteerURL, SOURCE_URL_REGEX, createEvaluationError, getSourcePuppeteerURLIfAvailable, getSourceUrlComment, isString, valueFromRemoteObject } from '../common/util.js';\nimport { AsyncIterableUtil } from '../util/AsyncIterableUtil.js';\nimport { stringifyFunction } from '../util/Function.js';\nimport { ARIAQueryHandler } from './AriaQueryHandler.js';\nimport { Binding } from './Binding.js';\nimport { CdpElementHandle } from './ElementHandle.js';\nimport { CdpJSHandle } from './JSHandle.js';\n/**\n * @internal\n */\nexport class ExecutionContext {\n  _client;\n  _world;\n  _contextId;\n  _contextName;\n  constructor(client, contextPayload, world) {\n    this._client = client;\n    this._world = world;\n    this._contextId = contextPayload.id;\n    if (contextPayload.name) {\n      this._contextName = contextPayload.name;\n    }\n  }\n  #bindingsInstalled = false;\n  #puppeteerUtil;\n  get puppeteerUtil() {\n    let promise = Promise.resolve();\n    if (!this.#bindingsInstalled) {\n      promise = Promise.all([this.#installGlobalBinding(new Binding('__ariaQuerySelector', ARIAQueryHandler.queryOne)), this.#installGlobalBinding(new Binding('__ariaQuerySelectorAll', async (element, selector) => {\n        const results = ARIAQueryHandler.queryAll(element, selector);\n        return await element.realm.evaluateHandle(function () {\n          for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {\n            elements[_key] = arguments[_key];\n          }\n          return elements;\n        }, ...(await AsyncIterableUtil.collect(results)));\n      }))]);\n      this.#bindingsInstalled = true;\n    }\n    scriptInjector.inject(script => {\n      if (this.#puppeteerUtil) {\n        void this.#puppeteerUtil.then(handle => {\n          void handle.dispose();\n        });\n      }\n      this.#puppeteerUtil = promise.then(() => {\n        return this.evaluateHandle(script);\n      });\n    }, !this.#puppeteerUtil);\n    return this.#puppeteerUtil;\n  }\n  async #installGlobalBinding(binding) {\n    try {\n      if (this._world) {\n        this._world._bindings.set(binding.name, binding);\n        await this._world._addBindingToContext(this, binding.name);\n      }\n    } catch {\n      // If the binding cannot be added, then either the browser doesn't support\n      // bindings (e.g. Firefox) or the context is broken. Either breakage is\n      // okay, so we ignore the error.\n    }\n  }\n  /**\n   * Evaluates the given function.\n   *\n   * @example\n   *\n   * ```ts\n   * const executionContext = await page.mainFrame().executionContext();\n   * const result = await executionContext.evaluate(() => Promise.resolve(8 * 7))* ;\n   * console.log(result); // prints \"56\"\n   * ```\n   *\n   * @example\n   * A string can also be passed in instead of a function:\n   *\n   * ```ts\n   * console.log(await executionContext.evaluate('1 + 2')); // prints \"3\"\n   * ```\n   *\n   * @example\n   * Handles can also be passed as `args`. They resolve to their referenced object:\n   *\n   * ```ts\n   * const oneHandle = await executionContext.evaluateHandle(() => 1);\n   * const twoHandle = await executionContext.evaluateHandle(() => 2);\n   * const result = await executionContext.evaluate(\n   *   (a, b) => a + b,\n   *   oneHandle,\n   *   twoHandle\n   * );\n   * await oneHandle.dispose();\n   * await twoHandle.dispose();\n   * console.log(result); // prints '3'.\n   * ```\n   *\n   * @param pageFunction - The function to evaluate.\n   * @param args - Additional arguments to pass into the function.\n   * @returns The result of evaluating the function. If the result is an object,\n   * a vanilla object containing the serializable properties of the result is\n   * returned.\n   */\n  async evaluate(pageFunction) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    return await this.#evaluate(true, pageFunction, ...args);\n  }\n  /**\n   * Evaluates the given function.\n   *\n   * Unlike {@link ExecutionContext.evaluate | evaluate}, this method returns a\n   * handle to the result of the function.\n   *\n   * This method may be better suited if the object cannot be serialized (e.g.\n   * `Map`) and requires further manipulation.\n   *\n   * @example\n   *\n   * ```ts\n   * const context = await page.mainFrame().executionContext();\n   * const handle: JSHandle<typeof globalThis> = await context.evaluateHandle(\n   *   () => Promise.resolve(self)\n   * );\n   * ```\n   *\n   * @example\n   * A string can also be passed in instead of a function.\n   *\n   * ```ts\n   * const handle: JSHandle<number> = await context.evaluateHandle('1 + 2');\n   * ```\n   *\n   * @example\n   * Handles can also be passed as `args`. They resolve to their referenced object:\n   *\n   * ```ts\n   * const bodyHandle: ElementHandle<HTMLBodyElement> =\n   *   await context.evaluateHandle(() => {\n   *     return document.body;\n   *   });\n   * const stringHandle: JSHandle<string> = await context.evaluateHandle(\n   *   body => body.innerHTML,\n   *   body\n   * );\n   * console.log(await stringHandle.jsonValue()); // prints body's innerHTML\n   * // Always dispose your garbage! :)\n   * await bodyHandle.dispose();\n   * await stringHandle.dispose();\n   * ```\n   *\n   * @param pageFunction - The function to evaluate.\n   * @param args - Additional arguments to pass into the function.\n   * @returns A {@link JSHandle | handle} to the result of evaluating the\n   * function. If the result is a `Node`, then this will return an\n   * {@link ElementHandle | element handle}.\n   */\n  async evaluateHandle(pageFunction) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    return await this.#evaluate(false, pageFunction, ...args);\n  }\n  async #evaluate(returnByValue, pageFunction) {\n    const sourceUrlComment = getSourceUrlComment(getSourcePuppeteerURLIfAvailable(pageFunction)?.toString() ?? PuppeteerURL.INTERNAL_URL);\n    if (isString(pageFunction)) {\n      const contextId = this._contextId;\n      const expression = pageFunction;\n      const expressionWithSourceUrl = SOURCE_URL_REGEX.test(expression) ? expression : `${expression}\\n${sourceUrlComment}\\n`;\n      const {\n        exceptionDetails,\n        result: remoteObject\n      } = await this._client.send('Runtime.evaluate', {\n        expression: expressionWithSourceUrl,\n        contextId,\n        returnByValue,\n        awaitPromise: true,\n        userGesture: true\n      }).catch(rewriteError);\n      if (exceptionDetails) {\n        throw createEvaluationError(exceptionDetails);\n      }\n      return returnByValue ? valueFromRemoteObject(remoteObject) : createCdpHandle(this._world, remoteObject);\n    }\n    const functionDeclaration = stringifyFunction(pageFunction);\n    const functionDeclarationWithSourceUrl = SOURCE_URL_REGEX.test(functionDeclaration) ? functionDeclaration : `${functionDeclaration}\\n${sourceUrlComment}\\n`;\n    let callFunctionOnPromise;\n    try {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n        args[_key4 - 2] = arguments[_key4];\n      }\n      callFunctionOnPromise = this._client.send('Runtime.callFunctionOn', {\n        functionDeclaration: functionDeclarationWithSourceUrl,\n        executionContextId: this._contextId,\n        arguments: await Promise.all(args.map(convertArgument.bind(this))),\n        returnByValue,\n        awaitPromise: true,\n        userGesture: true\n      });\n    } catch (error) {\n      if (error instanceof TypeError && error.message.startsWith('Converting circular structure to JSON')) {\n        error.message += ' Recursive objects are not allowed.';\n      }\n      throw error;\n    }\n    const {\n      exceptionDetails,\n      result: remoteObject\n    } = await callFunctionOnPromise.catch(rewriteError);\n    if (exceptionDetails) {\n      throw createEvaluationError(exceptionDetails);\n    }\n    return returnByValue ? valueFromRemoteObject(remoteObject) : createCdpHandle(this._world, remoteObject);\n    async function convertArgument(arg) {\n      if (arg instanceof LazyArg) {\n        arg = await arg.get(this);\n      }\n      if (typeof arg === 'bigint') {\n        // eslint-disable-line valid-typeof\n        return {\n          unserializableValue: `${arg.toString()}n`\n        };\n      }\n      if (Object.is(arg, -0)) {\n        return {\n          unserializableValue: '-0'\n        };\n      }\n      if (Object.is(arg, Infinity)) {\n        return {\n          unserializableValue: 'Infinity'\n        };\n      }\n      if (Object.is(arg, -Infinity)) {\n        return {\n          unserializableValue: '-Infinity'\n        };\n      }\n      if (Object.is(arg, NaN)) {\n        return {\n          unserializableValue: 'NaN'\n        };\n      }\n      const objectHandle = arg && (arg instanceof CdpJSHandle || arg instanceof CdpElementHandle) ? arg : null;\n      if (objectHandle) {\n        if (objectHandle.realm !== this._world) {\n          throw new Error('JSHandles can be evaluated only in the context they were created!');\n        }\n        if (objectHandle.disposed) {\n          throw new Error('JSHandle is disposed!');\n        }\n        if (objectHandle.remoteObject().unserializableValue) {\n          return {\n            unserializableValue: objectHandle.remoteObject().unserializableValue\n          };\n        }\n        if (!objectHandle.remoteObject().objectId) {\n          return {\n            value: objectHandle.remoteObject().value\n          };\n        }\n        return {\n          objectId: objectHandle.remoteObject().objectId\n        };\n      }\n      return {\n        value: arg\n      };\n    }\n  }\n}\nconst rewriteError = error => {\n  if (error.message.includes('Object reference chain is too long')) {\n    return {\n      result: {\n        type: 'undefined'\n      }\n    };\n  }\n  if (error.message.includes(\"Object couldn't be returned by value\")) {\n    return {\n      result: {\n        type: 'undefined'\n      }\n    };\n  }\n  if (error.message.endsWith('Cannot find context with specified id') || error.message.endsWith('Inspected target navigated or closed')) {\n    throw new Error('Execution context was destroyed, most likely because of a navigation.');\n  }\n  throw error;\n};\n/**\n * @internal\n */\nexport function createCdpHandle(realm, remoteObject) {\n  if (remoteObject.subtype === 'node') {\n    return new CdpElementHandle(realm, remoteObject);\n  }\n  return new CdpJSHandle(realm, remoteObject);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAqBA,SAAQA,OAAO,QAAO,sBAAsB;AAC5C,SAAQC,cAAc,QAAO,6BAA6B;AAE1D,SACEC,YAAY,EACZC,gBAAgB,EAChBC,qBAAqB,EACrBC,gCAAgC,EAChCC,mBAAmB,EACnBC,QAAQ,EACRC,qBAAqB,QAChB,mBAAmB;AAE1B,SAAQC,iBAAiB,QAAO,8BAA8B;AAC9D,SAAQC,iBAAiB,QAAO,qBAAqB;AAErD,SAAQC,gBAAgB,QAAO,uBAAuB;AACtD,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,gBAAgB,QAAO,oBAAoB;AAEnD,SAAQC,WAAW,QAAO,eAAe;AAEzC;;;AAGA,OAAM,MAAOC,gBAAgB;EAC3BC,OAAO;EACPC,MAAM;EACNC,UAAU;EACVC,YAAY;EAEZC,YACEC,MAAkB,EAClBC,cAA4D,EAC5DC,KAAoB;IAEpB,IAAI,CAACP,OAAO,GAAGK,MAAM;IACrB,IAAI,CAACJ,MAAM,GAAGM,KAAK;IACnB,IAAI,CAACL,UAAU,GAAGI,cAAc,CAACE,EAAE;IACnC,IAAIF,cAAc,CAACG,IAAI,EAAE;MACvB,IAAI,CAACN,YAAY,GAAGG,cAAc,CAACG,IAAI;;EAE3C;EAEA,kBAAkB,GAAG,KAAK;EAC1B,cAAc;EACd,IAAIC,aAAa;IACf,IAAIC,OAAO,GAAGC,OAAO,CAACC,OAAO,EAAsB;IACnD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;MAC5BF,OAAO,GAAGC,OAAO,CAACE,GAAG,CAAC,CACpB,IAAI,CAAC,qBAAqB,CACxB,IAAIlB,OAAO,CACT,qBAAqB,EACrBD,gBAAgB,CAACoB,QAA2C,CAC7D,CACF,EACD,IAAI,CAAC,qBAAqB,CACxB,IAAInB,OAAO,CAAC,wBAAwB,EAAG,OACrCoB,OAA4B,EAC5BC,QAAgB,KACa;QAC7B,MAAMC,OAAO,GAAGvB,gBAAgB,CAACwB,QAAQ,CAACH,OAAO,EAAEC,QAAQ,CAAC;QAC5D,OAAO,MAAMD,OAAO,CAACI,KAAK,CAACC,cAAc,CACvC,YAAgB;UAAA,kCAAZC,QAAQ;YAARA,QAAQ;UAAA;UACV,OAAOA,QAAQ;QACjB,CAAC,EACD,IAAI,MAAM7B,iBAAiB,CAAC8B,OAAO,CAACL,OAAO,CAAC,CAAC,CAC9C;MACH,CAAC,CAAqC,CACvC,CACF,CAAC;MACF,IAAI,CAAC,kBAAkB,GAAG,IAAI;;IAEhCjC,cAAc,CAACuC,MAAM,CAACC,MAAM,IAAG;MAC7B,IAAI,IAAI,CAAC,cAAc,EAAE;QACvB,KAAK,IAAI,CAAC,cAAc,CAACC,IAAI,CAACC,MAAM,IAAG;UACrC,KAAKA,MAAM,CAACC,OAAO,EAAE;QACvB,CAAC,CAAC;;MAEJ,IAAI,CAAC,cAAc,GAAGjB,OAAO,CAACe,IAAI,CAAC,MAAK;QACtC,OAAO,IAAI,CAACL,cAAc,CAACI,MAAM,CAAqC;MACxE,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC;IACxB,OAAO,IAAI,CAAC,cAAkD;EAChE;EAEA,MAAM,qBAAqB,CAACI,OAAgB;IAC1C,IAAI;MACF,IAAI,IAAI,CAAC5B,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAAC6B,SAAS,CAACC,GAAG,CAACF,OAAO,CAACpB,IAAI,EAAEoB,OAAO,CAAC;QAChD,MAAM,IAAI,CAAC5B,MAAM,CAAC+B,oBAAoB,CAAC,IAAI,EAAEH,OAAO,CAACpB,IAAI,CAAC;;KAE7D,CAAC,MAAM;MACN;MACA;MACA;IAAA;EAEJ;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCA,MAAMwB,QAAQ,CAIZC,YAA2B,EACZ;IAAA,mCAAZC,IAAY;MAAZA,IAAY;IAAA;IAEf,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAED,YAAY,EAAE,GAAGC,IAAI,CAAC;EAC1D;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiDA,MAAMd,cAAc,CAIlBa,YAA2B,EACZ;IAAA,mCAAZC,IAAY;MAAZA,IAAY;IAAA;IAEf,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAED,YAAY,EAAE,GAAGC,IAAI,CAAC;EAC3D;EAkBA,MAAM,SAAS,CAIbC,aAAsB,EACtBF,YAA2B,EACZ;IAEf,MAAMG,gBAAgB,GAAG/C,mBAAmB,CAC1CD,gCAAgC,CAAC6C,YAAY,CAAC,EAAEI,QAAQ,EAAE,IACxDpD,YAAY,CAACqD,YAAY,CAC5B;IAED,IAAIhD,QAAQ,CAAC2C,YAAY,CAAC,EAAE;MAC1B,MAAMM,SAAS,GAAG,IAAI,CAACtC,UAAU;MACjC,MAAMuC,UAAU,GAAGP,YAAY;MAC/B,MAAMQ,uBAAuB,GAAGvD,gBAAgB,CAACwD,IAAI,CAACF,UAAU,CAAC,GAC7DA,UAAU,GACV,GAAGA,UAAU,KAAKJ,gBAAgB,IAAI;MAE1C,MAAM;QAACO,gBAAgB;QAAEC,MAAM,EAAEC;MAAY,CAAC,GAAG,MAAM,IAAI,CAAC9C,OAAO,CAChE+C,IAAI,CAAC,kBAAkB,EAAE;QACxBN,UAAU,EAAEC,uBAAuB;QACnCF,SAAS;QACTJ,aAAa;QACbY,YAAY,EAAE,IAAI;QAClBC,WAAW,EAAE;OACd,CAAC,CACDC,KAAK,CAACC,YAAY,CAAC;MAEtB,IAAIP,gBAAgB,EAAE;QACpB,MAAMxD,qBAAqB,CAACwD,gBAAgB,CAAC;;MAG/C,OAAOR,aAAa,GAChB5C,qBAAqB,CAACsD,YAAY,CAAC,GACnCM,eAAe,CAAC,IAAI,CAACnD,MAAM,EAAE6C,YAAY,CAAC;;IAGhD,MAAMO,mBAAmB,GAAG3D,iBAAiB,CAACwC,YAAY,CAAC;IAC3D,MAAMoB,gCAAgC,GAAGnE,gBAAgB,CAACwD,IAAI,CAC5DU,mBAAmB,CACpB,GACGA,mBAAmB,GACnB,GAAGA,mBAAmB,KAAKhB,gBAAgB,IAAI;IACnD,IAAIkB,qBAAqB;IACzB,IAAI;MAAA,mCAxCDpB,IAAY;QAAZA,IAAY;MAAA;MAyCboB,qBAAqB,GAAG,IAAI,CAACvD,OAAO,CAAC+C,IAAI,CAAC,wBAAwB,EAAE;QAClEM,mBAAmB,EAAEC,gCAAgC;QACrDE,kBAAkB,EAAE,IAAI,CAACtD,UAAU;QACnCuD,SAAS,EAAE,MAAM7C,OAAO,CAACE,GAAG,CAACqB,IAAI,CAACuB,GAAG,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAClExB,aAAa;QACbY,YAAY,EAAE,IAAI;QAClBC,WAAW,EAAE;OACd,CAAC;KACH,CAAC,OAAOY,KAAK,EAAE;MACd,IACEA,KAAK,YAAYC,SAAS,IAC1BD,KAAK,CAACE,OAAO,CAACC,UAAU,CAAC,uCAAuC,CAAC,EACjE;QACAH,KAAK,CAACE,OAAO,IAAI,qCAAqC;;MAExD,MAAMF,KAAK;;IAEb,MAAM;MAACjB,gBAAgB;MAAEC,MAAM,EAAEC;IAAY,CAAC,GAC5C,MAAMS,qBAAqB,CAACL,KAAK,CAACC,YAAY,CAAC;IACjD,IAAIP,gBAAgB,EAAE;MACpB,MAAMxD,qBAAqB,CAACwD,gBAAgB,CAAC;;IAE/C,OAAOR,aAAa,GAChB5C,qBAAqB,CAACsD,YAAY,CAAC,GACnCM,eAAe,CAAC,IAAI,CAACnD,MAAM,EAAE6C,YAAY,CAAC;IAE9C,eAAea,eAAe,CAE5BM,GAAY;MAEZ,IAAIA,GAAG,YAAYjF,OAAO,EAAE;QAC1BiF,GAAG,GAAG,MAAMA,GAAG,CAACC,GAAG,CAAC,IAAI,CAAC;;MAE3B,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;QAC3B;QACA,OAAO;UAACE,mBAAmB,EAAE,GAAGF,GAAG,CAAC3B,QAAQ,EAAE;QAAG,CAAC;;MAEpD,IAAI8B,MAAM,CAACC,EAAE,CAACJ,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE;QACtB,OAAO;UAACE,mBAAmB,EAAE;QAAI,CAAC;;MAEpC,IAAIC,MAAM,CAACC,EAAE,CAACJ,GAAG,EAAEK,QAAQ,CAAC,EAAE;QAC5B,OAAO;UAACH,mBAAmB,EAAE;QAAU,CAAC;;MAE1C,IAAIC,MAAM,CAACC,EAAE,CAACJ,GAAG,EAAE,CAACK,QAAQ,CAAC,EAAE;QAC7B,OAAO;UAACH,mBAAmB,EAAE;QAAW,CAAC;;MAE3C,IAAIC,MAAM,CAACC,EAAE,CAACJ,GAAG,EAAEM,GAAG,CAAC,EAAE;QACvB,OAAO;UAACJ,mBAAmB,EAAE;QAAK,CAAC;;MAErC,MAAMK,YAAY,GAChBP,GAAG,KAAKA,GAAG,YAAYnE,WAAW,IAAImE,GAAG,YAAYpE,gBAAgB,CAAC,GAClEoE,GAAG,GACH,IAAI;MACV,IAAIO,YAAY,EAAE;QAChB,IAAIA,YAAY,CAACpD,KAAK,KAAK,IAAI,CAACnB,MAAM,EAAE;UACtC,MAAM,IAAIwE,KAAK,CACb,mEAAmE,CACpE;;QAEH,IAAID,YAAY,CAACE,QAAQ,EAAE;UACzB,MAAM,IAAID,KAAK,CAAC,uBAAuB,CAAC;;QAE1C,IAAID,YAAY,CAAC1B,YAAY,EAAE,CAACqB,mBAAmB,EAAE;UACnD,OAAO;YACLA,mBAAmB,EACjBK,YAAY,CAAC1B,YAAY,EAAE,CAACqB;WAC/B;;QAEH,IAAI,CAACK,YAAY,CAAC1B,YAAY,EAAE,CAAC6B,QAAQ,EAAE;UACzC,OAAO;YAACC,KAAK,EAAEJ,YAAY,CAAC1B,YAAY,EAAE,CAAC8B;UAAK,CAAC;;QAEnD,OAAO;UAACD,QAAQ,EAAEH,YAAY,CAAC1B,YAAY,EAAE,CAAC6B;QAAQ,CAAC;;MAEzD,OAAO;QAACC,KAAK,EAAEX;MAAG,CAAC;IACrB;EACF;;AAGF,MAAMd,YAAY,GAAIU,KAAY,IAAuC;EACvE,IAAIA,KAAK,CAACE,OAAO,CAACc,QAAQ,CAAC,oCAAoC,CAAC,EAAE;IAChE,OAAO;MAAChC,MAAM,EAAE;QAACiC,IAAI,EAAE;MAAW;IAAC,CAAC;;EAEtC,IAAIjB,KAAK,CAACE,OAAO,CAACc,QAAQ,CAAC,sCAAsC,CAAC,EAAE;IAClE,OAAO;MAAChC,MAAM,EAAE;QAACiC,IAAI,EAAE;MAAW;IAAC,CAAC;;EAGtC,IACEjB,KAAK,CAACE,OAAO,CAACgB,QAAQ,CAAC,uCAAuC,CAAC,IAC/DlB,KAAK,CAACE,OAAO,CAACgB,QAAQ,CAAC,sCAAsC,CAAC,EAC9D;IACA,MAAM,IAAIN,KAAK,CACb,uEAAuE,CACxE;;EAEH,MAAMZ,KAAK;AACb,CAAC;AAED;;;AAGA,OAAM,SAAUT,eAAe,CAC7BhC,KAAoB,EACpB0B,YAA2C;EAE3C,IAAIA,YAAY,CAACkC,OAAO,KAAK,MAAM,EAAE;IACnC,OAAO,IAAInF,gBAAgB,CAACuB,KAAK,EAAE0B,YAAY,CAAC;;EAElD,OAAO,IAAIhD,WAAW,CAACsB,KAAK,EAAE0B,YAAY,CAAC;AAC7C","names":["LazyArg","scriptInjector","PuppeteerURL","SOURCE_URL_REGEX","createEvaluationError","getSourcePuppeteerURLIfAvailable","getSourceUrlComment","isString","valueFromRemoteObject","AsyncIterableUtil","stringifyFunction","ARIAQueryHandler","Binding","CdpElementHandle","CdpJSHandle","ExecutionContext","_client","_world","_contextId","_contextName","constructor","client","contextPayload","world","id","name","puppeteerUtil","promise","Promise","resolve","all","queryOne","element","selector","results","queryAll","realm","evaluateHandle","elements","collect","inject","script","then","handle","dispose","binding","_bindings","set","_addBindingToContext","evaluate","pageFunction","args","returnByValue","sourceUrlComment","toString","INTERNAL_URL","contextId","expression","expressionWithSourceUrl","test","exceptionDetails","result","remoteObject","send","awaitPromise","userGesture","catch","rewriteError","createCdpHandle","functionDeclaration","functionDeclarationWithSourceUrl","callFunctionOnPromise","executionContextId","arguments","map","convertArgument","bind","error","TypeError","message","startsWith","arg","get","unserializableValue","Object","is","Infinity","NaN","objectHandle","Error","disposed","objectId","value","includes","type","endsWith","subtype"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\ExecutionContext.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport type {ElementHandle} from '../api/ElementHandle.js';\nimport type {JSHandle} from '../api/JSHandle.js';\nimport {LazyArg} from '../common/LazyArg.js';\nimport {scriptInjector} from '../common/ScriptInjector.js';\nimport type {EvaluateFunc, HandleFor} from '../common/types.js';\nimport {\n  PuppeteerURL,\n  SOURCE_URL_REGEX,\n  createEvaluationError,\n  getSourcePuppeteerURLIfAvailable,\n  getSourceUrlComment,\n  isString,\n  valueFromRemoteObject,\n} from '../common/util.js';\nimport type PuppeteerUtil from '../injected/injected.js';\nimport {AsyncIterableUtil} from '../util/AsyncIterableUtil.js';\nimport {stringifyFunction} from '../util/Function.js';\n\nimport {ARIAQueryHandler} from './AriaQueryHandler.js';\nimport {Binding} from './Binding.js';\nimport {CdpElementHandle} from './ElementHandle.js';\nimport type {IsolatedWorld} from './IsolatedWorld.js';\nimport {CdpJSHandle} from './JSHandle.js';\n\n/**\n * @internal\n */\nexport class ExecutionContext {\n  _client: CDPSession;\n  _world: IsolatedWorld;\n  _contextId: number;\n  _contextName?: string;\n\n  constructor(\n    client: CDPSession,\n    contextPayload: Protocol.Runtime.ExecutionContextDescription,\n    world: IsolatedWorld\n  ) {\n    this._client = client;\n    this._world = world;\n    this._contextId = contextPayload.id;\n    if (contextPayload.name) {\n      this._contextName = contextPayload.name;\n    }\n  }\n\n  #bindingsInstalled = false;\n  #puppeteerUtil?: Promise<JSHandle<PuppeteerUtil>>;\n  get puppeteerUtil(): Promise<JSHandle<PuppeteerUtil>> {\n    let promise = Promise.resolve() as Promise<unknown>;\n    if (!this.#bindingsInstalled) {\n      promise = Promise.all([\n        this.#installGlobalBinding(\n          new Binding(\n            '__ariaQuerySelector',\n            ARIAQueryHandler.queryOne as (...args: unknown[]) => unknown\n          )\n        ),\n        this.#installGlobalBinding(\n          new Binding('__ariaQuerySelectorAll', (async (\n            element: ElementHandle<Node>,\n            selector: string\n          ): Promise<JSHandle<Node[]>> => {\n            const results = ARIAQueryHandler.queryAll(element, selector);\n            return await element.realm.evaluateHandle(\n              (...elements) => {\n                return elements;\n              },\n              ...(await AsyncIterableUtil.collect(results))\n            );\n          }) as (...args: unknown[]) => unknown)\n        ),\n      ]);\n      this.#bindingsInstalled = true;\n    }\n    scriptInjector.inject(script => {\n      if (this.#puppeteerUtil) {\n        void this.#puppeteerUtil.then(handle => {\n          void handle.dispose();\n        });\n      }\n      this.#puppeteerUtil = promise.then(() => {\n        return this.evaluateHandle(script) as Promise<JSHandle<PuppeteerUtil>>;\n      });\n    }, !this.#puppeteerUtil);\n    return this.#puppeteerUtil as Promise<JSHandle<PuppeteerUtil>>;\n  }\n\n  async #installGlobalBinding(binding: Binding) {\n    try {\n      if (this._world) {\n        this._world._bindings.set(binding.name, binding);\n        await this._world._addBindingToContext(this, binding.name);\n      }\n    } catch {\n      // If the binding cannot be added, then either the browser doesn't support\n      // bindings (e.g. Firefox) or the context is broken. Either breakage is\n      // okay, so we ignore the error.\n    }\n  }\n\n  /**\n   * Evaluates the given function.\n   *\n   * @example\n   *\n   * ```ts\n   * const executionContext = await page.mainFrame().executionContext();\n   * const result = await executionContext.evaluate(() => Promise.resolve(8 * 7))* ;\n   * console.log(result); // prints \"56\"\n   * ```\n   *\n   * @example\n   * A string can also be passed in instead of a function:\n   *\n   * ```ts\n   * console.log(await executionContext.evaluate('1 + 2')); // prints \"3\"\n   * ```\n   *\n   * @example\n   * Handles can also be passed as `args`. They resolve to their referenced object:\n   *\n   * ```ts\n   * const oneHandle = await executionContext.evaluateHandle(() => 1);\n   * const twoHandle = await executionContext.evaluateHandle(() => 2);\n   * const result = await executionContext.evaluate(\n   *   (a, b) => a + b,\n   *   oneHandle,\n   *   twoHandle\n   * );\n   * await oneHandle.dispose();\n   * await twoHandle.dispose();\n   * console.log(result); // prints '3'.\n   * ```\n   *\n   * @param pageFunction - The function to evaluate.\n   * @param args - Additional arguments to pass into the function.\n   * @returns The result of evaluating the function. If the result is an object,\n   * a vanilla object containing the serializable properties of the result is\n   * returned.\n   */\n  async evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>> {\n    return await this.#evaluate(true, pageFunction, ...args);\n  }\n\n  /**\n   * Evaluates the given function.\n   *\n   * Unlike {@link ExecutionContext.evaluate | evaluate}, this method returns a\n   * handle to the result of the function.\n   *\n   * This method may be better suited if the object cannot be serialized (e.g.\n   * `Map`) and requires further manipulation.\n   *\n   * @example\n   *\n   * ```ts\n   * const context = await page.mainFrame().executionContext();\n   * const handle: JSHandle<typeof globalThis> = await context.evaluateHandle(\n   *   () => Promise.resolve(self)\n   * );\n   * ```\n   *\n   * @example\n   * A string can also be passed in instead of a function.\n   *\n   * ```ts\n   * const handle: JSHandle<number> = await context.evaluateHandle('1 + 2');\n   * ```\n   *\n   * @example\n   * Handles can also be passed as `args`. They resolve to their referenced object:\n   *\n   * ```ts\n   * const bodyHandle: ElementHandle<HTMLBodyElement> =\n   *   await context.evaluateHandle(() => {\n   *     return document.body;\n   *   });\n   * const stringHandle: JSHandle<string> = await context.evaluateHandle(\n   *   body => body.innerHTML,\n   *   body\n   * );\n   * console.log(await stringHandle.jsonValue()); // prints body's innerHTML\n   * // Always dispose your garbage! :)\n   * await bodyHandle.dispose();\n   * await stringHandle.dispose();\n   * ```\n   *\n   * @param pageFunction - The function to evaluate.\n   * @param args - Additional arguments to pass into the function.\n   * @returns A {@link JSHandle | handle} to the result of evaluating the\n   * function. If the result is a `Node`, then this will return an\n   * {@link ElementHandle | element handle}.\n   */\n  async evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>> {\n    return await this.#evaluate(false, pageFunction, ...args);\n  }\n\n  async #evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    returnByValue: true,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>>;\n  async #evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    returnByValue: false,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;\n  async #evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    returnByValue: boolean,\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>> | Awaited<ReturnType<Func>>> {\n    const sourceUrlComment = getSourceUrlComment(\n      getSourcePuppeteerURLIfAvailable(pageFunction)?.toString() ??\n        PuppeteerURL.INTERNAL_URL\n    );\n\n    if (isString(pageFunction)) {\n      const contextId = this._contextId;\n      const expression = pageFunction;\n      const expressionWithSourceUrl = SOURCE_URL_REGEX.test(expression)\n        ? expression\n        : `${expression}\\n${sourceUrlComment}\\n`;\n\n      const {exceptionDetails, result: remoteObject} = await this._client\n        .send('Runtime.evaluate', {\n          expression: expressionWithSourceUrl,\n          contextId,\n          returnByValue,\n          awaitPromise: true,\n          userGesture: true,\n        })\n        .catch(rewriteError);\n\n      if (exceptionDetails) {\n        throw createEvaluationError(exceptionDetails);\n      }\n\n      return returnByValue\n        ? valueFromRemoteObject(remoteObject)\n        : createCdpHandle(this._world, remoteObject);\n    }\n\n    const functionDeclaration = stringifyFunction(pageFunction);\n    const functionDeclarationWithSourceUrl = SOURCE_URL_REGEX.test(\n      functionDeclaration\n    )\n      ? functionDeclaration\n      : `${functionDeclaration}\\n${sourceUrlComment}\\n`;\n    let callFunctionOnPromise;\n    try {\n      callFunctionOnPromise = this._client.send('Runtime.callFunctionOn', {\n        functionDeclaration: functionDeclarationWithSourceUrl,\n        executionContextId: this._contextId,\n        arguments: await Promise.all(args.map(convertArgument.bind(this))),\n        returnByValue,\n        awaitPromise: true,\n        userGesture: true,\n      });\n    } catch (error) {\n      if (\n        error instanceof TypeError &&\n        error.message.startsWith('Converting circular structure to JSON')\n      ) {\n        error.message += ' Recursive objects are not allowed.';\n      }\n      throw error;\n    }\n    const {exceptionDetails, result: remoteObject} =\n      await callFunctionOnPromise.catch(rewriteError);\n    if (exceptionDetails) {\n      throw createEvaluationError(exceptionDetails);\n    }\n    return returnByValue\n      ? valueFromRemoteObject(remoteObject)\n      : createCdpHandle(this._world, remoteObject);\n\n    async function convertArgument(\n      this: ExecutionContext,\n      arg: unknown\n    ): Promise<Protocol.Runtime.CallArgument> {\n      if (arg instanceof LazyArg) {\n        arg = await arg.get(this);\n      }\n      if (typeof arg === 'bigint') {\n        // eslint-disable-line valid-typeof\n        return {unserializableValue: `${arg.toString()}n`};\n      }\n      if (Object.is(arg, -0)) {\n        return {unserializableValue: '-0'};\n      }\n      if (Object.is(arg, Infinity)) {\n        return {unserializableValue: 'Infinity'};\n      }\n      if (Object.is(arg, -Infinity)) {\n        return {unserializableValue: '-Infinity'};\n      }\n      if (Object.is(arg, NaN)) {\n        return {unserializableValue: 'NaN'};\n      }\n      const objectHandle =\n        arg && (arg instanceof CdpJSHandle || arg instanceof CdpElementHandle)\n          ? arg\n          : null;\n      if (objectHandle) {\n        if (objectHandle.realm !== this._world) {\n          throw new Error(\n            'JSHandles can be evaluated only in the context they were created!'\n          );\n        }\n        if (objectHandle.disposed) {\n          throw new Error('JSHandle is disposed!');\n        }\n        if (objectHandle.remoteObject().unserializableValue) {\n          return {\n            unserializableValue:\n              objectHandle.remoteObject().unserializableValue,\n          };\n        }\n        if (!objectHandle.remoteObject().objectId) {\n          return {value: objectHandle.remoteObject().value};\n        }\n        return {objectId: objectHandle.remoteObject().objectId};\n      }\n      return {value: arg};\n    }\n  }\n}\n\nconst rewriteError = (error: Error): Protocol.Runtime.EvaluateResponse => {\n  if (error.message.includes('Object reference chain is too long')) {\n    return {result: {type: 'undefined'}};\n  }\n  if (error.message.includes(\"Object couldn't be returned by value\")) {\n    return {result: {type: 'undefined'}};\n  }\n\n  if (\n    error.message.endsWith('Cannot find context with specified id') ||\n    error.message.endsWith('Inspected target navigated or closed')\n  ) {\n    throw new Error(\n      'Execution context was destroyed, most likely because of a navigation.'\n    );\n  }\n  throw error;\n};\n\n/**\n * @internal\n */\nexport function createCdpHandle(\n  realm: IsolatedWorld,\n  remoteObject: Protocol.Runtime.RemoteObject\n): JSHandle | ElementHandle<Node> {\n  if (remoteObject.subtype === 'node') {\n    return new CdpElementHandle(realm, remoteObject);\n  }\n  return new CdpJSHandle(realm, remoteObject);\n}\n"]},"metadata":{},"sourceType":"module"}