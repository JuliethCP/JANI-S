{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst netmask_1 = require(\"netmask\");\nconst util_1 = require(\"./util\");\n/**\n * True iff the IP address of the host matches the specified IP address pattern.\n *\n * Pattern and mask specification is done the same way as for SOCKS configuration.\n *\n * Examples:\n *\n * ``` js\n * isInNet(host, \"198.95.249.79\", \"255.255.255.255\")\n *   // is true iff the IP address of host matches exactly 198.95.249.79.\n *\n * isInNet(host, \"198.95.0.0\", \"255.255.0.0\")\n *   // is true iff the IP address of the host matches 198.95.*.*.\n * ```\n *\n * @param {String} host a DNS hostname, or IP address. If a hostname is passed,\n *   it will be resoved into an IP address by this function.\n * @param {String} pattern an IP address pattern in the dot-separated format mask.\n * @param {String} mask for the IP address pattern informing which parts of the\n *   IP address should be matched against. 0 means ignore, 255 means match.\n * @return {Boolean}\n */\nasync function isInNet(host, pattern, mask) {\n  const family = 4;\n  try {\n    const ip = await (0, util_1.dnsLookup)(host, {\n      family\n    });\n    if (typeof ip === 'string') {\n      const netmask = new netmask_1.Netmask(pattern, mask);\n      return netmask.contains(ip);\n    }\n  } catch (err) {\n    // ignore\n  }\n  return false;\n}\nexports.default = isInNet;","map":{"version":3,"mappings":";;;;;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAuBe,eAAeA,OAAO,CACpCC,IAAY,EACZC,OAAe,EACfC,IAAY;EAEZ,MAAMC,MAAM,GAAG,CAAC;EAChB,IAAI;IACH,MAAMC,EAAE,GAAG,MAAM,oBAAS,EAACJ,IAAI,EAAE;MAAEG;IAAM,CAAE,CAAC;IAC5C,IAAI,OAAOC,EAAE,KAAK,QAAQ,EAAE;MAC3B,MAAMC,OAAO,GAAG,IAAIC,iBAAO,CAACL,OAAO,EAAEC,IAAI,CAAC;MAC1C,OAAOG,OAAO,CAACE,QAAQ,CAACH,EAAE,CAAC;;GAE5B,CAAC,OAAOI,GAAG,EAAE;IACb;EAAA;EAED,OAAO,KAAK;AACb;AAhBAC","names":["isInNet","host","pattern","mask","family","ip","netmask","netmask_1","contains","err","exports"],"sources":["../src/isInNet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}