{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport os from 'os';\nimport { BrowserPlatform } from './browser-data/browser-data.js';\n/**\n * @public\n */\nexport function detectBrowserPlatform() {\n  const platform = os.platform();\n  switch (platform) {\n    case 'darwin':\n      return os.arch() === 'arm64' ? BrowserPlatform.MAC_ARM : BrowserPlatform.MAC;\n    case 'linux':\n      return BrowserPlatform.LINUX;\n    case 'win32':\n      return os.arch() === 'x64' ||\n      // Windows 11 for ARM supports x64 emulation\n      os.arch() === 'arm64' && isWindows11(os.release()) ? BrowserPlatform.WIN64 : BrowserPlatform.WIN32;\n    default:\n      return undefined;\n  }\n}\n/**\n * Windows 11 is identified by the version 10.0.22000 or greater\n * @internal\n */\nfunction isWindows11(version) {\n  const parts = version.split('.');\n  if (parts.length > 2) {\n    const major = parseInt(parts[0], 10);\n    const minor = parseInt(parts[1], 10);\n    const patch = parseInt(parts[2], 10);\n    return major > 10 || major === 10 && minor > 0 || major === 10 && minor === 0 && patch >= 22000;\n  }\n  return false;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,EAAE,MAAM,IAAI;AAEnB,SAAQC,eAAe,QAAO,gCAAgC;AAE9D;;;AAGA,OAAM,SAAUC,qBAAqB;EACnC,MAAMC,QAAQ,GAAGH,EAAE,CAACG,QAAQ,EAAE;EAC9B,QAAQA,QAAQ;IACd,KAAK,QAAQ;MACX,OAAOH,EAAE,CAACI,IAAI,EAAE,KAAK,OAAO,GACxBH,eAAe,CAACI,OAAO,GACvBJ,eAAe,CAACK,GAAG;IACzB,KAAK,OAAO;MACV,OAAOL,eAAe,CAACM,KAAK;IAC9B,KAAK,OAAO;MACV,OAAOP,EAAE,CAACI,IAAI,EAAE,KAAK,KAAK;MACxB;MACCJ,EAAE,CAACI,IAAI,EAAE,KAAK,OAAO,IAAII,WAAW,CAACR,EAAE,CAACS,OAAO,EAAE,CAAE,GAClDR,eAAe,CAACS,KAAK,GACrBT,eAAe,CAACU,KAAK;IAC3B;MACE,OAAOC,SAAS;EAAC;AAEvB;AAEA;;;;AAIA,SAASJ,WAAW,CAACK,OAAe;EAClC,MAAMC,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;EAChC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IACpB,MAAMC,KAAK,GAAGC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC;IAC9C,MAAMK,KAAK,GAAGD,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC;IAC9C,MAAMM,KAAK,GAAGF,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC;IAC9C,OACEG,KAAK,GAAG,EAAE,IACTA,KAAK,KAAK,EAAE,IAAIE,KAAK,GAAG,CAAE,IAC1BF,KAAK,KAAK,EAAE,IAAIE,KAAK,KAAK,CAAC,IAAIC,KAAK,IAAI,KAAM;;EAGnD,OAAO,KAAK;AACd","names":["os","BrowserPlatform","detectBrowserPlatform","platform","arch","MAC_ARM","MAC","LINUX","isWindows11","release","WIN64","WIN32","undefined","version","parts","split","length","major","parseInt","minor","patch"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\@puppeteer\\browsers\\src\\detectPlatform.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport os from 'os';\n\nimport {BrowserPlatform} from './browser-data/browser-data.js';\n\n/**\n * @public\n */\nexport function detectBrowserPlatform(): BrowserPlatform | undefined {\n  const platform = os.platform();\n  switch (platform) {\n    case 'darwin':\n      return os.arch() === 'arm64'\n        ? BrowserPlatform.MAC_ARM\n        : BrowserPlatform.MAC;\n    case 'linux':\n      return BrowserPlatform.LINUX;\n    case 'win32':\n      return os.arch() === 'x64' ||\n        // Windows 11 for ARM supports x64 emulation\n        (os.arch() === 'arm64' && isWindows11(os.release()))\n        ? BrowserPlatform.WIN64\n        : BrowserPlatform.WIN32;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Windows 11 is identified by the version 10.0.22000 or greater\n * @internal\n */\nfunction isWindows11(version: string): boolean {\n  const parts = version.split('.');\n  if (parts.length > 2) {\n    const major = parseInt(parts[0] as string, 10);\n    const minor = parseInt(parts[1] as string, 10);\n    const patch = parseInt(parts[2] as string, 10);\n    return (\n      major > 10 ||\n      (major === 10 && minor > 0) ||\n      (major === 10 && minor === 0 && patch >= 22000)\n    );\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}