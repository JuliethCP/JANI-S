{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __addDisposableResource = this && this.__addDisposableResource || function (env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({\n      value: value,\n      dispose: dispose,\n      async: async\n    });\n  } else if (async) {\n    env.stack.push({\n      async: true\n    });\n  }\n  return value;\n};\nvar __disposeResources = this && this.__disposeResources || function (SuppressedError) {\n  return function (env) {\n    function fail(e) {\n      env.error = env.hasError ? new SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n      env.hasError = true;\n    }\n    function next() {\n      while (env.stack.length) {\n        var rec = env.stack.pop();\n        try {\n          var result = rec.dispose && rec.dispose.call(rec.value);\n          if (rec.async) return Promise.resolve(result).then(next, function (e) {\n            fail(e);\n            return next();\n          });\n        } catch (e) {\n          fail(e);\n        }\n      }\n      if (env.hasError) throw env.error;\n    }\n    return next();\n  };\n}(typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n});\nimport { _isElementHandle } from '../api/ElementHandleSymbol.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { interpolateFunction, stringifyFunction } from '../util/Function.js';\nimport { transposeIterableHandle } from './HandleIterator.js';\nimport { LazyArg } from './LazyArg.js';\n/**\n * @internal\n */\nexport class QueryHandler {\n  // Either one of these may be implemented, but at least one must be.\n  static querySelectorAll;\n  static querySelector;\n  static get _querySelector() {\n    if (this.querySelector) {\n      return this.querySelector;\n    }\n    if (!this.querySelectorAll) {\n      throw new Error('Cannot create default `querySelector`.');\n    }\n    return this.querySelector = interpolateFunction(async (node, selector, PuppeteerUtil) => {\n      const querySelectorAll = PLACEHOLDER('querySelectorAll');\n      const results = querySelectorAll(node, selector, PuppeteerUtil);\n      for await (const result of results) {\n        return result;\n      }\n      return null;\n    }, {\n      querySelectorAll: stringifyFunction(this.querySelectorAll)\n    });\n  }\n  static get _querySelectorAll() {\n    if (this.querySelectorAll) {\n      return this.querySelectorAll;\n    }\n    if (!this.querySelector) {\n      throw new Error('Cannot create default `querySelectorAll`.');\n    }\n    return this.querySelectorAll = interpolateFunction(async function* (node, selector, PuppeteerUtil) {\n      const querySelector = PLACEHOLDER('querySelector');\n      const result = await querySelector(node, selector, PuppeteerUtil);\n      if (result) {\n        yield result;\n      }\n    }, {\n      querySelector: stringifyFunction(this.querySelector)\n    });\n  }\n  /**\n   * Queries for multiple nodes given a selector and {@link ElementHandle}.\n   *\n   * Akin to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll | Document.querySelectorAll()}.\n   */\n  static async *queryAll(element, selector) {\n    const env_1 = {\n      stack: [],\n      error: void 0,\n      hasError: false\n    };\n    try {\n      const handle = __addDisposableResource(env_1, await element.evaluateHandle(this._querySelectorAll, selector, LazyArg.create(context => {\n        return context.puppeteerUtil;\n      })), false);\n      yield* transposeIterableHandle(handle);\n    } catch (e_1) {\n      env_1.error = e_1;\n      env_1.hasError = true;\n    } finally {\n      __disposeResources(env_1);\n    }\n  }\n  /**\n   * Queries for a single node given a selector and {@link ElementHandle}.\n   *\n   * Akin to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector}.\n   */\n  static async queryOne(element, selector) {\n    const env_2 = {\n      stack: [],\n      error: void 0,\n      hasError: false\n    };\n    try {\n      const result = __addDisposableResource(env_2, await element.evaluateHandle(this._querySelector, selector, LazyArg.create(context => {\n        return context.puppeteerUtil;\n      })), false);\n      if (!(_isElementHandle in result)) {\n        return null;\n      }\n      return result.move();\n    } catch (e_2) {\n      env_2.error = e_2;\n      env_2.hasError = true;\n    } finally {\n      __disposeResources(env_2);\n    }\n  }\n  /**\n   * Waits until a single node appears for a given selector and\n   * {@link ElementHandle}.\n   *\n   * This will always query the handle in the Puppeteer world and migrate the\n   * result to the main world.\n   */\n  static async waitFor(elementOrFrame, selector, options) {\n    const env_3 = {\n      stack: [],\n      error: void 0,\n      hasError: false\n    };\n    try {\n      let frame;\n      const element = __addDisposableResource(env_3, await (async () => {\n        if (!(_isElementHandle in elementOrFrame)) {\n          frame = elementOrFrame;\n          return;\n        }\n        frame = elementOrFrame.frame;\n        return await frame.isolatedRealm().adoptHandle(elementOrFrame);\n      })(), false);\n      const {\n        visible = false,\n        hidden = false,\n        timeout,\n        signal\n      } = options;\n      try {\n        const env_4 = {\n          stack: [],\n          error: void 0,\n          hasError: false\n        };\n        try {\n          signal?.throwIfAborted();\n          const handle = __addDisposableResource(env_4, await frame.isolatedRealm().waitForFunction(async (PuppeteerUtil, query, selector, root, visible) => {\n            const querySelector = PuppeteerUtil.createFunction(query);\n            const node = await querySelector(root ?? document, selector, PuppeteerUtil);\n            return PuppeteerUtil.checkVisibility(node, visible);\n          }, {\n            polling: visible || hidden ? 'raf' : 'mutation',\n            root: element,\n            timeout,\n            signal\n          }, LazyArg.create(context => {\n            return context.puppeteerUtil;\n          }), stringifyFunction(this._querySelector), selector, element, visible ? true : hidden ? false : undefined), false);\n          if (signal?.aborted) {\n            throw signal.reason;\n          }\n          if (!(_isElementHandle in handle)) {\n            return null;\n          }\n          return await frame.mainRealm().transferHandle(handle);\n        } catch (e_3) {\n          env_4.error = e_3;\n          env_4.hasError = true;\n        } finally {\n          __disposeResources(env_4);\n        }\n      } catch (error) {\n        if (!isErrorLike(error)) {\n          throw error;\n        }\n        if (error.name === 'AbortError') {\n          throw error;\n        }\n        error.message = `Waiting for selector \\`${selector}\\` failed: ${error.message}`;\n        throw error;\n      }\n    } catch (e_4) {\n      env_3.error = e_4;\n      env_3.hasError = true;\n    } finally {\n      __disposeResources(env_3);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["_isElementHandle","isErrorLike","interpolateFunction","stringifyFunction","transposeIterableHandle","LazyArg","QueryHandler","querySelectorAll","querySelector","_querySelector","Error","node","selector","PuppeteerUtil","PLACEHOLDER","results","result","_querySelectorAll","queryAll","element","handle","evaluateHandle","create","context","puppeteerUtil","queryOne","move","waitFor","elementOrFrame","options","frame","isolatedRealm","adoptHandle","visible","hidden","timeout","signal","throwIfAborted","waitForFunction","query","root","createFunction","document","checkVisibility","polling","undefined","aborted","reason","mainRealm","transferHandle","error","name","message"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\common\\QueryHandler.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {ElementHandle} from '../api/ElementHandle.js';\nimport {_isElementHandle} from '../api/ElementHandleSymbol.js';\nimport type {Frame} from '../api/Frame.js';\nimport type {WaitForSelectorOptions} from '../api/Page.js';\nimport type PuppeteerUtil from '../injected/injected.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\nimport {interpolateFunction, stringifyFunction} from '../util/Function.js';\n\nimport {transposeIterableHandle} from './HandleIterator.js';\nimport {LazyArg} from './LazyArg.js';\nimport type {Awaitable, AwaitableIterable} from './types.js';\n\n/**\n * @internal\n */\nexport type QuerySelectorAll = (\n  node: Node,\n  selector: string,\n  PuppeteerUtil: PuppeteerUtil\n) => AwaitableIterable<Node>;\n\n/**\n * @internal\n */\nexport type QuerySelector = (\n  node: Node,\n  selector: string,\n  PuppeteerUtil: PuppeteerUtil\n) => Awaitable<Node | null>;\n\n/**\n * @internal\n */\nexport class QueryHandler {\n  // Either one of these may be implemented, but at least one must be.\n  static querySelectorAll?: QuerySelectorAll;\n  static querySelector?: QuerySelector;\n\n  static get _querySelector(): QuerySelector {\n    if (this.querySelector) {\n      return this.querySelector;\n    }\n    if (!this.querySelectorAll) {\n      throw new Error('Cannot create default `querySelector`.');\n    }\n\n    return (this.querySelector = interpolateFunction(\n      async (node, selector, PuppeteerUtil) => {\n        const querySelectorAll: QuerySelectorAll =\n          PLACEHOLDER('querySelectorAll');\n        const results = querySelectorAll(node, selector, PuppeteerUtil);\n        for await (const result of results) {\n          return result;\n        }\n        return null;\n      },\n      {\n        querySelectorAll: stringifyFunction(this.querySelectorAll),\n      }\n    ));\n  }\n\n  static get _querySelectorAll(): QuerySelectorAll {\n    if (this.querySelectorAll) {\n      return this.querySelectorAll;\n    }\n    if (!this.querySelector) {\n      throw new Error('Cannot create default `querySelectorAll`.');\n    }\n\n    return (this.querySelectorAll = interpolateFunction(\n      async function* (node, selector, PuppeteerUtil) {\n        const querySelector: QuerySelector = PLACEHOLDER('querySelector');\n        const result = await querySelector(node, selector, PuppeteerUtil);\n        if (result) {\n          yield result;\n        }\n      },\n      {\n        querySelector: stringifyFunction(this.querySelector),\n      }\n    ));\n  }\n\n  /**\n   * Queries for multiple nodes given a selector and {@link ElementHandle}.\n   *\n   * Akin to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll | Document.querySelectorAll()}.\n   */\n  static async *queryAll(\n    element: ElementHandle<Node>,\n    selector: string\n  ): AwaitableIterable<ElementHandle<Node>> {\n    using handle = await element.evaluateHandle(\n      this._querySelectorAll,\n      selector,\n      LazyArg.create(context => {\n        return context.puppeteerUtil;\n      })\n    );\n    yield* transposeIterableHandle(handle);\n  }\n\n  /**\n   * Queries for a single node given a selector and {@link ElementHandle}.\n   *\n   * Akin to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector}.\n   */\n  static async queryOne(\n    element: ElementHandle<Node>,\n    selector: string\n  ): Promise<ElementHandle<Node> | null> {\n    using result = await element.evaluateHandle(\n      this._querySelector,\n      selector,\n      LazyArg.create(context => {\n        return context.puppeteerUtil;\n      })\n    );\n    if (!(_isElementHandle in result)) {\n      return null;\n    }\n    return result.move();\n  }\n\n  /**\n   * Waits until a single node appears for a given selector and\n   * {@link ElementHandle}.\n   *\n   * This will always query the handle in the Puppeteer world and migrate the\n   * result to the main world.\n   */\n  static async waitFor(\n    elementOrFrame: ElementHandle<Node> | Frame,\n    selector: string,\n    options: WaitForSelectorOptions\n  ): Promise<ElementHandle<Node> | null> {\n    let frame!: Frame;\n    using element = await (async () => {\n      if (!(_isElementHandle in elementOrFrame)) {\n        frame = elementOrFrame;\n        return;\n      }\n      frame = elementOrFrame.frame;\n      return await frame.isolatedRealm().adoptHandle(elementOrFrame);\n    })();\n\n    const {visible = false, hidden = false, timeout, signal} = options;\n\n    try {\n      signal?.throwIfAborted();\n\n      using handle = await frame.isolatedRealm().waitForFunction(\n        async (PuppeteerUtil, query, selector, root, visible) => {\n          const querySelector = PuppeteerUtil.createFunction(\n            query\n          ) as QuerySelector;\n          const node = await querySelector(\n            root ?? document,\n            selector,\n            PuppeteerUtil\n          );\n          return PuppeteerUtil.checkVisibility(node, visible);\n        },\n        {\n          polling: visible || hidden ? 'raf' : 'mutation',\n          root: element,\n          timeout,\n          signal,\n        },\n        LazyArg.create(context => {\n          return context.puppeteerUtil;\n        }),\n        stringifyFunction(this._querySelector),\n        selector,\n        element,\n        visible ? true : hidden ? false : undefined\n      );\n\n      if (signal?.aborted) {\n        throw signal.reason;\n      }\n\n      if (!(_isElementHandle in handle)) {\n        return null;\n      }\n      return await frame.mainRealm().transferHandle(handle);\n    } catch (error) {\n      if (!isErrorLike(error)) {\n        throw error;\n      }\n      if (error.name === 'AbortError') {\n        throw error;\n      }\n      error.message = `Waiting for selector \\`${selector}\\` failed: ${error.message}`;\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}