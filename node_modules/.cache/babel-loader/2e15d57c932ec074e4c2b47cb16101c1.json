{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nexport function camelCase(str) {\n  // Handle the case where an argument is provided as camel case, e.g., fooBar.\n  // by ensuring that the string isn't already mixed case:\n  const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n  if (!isCamelCase) {\n    str = str.toLowerCase();\n  }\n  if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n    return str;\n  } else {\n    let camelcase = '';\n    let nextChrUpper = false;\n    const leadingHyphens = str.match(/^-+/);\n    for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n      let chr = str.charAt(i);\n      if (nextChrUpper) {\n        nextChrUpper = false;\n        chr = chr.toUpperCase();\n      }\n      if (i !== 0 && (chr === '-' || chr === '_')) {\n        nextChrUpper = true;\n      } else if (chr !== '-' && chr !== '_') {\n        camelcase += chr;\n      }\n    }\n    return camelcase;\n  }\n}\nexport function decamelize(str, joinString) {\n  const lowercase = str.toLowerCase();\n  joinString = joinString || '-';\n  let notCamelcase = '';\n  for (let i = 0; i < str.length; i++) {\n    const chrLower = lowercase.charAt(i);\n    const chrString = str.charAt(i);\n    if (chrLower !== chrString && i > 0) {\n      notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n    } else {\n      notCamelcase += chrString;\n    }\n  }\n  return notCamelcase;\n}\nexport function looksLikeNumber(x) {\n  if (x === null || x === undefined) return false;\n  // if loaded from config, may already be a number.\n  if (typeof x === 'number') return true;\n  // hexadecimal.\n  if (/^0x[0-9a-f]+$/i.test(x)) return true;\n  // don't treat 0123 as a number; as it drops the leading '0'.\n  if (/^0[^.]/.test(x)) return false;\n  return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}","map":{"version":3,"names":["camelCase","str","isCamelCase","toLowerCase","toUpperCase","indexOf","camelcase","nextChrUpper","leadingHyphens","match","i","length","chr","charAt","decamelize","joinString","lowercase","notCamelcase","chrLower","chrString","looksLikeNumber","x","undefined","test"],"sources":["D:/Julieth-Campos/PSO/node_modules/@puppeteer/browsers/node_modules/yargs-parser/build/lib/string-utils.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nexport function camelCase(str) {\n    // Handle the case where an argument is provided as camel case, e.g., fooBar.\n    // by ensuring that the string isn't already mixed case:\n    const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n    if (!isCamelCase) {\n        str = str.toLowerCase();\n    }\n    if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n        return str;\n    }\n    else {\n        let camelcase = '';\n        let nextChrUpper = false;\n        const leadingHyphens = str.match(/^-+/);\n        for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n            let chr = str.charAt(i);\n            if (nextChrUpper) {\n                nextChrUpper = false;\n                chr = chr.toUpperCase();\n            }\n            if (i !== 0 && (chr === '-' || chr === '_')) {\n                nextChrUpper = true;\n            }\n            else if (chr !== '-' && chr !== '_') {\n                camelcase += chr;\n            }\n        }\n        return camelcase;\n    }\n}\nexport function decamelize(str, joinString) {\n    const lowercase = str.toLowerCase();\n    joinString = joinString || '-';\n    let notCamelcase = '';\n    for (let i = 0; i < str.length; i++) {\n        const chrLower = lowercase.charAt(i);\n        const chrString = str.charAt(i);\n        if (chrLower !== chrString && i > 0) {\n            notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n        }\n        else {\n            notCamelcase += chrString;\n        }\n    }\n    return notCamelcase;\n}\nexport function looksLikeNumber(x) {\n    if (x === null || x === undefined)\n        return false;\n    // if loaded from config, may already be a number.\n    if (typeof x === 'number')\n        return true;\n    // hexadecimal.\n    if (/^0x[0-9a-f]+$/i.test(x))\n        return true;\n    // don't treat 0123 as a number; as it drops the leading '0'.\n    if (/^0[^.]/.test(x))\n        return false;\n    return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAS,CAACC,GAAG,EAAE;EAC3B;EACA;EACA,MAAMC,WAAW,GAAGD,GAAG,KAAKA,GAAG,CAACE,WAAW,EAAE,IAAIF,GAAG,KAAKA,GAAG,CAACG,WAAW,EAAE;EAC1E,IAAI,CAACF,WAAW,EAAE;IACdD,GAAG,GAAGA,GAAG,CAACE,WAAW,EAAE;EAC3B;EACA,IAAIF,GAAG,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAIJ,GAAG,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;IACpD,OAAOJ,GAAG;EACd,CAAC,MACI;IACD,IAAIK,SAAS,GAAG,EAAE;IAClB,IAAIC,YAAY,GAAG,KAAK;IACxB,MAAMC,cAAc,GAAGP,GAAG,CAACQ,KAAK,CAAC,KAAK,CAAC;IACvC,KAAK,IAAIC,CAAC,GAAGF,cAAc,GAAGA,cAAc,CAAC,CAAC,CAAC,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,GAAGT,GAAG,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7E,IAAIE,GAAG,GAAGX,GAAG,CAACY,MAAM,CAACH,CAAC,CAAC;MACvB,IAAIH,YAAY,EAAE;QACdA,YAAY,GAAG,KAAK;QACpBK,GAAG,GAAGA,GAAG,CAACR,WAAW,EAAE;MAC3B;MACA,IAAIM,CAAC,KAAK,CAAC,KAAKE,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,GAAG,CAAC,EAAE;QACzCL,YAAY,GAAG,IAAI;MACvB,CAAC,MACI,IAAIK,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,GAAG,EAAE;QACjCN,SAAS,IAAIM,GAAG;MACpB;IACJ;IACA,OAAON,SAAS;EACpB;AACJ;AACA,OAAO,SAASQ,UAAU,CAACb,GAAG,EAAEc,UAAU,EAAE;EACxC,MAAMC,SAAS,GAAGf,GAAG,CAACE,WAAW,EAAE;EACnCY,UAAU,GAAGA,UAAU,IAAI,GAAG;EAC9B,IAAIE,YAAY,GAAG,EAAE;EACrB,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,GAAG,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IACjC,MAAMQ,QAAQ,GAAGF,SAAS,CAACH,MAAM,CAACH,CAAC,CAAC;IACpC,MAAMS,SAAS,GAAGlB,GAAG,CAACY,MAAM,CAACH,CAAC,CAAC;IAC/B,IAAIQ,QAAQ,KAAKC,SAAS,IAAIT,CAAC,GAAG,CAAC,EAAE;MACjCO,YAAY,IAAK,GAAEF,UAAW,GAAEC,SAAS,CAACH,MAAM,CAACH,CAAC,CAAE,EAAC;IACzD,CAAC,MACI;MACDO,YAAY,IAAIE,SAAS;IAC7B;EACJ;EACA,OAAOF,YAAY;AACvB;AACA,OAAO,SAASG,eAAe,CAACC,CAAC,EAAE;EAC/B,IAAIA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAKC,SAAS,EAC7B,OAAO,KAAK;EAChB;EACA,IAAI,OAAOD,CAAC,KAAK,QAAQ,EACrB,OAAO,IAAI;EACf;EACA,IAAI,gBAAgB,CAACE,IAAI,CAACF,CAAC,CAAC,EACxB,OAAO,IAAI;EACf;EACA,IAAI,QAAQ,CAACE,IAAI,CAACF,CAAC,CAAC,EAChB,OAAO,KAAK;EAChB,OAAO,2CAA2C,CAACE,IAAI,CAACF,CAAC,CAAC;AAC9D"},"metadata":{},"sourceType":"module"}