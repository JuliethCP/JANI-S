{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @public\n */\nexport var TargetType;\n(function (TargetType) {\n  TargetType[\"PAGE\"] = \"page\";\n  TargetType[\"BACKGROUND_PAGE\"] = \"background_page\";\n  TargetType[\"SERVICE_WORKER\"] = \"service_worker\";\n  TargetType[\"SHARED_WORKER\"] = \"shared_worker\";\n  TargetType[\"BROWSER\"] = \"browser\";\n  TargetType[\"WEBVIEW\"] = \"webview\";\n  TargetType[\"OTHER\"] = \"other\";\n  /**\n   * @internal\n   */\n  TargetType[\"TAB\"] = \"tab\";\n})(TargetType || (TargetType = {}));\n/**\n * Target represents a\n * {@link https://chromedevtools.github.io/devtools-protocol/tot/Target/ | CDP target}.\n * In CDP a target is something that can be debugged such a frame, a page or a\n * worker.\n * @public\n */\nexport class Target {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * If the target is not of type `\"service_worker\"` or `\"shared_worker\"`, returns `null`.\n   */\n  async worker() {\n    return null;\n  }\n  /**\n   * If the target is not of type `\"page\"`, `\"webview\"` or `\"background_page\"`,\n   * returns `null`.\n   */\n  async page() {\n    return null;\n  }\n  url() {\n    throw new Error('not implemented');\n  }\n  /**\n   * Creates a Chrome Devtools Protocol session attached to the target.\n   */\n  createCDPSession() {\n    throw new Error('not implemented');\n  }\n  /**\n   * Identifies what kind of target this is.\n   *\n   * @remarks\n   *\n   * See {@link https://developer.chrome.com/extensions/background_pages | docs} for more info about background pages.\n   */\n  type() {\n    throw new Error('not implemented');\n  }\n  /**\n   * Get the browser the target belongs to.\n   */\n  browser() {\n    throw new Error('not implemented');\n  }\n  /**\n   * Get the browser context the target belongs to.\n   */\n  browserContext() {\n    throw new Error('not implemented');\n  }\n  /**\n   * Get the target that opened this target. Top-level targets return `null`.\n   */\n  opener() {\n    throw new Error('not implemented');\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAuBA;;;AAGA,WAAYA,UAYX;AAZD,WAAYA,UAAU;EACpBA,2BAAa;EACbA,iDAAmC;EACnCA,+CAAiC;EACjCA,6CAA+B;EAC/BA,iCAAmB;EACnBA,iCAAmB;EACnBA,6BAAe;EACf;;;EAGAA,yBAAW;AACb,CAAC,EAZWA,UAAU,KAAVA,UAAU;AActB;;;;;;;AAOA,OAAM,MAAOC,MAAM;EACjB;;;EAGAC,eAAyB;EAEzB;;;EAGA,MAAMC,MAAM;IACV,OAAO,IAAI;EACb;EAEA;;;;EAIA,MAAMC,IAAI;IACR,OAAO,IAAI;EACb;EAEAC,GAAG;IACD,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAC,gBAAgB;IACd,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;;;;EAOAE,IAAI;IACF,MAAM,IAAIF,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAG,OAAO;IACL,MAAM,IAAIH,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAI,cAAc;IACZ,MAAM,IAAIJ,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAK,MAAM;IACJ,MAAM,IAAIL,KAAK,CAAC,iBAAiB,CAAC;EACpC","names":["TargetType","Target","constructor","worker","page","url","Error","createCDPSession","type","browser","browserContext","opener"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\api\\Target.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Browser} from '../api/Browser.js';\nimport type {BrowserContext} from '../api/BrowserContext.js';\nimport type {Page} from '../api/Page.js';\nimport type {WebWorker} from '../cdp/WebWorker.js';\n\nimport type {CDPSession} from './CDPSession.js';\n\n/**\n * @public\n */\nexport enum TargetType {\n  PAGE = 'page',\n  BACKGROUND_PAGE = 'background_page',\n  SERVICE_WORKER = 'service_worker',\n  SHARED_WORKER = 'shared_worker',\n  BROWSER = 'browser',\n  WEBVIEW = 'webview',\n  OTHER = 'other',\n  /**\n   * @internal\n   */\n  TAB = 'tab',\n}\n\n/**\n * Target represents a\n * {@link https://chromedevtools.github.io/devtools-protocol/tot/Target/ | CDP target}.\n * In CDP a target is something that can be debugged such a frame, a page or a\n * worker.\n * @public\n */\nexport class Target {\n  /**\n   * @internal\n   */\n  protected constructor() {}\n\n  /**\n   * If the target is not of type `\"service_worker\"` or `\"shared_worker\"`, returns `null`.\n   */\n  async worker(): Promise<WebWorker | null> {\n    return null;\n  }\n\n  /**\n   * If the target is not of type `\"page\"`, `\"webview\"` or `\"background_page\"`,\n   * returns `null`.\n   */\n  async page(): Promise<Page | null> {\n    return null;\n  }\n\n  url(): string {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Creates a Chrome Devtools Protocol session attached to the target.\n   */\n  createCDPSession(): Promise<CDPSession> {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Identifies what kind of target this is.\n   *\n   * @remarks\n   *\n   * See {@link https://developer.chrome.com/extensions/background_pages | docs} for more info about background pages.\n   */\n  type(): TargetType {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Get the browser the target belongs to.\n   */\n  browser(): Browser {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Get the browser context the target belongs to.\n   */\n  browserContext(): BrowserContext {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Get the target that opened this target. Top-level targets return `null`.\n   */\n  opener(): Target | undefined {\n    throw new Error('not implemented');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}