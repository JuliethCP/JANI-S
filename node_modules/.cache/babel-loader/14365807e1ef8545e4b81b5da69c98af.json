{"ast":null,"code":"var _fs;\ntry {\n  _fs = require('graceful-fs');\n} catch (_) {\n  _fs = require('fs');\n}\nfunction readFile(file, options, callback) {\n  if (callback == null) {\n    callback = options;\n    options = {};\n  }\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n  options = options || {};\n  var fs = options.fs || _fs;\n  var shouldThrow = true;\n  if ('throws' in options) {\n    shouldThrow = options.throws;\n  }\n  fs.readFile(file, options, function (err, data) {\n    if (err) return callback(err);\n    data = stripBom(data);\n    var obj;\n    try {\n      obj = JSON.parse(data, options ? options.reviver : null);\n    } catch (err2) {\n      if (shouldThrow) {\n        err2.message = file + ': ' + err2.message;\n        return callback(err2);\n      } else {\n        return callback(null, null);\n      }\n    }\n    callback(null, obj);\n  });\n}\nfunction readFileSync(file, options) {\n  options = options || {};\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n  var fs = options.fs || _fs;\n  var shouldThrow = true;\n  if ('throws' in options) {\n    shouldThrow = options.throws;\n  }\n  try {\n    var content = fs.readFileSync(file, options);\n    content = stripBom(content);\n    return JSON.parse(content, options.reviver);\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = file + ': ' + err.message;\n      throw err;\n    } else {\n      return null;\n    }\n  }\n}\nfunction stringify(obj, options) {\n  var spaces;\n  var EOL = '\\n';\n  if (typeof options === 'object' && options !== null) {\n    if (options.spaces) {\n      spaces = options.spaces;\n    }\n    if (options.EOL) {\n      EOL = options.EOL;\n    }\n  }\n  var str = JSON.stringify(obj, options ? options.replacer : null, spaces);\n  return str.replace(/\\n/g, EOL) + EOL;\n}\nfunction writeFile(file, obj, options, callback) {\n  if (callback == null) {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  var fs = options.fs || _fs;\n  var str = '';\n  try {\n    str = stringify(obj, options);\n  } catch (err) {\n    // Need to return whether a callback was passed or not\n    if (callback) callback(err, null);\n    return;\n  }\n  fs.writeFile(file, str, options, callback);\n}\nfunction writeFileSync(file, obj, options) {\n  options = options || {};\n  var fs = options.fs || _fs;\n  var str = stringify(obj, options);\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options);\n}\nfunction stripBom(content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8');\n  content = content.replace(/^\\uFEFF/, '');\n  return content;\n}\nvar jsonfile = {\n  readFile: readFile,\n  readFileSync: readFileSync,\n  writeFile: writeFile,\n  writeFileSync: writeFileSync\n};\nmodule.exports = jsonfile;","map":{"version":3,"names":["_fs","require","_","readFile","file","options","callback","encoding","fs","shouldThrow","throws","err","data","stripBom","obj","JSON","parse","reviver","err2","message","readFileSync","content","stringify","spaces","EOL","str","replacer","replace","writeFile","writeFileSync","Buffer","isBuffer","toString","jsonfile","module","exports"],"sources":["D:/Julieth-Campos/PSO/node_modules/get-uri/node_modules/jsonfile/index.js"],"sourcesContent":["var _fs\ntry {\n  _fs = require('graceful-fs')\n} catch (_) {\n  _fs = require('fs')\n}\n\nfunction readFile (file, options, callback) {\n  if (callback == null) {\n    callback = options\n    options = {}\n  }\n\n  if (typeof options === 'string') {\n    options = {encoding: options}\n  }\n\n  options = options || {}\n  var fs = options.fs || _fs\n\n  var shouldThrow = true\n  if ('throws' in options) {\n    shouldThrow = options.throws\n  }\n\n  fs.readFile(file, options, function (err, data) {\n    if (err) return callback(err)\n\n    data = stripBom(data)\n\n    var obj\n    try {\n      obj = JSON.parse(data, options ? options.reviver : null)\n    } catch (err2) {\n      if (shouldThrow) {\n        err2.message = file + ': ' + err2.message\n        return callback(err2)\n      } else {\n        return callback(null, null)\n      }\n    }\n\n    callback(null, obj)\n  })\n}\n\nfunction readFileSync (file, options) {\n  options = options || {}\n  if (typeof options === 'string') {\n    options = {encoding: options}\n  }\n\n  var fs = options.fs || _fs\n\n  var shouldThrow = true\n  if ('throws' in options) {\n    shouldThrow = options.throws\n  }\n\n  try {\n    var content = fs.readFileSync(file, options)\n    content = stripBom(content)\n    return JSON.parse(content, options.reviver)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = file + ': ' + err.message\n      throw err\n    } else {\n      return null\n    }\n  }\n}\n\nfunction stringify (obj, options) {\n  var spaces\n  var EOL = '\\n'\n  if (typeof options === 'object' && options !== null) {\n    if (options.spaces) {\n      spaces = options.spaces\n    }\n    if (options.EOL) {\n      EOL = options.EOL\n    }\n  }\n\n  var str = JSON.stringify(obj, options ? options.replacer : null, spaces)\n\n  return str.replace(/\\n/g, EOL) + EOL\n}\n\nfunction writeFile (file, obj, options, callback) {\n  if (callback == null) {\n    callback = options\n    options = {}\n  }\n  options = options || {}\n  var fs = options.fs || _fs\n\n  var str = ''\n  try {\n    str = stringify(obj, options)\n  } catch (err) {\n    // Need to return whether a callback was passed or not\n    if (callback) callback(err, null)\n    return\n  }\n\n  fs.writeFile(file, str, options, callback)\n}\n\nfunction writeFileSync (file, obj, options) {\n  options = options || {}\n  var fs = options.fs || _fs\n\n  var str = stringify(obj, options)\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options)\n}\n\nfunction stripBom (content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8')\n  content = content.replace(/^\\uFEFF/, '')\n  return content\n}\n\nvar jsonfile = {\n  readFile: readFile,\n  readFileSync: readFileSync,\n  writeFile: writeFile,\n  writeFileSync: writeFileSync\n}\n\nmodule.exports = jsonfile\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}