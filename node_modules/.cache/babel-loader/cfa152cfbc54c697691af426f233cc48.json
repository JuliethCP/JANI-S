{"ast":null,"code":"import { Mutex } from 'async-mutex';\n\n/**\r\n * Source able to dynamically change the type of input (video, camera) while the MorphCast SDK is running.\r\n * You can use it as an input source of the SDK.\r\n *\r\n *\r\n * @example\r\n *\r\n * const input = new Source();\r\n *\r\n * CY.loader()\r\n *   .source(input)\r\n *   // etc...\r\n *\r\n * input.useVideoElement(videoEl);\r\n * // ..or..\r\n * input.useCamera({deviceId: 0, toVideoElement: videoEl});\r\n *\r\n */\n\n/*Prevents globalThis being reported as an error by eslint*/\n/*global globalThis*/\nexport class Source {\n  constructor() {\n    this.currentSource = {\n      getFrame: async () => {},\n      start: async () => {},\n      stop: () => {},\n      stopped: true,\n      isDummySource: true\n    };\n    this.mutex = new Mutex();\n  }\n  async getFrame(maxSize) {\n    return await this.mutex.runExclusive(async () => {\n      return await this.currentSource.getFrame(maxSize);\n    });\n  }\n  async start() {\n    return await this.mutex.runExclusive(async () => {\n      return await this.currentSource.start();\n    });\n  }\n  stop() {\n    return this.currentSource.stop();\n  }\n  get stopped() {\n    return this.currentSource.stopped;\n  }\n  getCurrentSource() {\n    return this.currentSource;\n  }\n  async _safeReplace(source) {\n    return await this.mutex.runExclusive(async () => {\n      const wasStopped = this.currentSource.stopped;\n      this.currentSource.stop();\n      this.currentSource = source;\n      if (!wasStopped) {\n        await this.currentSource.start();\n      }\n      return this.currentSource;\n    });\n  }\n\n  /**\r\n   * Uses the specified video element as a source.\r\n   *\r\n   * @param videoEl the video element\r\n   * @returns a Promise resolved as soon as the operation is completed, or rejected in case of error\r\n   */\n  async useVideoElement(videoEl) {\n    return await this._safeReplace(globalThis.CY.createSource.fromVideoElement(videoEl));\n  }\n\n  /**\r\n   * Get a list of available camera devices.\r\n   * Each object in the array describes one of the available video devices (only device-types for which permission has been granted are \"available\").\r\n   * The order is significant - the default capture devices will be listed first.\r\n   *\r\n   * If enumeration fails, the promise is rejected.\r\n   *\r\n   * @example\r\n   *\r\n   * const videoDevices = await getAvailableCameraList();\r\n   *\r\n   * @returns {Promise<MediaDeviceInfo[]>}\r\n   */\n  async getAvailableCameraList() {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n      throw new Error(\"enumerateDevices() not supported.\");\n    }\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    const videoDevices = devices.filter(device => device.kind === \"videoinput\");\n    if (!isMobile() && videoDevices.length > 1) {\n      console.log('TODO: openDialogSwitchCamera()');\n    }\n    return videoDevices;\n  }\n\n  /**\r\n   *\r\n   * Open a new camera stream and uses it as a source. Internally, it uses getUserMedia.\r\n   *\r\n   * @example\r\n   *\r\n   * const source = new Source();\r\n   *\r\n   * source.useCamera()\r\n   *\r\n   * // or...\r\n   *\r\n   * source.useCamera({deviceId: 0})\r\n   *\r\n   * // or...\r\n   *\r\n   * source.useCamera({deviceId: cameras[0].deviceId, toVideoElement: document.getElementById(\"videoEl\")})\r\n   *\r\n   * @param deviceId optional; when a String is provided, it represents the deviceId of the camera. When an Integer is provided, it represent the element number in the ordered list returned by getAvailableCameraList() method.\r\n   * @param toVideoElement optional; video tag that will receive getUserMedia stream as srcObject. If you don't specify any video element, an internal video element is used.\r\n   * @param constraints optional; getUserMedia constraints\r\n   * @param flip optional; Flips the acquired frame clockwise 90 degrees * flip value.\r\n   * @returns a Promise resolved as soon as the operation is completed, or rejected in case of error\r\n   */\n  async useCamera() {\n    let {\n      deviceId,\n      toVideoElement,\n      constraints,\n      flip\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const videoDevices = await this.getAvailableCameraList();\n    if (videoDevices.length === 0) {\n      throw new Error(\"There are no camera devices available.\");\n    }\n    if (Number.isInteger(deviceId)) {\n      deviceId = videoDevices[deviceId].deviceId;\n    }\n    const config = {\n      constraints: {\n        audio: false,\n        video: deviceId ? {\n          deviceId: {\n            exact: deviceId\n          }\n        } : true,\n        ...constraints\n      },\n      video: toVideoElement,\n      flip\n    };\n    return await this._safeReplace(globalThis.CY.createSource.fromCamera(config));\n  }\n}\nfunction isMobile() {\n  return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\\\-(n|u)|c55\\/|capi|ccwa|cdm\\\\-|cell|chtm|cldc|cmd\\\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\\\-|_)|g1 u|g560|gene|gf\\\\-5|g\\\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\\\-(m|p|t)|hei\\\\-|hi(pt|ta)|hp( i|ip)|hs\\\\-c|ht(c(\\\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\\\-(20|go|ma)|i230|iac( |\\\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\\\-[a-w])|libw|lynx|m1\\\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\\\-2|po(ck|rt|se)|prox|psio|pt\\\\-g|qa\\\\-a|qc(07|12|21|32|60|\\\\-[2-7]|i\\\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\\\-|oo|p\\\\-)|sdk\\/|se(c(\\\\-|0|1)|47|mc|nd|ri)|sgh\\\\-|shar|sie(\\\\-|m)|sk\\\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\\\-|v\\\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\\\-|tdg\\\\-|tel(i|m)|tim\\\\-|t\\\\-mo|to(pl|sh)|ts(70|m\\\\-|m3|m5)|tx\\\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\\\-|your|zeto|zte\\\\-/i.test(navigator.userAgent.substr(0, 4));\n}","map":{"version":3,"names":["Mutex","Source","constructor","currentSource","getFrame","start","stop","stopped","isDummySource","mutex","maxSize","runExclusive","getCurrentSource","_safeReplace","source","wasStopped","useVideoElement","videoEl","globalThis","CY","createSource","fromVideoElement","getAvailableCameraList","navigator","mediaDevices","enumerateDevices","Error","devices","videoDevices","filter","device","kind","isMobile","length","console","log","useCamera","deviceId","toVideoElement","constraints","flip","Number","isInteger","config","audio","video","exact","fromCamera","test","userAgent","substr"],"sources":["D:/Julieth-Campos/PSO/src/helpers/ai-sdk/Source.js"],"sourcesContent":["import {Mutex} from 'async-mutex';\r\n\r\n/**\r\n * Source able to dynamically change the type of input (video, camera) while the MorphCast SDK is running.\r\n * You can use it as an input source of the SDK.\r\n *\r\n *\r\n * @example\r\n *\r\n * const input = new Source();\r\n *\r\n * CY.loader()\r\n *   .source(input)\r\n *   // etc...\r\n *\r\n * input.useVideoElement(videoEl);\r\n * // ..or..\r\n * input.useCamera({deviceId: 0, toVideoElement: videoEl});\r\n *\r\n */\r\n\r\n/*Prevents globalThis being reported as an error by eslint*/\r\n/*global globalThis*/\r\nexport class Source {\r\n  constructor() {\r\n    this.currentSource = {\r\n      getFrame: async () => {\r\n      },\r\n      start: async () => {\r\n      },\r\n      stop: () => {\r\n      },\r\n      stopped: true,\r\n      isDummySource: true\r\n    };\r\n    this.mutex = new Mutex();\r\n  }\r\n\r\n  async getFrame(maxSize) {\r\n    return await this.mutex.runExclusive(async ()=>{\r\n      return await this.currentSource.getFrame(maxSize);\r\n    });\r\n  }\r\n\r\n  async start() {\r\n    return await this.mutex.runExclusive(async ()=> {\r\n      return await this.currentSource.start();\r\n    });\r\n  }\r\n\r\n  stop() {\r\n    return this.currentSource.stop();\r\n  }\r\n\r\n  get stopped() {\r\n    return this.currentSource.stopped;\r\n  }\r\n\r\n  getCurrentSource() {\r\n    return this.currentSource;\r\n  }\r\n\r\n  async _safeReplace(source) {\r\n    return await this.mutex.runExclusive(async () => {\r\n      const wasStopped = this.currentSource.stopped;\r\n      this.currentSource.stop();\r\n      this.currentSource = source;\r\n      if (!wasStopped) {\r\n        await this.currentSource.start();\r\n      }\r\n      return this.currentSource;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Uses the specified video element as a source.\r\n   *\r\n   * @param videoEl the video element\r\n   * @returns a Promise resolved as soon as the operation is completed, or rejected in case of error\r\n   */\r\n  async useVideoElement(videoEl) {\r\n    return await this._safeReplace(globalThis.CY.createSource.fromVideoElement(videoEl));\r\n  }\r\n\r\n  /**\r\n   * Get a list of available camera devices.\r\n   * Each object in the array describes one of the available video devices (only device-types for which permission has been granted are \"available\").\r\n   * The order is significant - the default capture devices will be listed first.\r\n   *\r\n   * If enumeration fails, the promise is rejected.\r\n   *\r\n   * @example\r\n   *\r\n   * const videoDevices = await getAvailableCameraList();\r\n   *\r\n   * @returns {Promise<MediaDeviceInfo[]>}\r\n   */\r\n  async getAvailableCameraList() {\r\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n      throw new Error(\"enumerateDevices() not supported.\");\r\n    }\r\n\r\n    const devices = await navigator.mediaDevices.enumerateDevices();\r\n    const videoDevices = devices.filter((device) => device.kind === \"videoinput\");\r\n    if (!isMobile() && videoDevices.length > 1) {\r\n      console.log('TODO: openDialogSwitchCamera()');\r\n    }\r\n    return videoDevices;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Open a new camera stream and uses it as a source. Internally, it uses getUserMedia.\r\n   *\r\n   * @example\r\n   *\r\n   * const source = new Source();\r\n   *\r\n   * source.useCamera()\r\n   *\r\n   * // or...\r\n   *\r\n   * source.useCamera({deviceId: 0})\r\n   *\r\n   * // or...\r\n   *\r\n   * source.useCamera({deviceId: cameras[0].deviceId, toVideoElement: document.getElementById(\"videoEl\")})\r\n   *\r\n   * @param deviceId optional; when a String is provided, it represents the deviceId of the camera. When an Integer is provided, it represent the element number in the ordered list returned by getAvailableCameraList() method.\r\n   * @param toVideoElement optional; video tag that will receive getUserMedia stream as srcObject. If you don't specify any video element, an internal video element is used.\r\n   * @param constraints optional; getUserMedia constraints\r\n   * @param flip optional; Flips the acquired frame clockwise 90 degrees * flip value.\r\n   * @returns a Promise resolved as soon as the operation is completed, or rejected in case of error\r\n   */\r\n  async useCamera({deviceId, toVideoElement, constraints, flip} = {}) {\r\n    const videoDevices = await this.getAvailableCameraList();\r\n    if (videoDevices.length === 0) {\r\n      throw new Error(\"There are no camera devices available.\");\r\n    }\r\n\r\n    if(Number.isInteger(deviceId)) {\r\n      deviceId = videoDevices[deviceId].deviceId;\r\n    }\r\n\r\n    const config = {\r\n      constraints: {\r\n        audio : false,\r\n        video : (deviceId ? {deviceId: {exact: deviceId}} : true),\r\n        ...constraints\r\n      },\r\n      video: toVideoElement,\r\n      flip\r\n    };\r\n    return await this._safeReplace(globalThis.CY.createSource.fromCamera(config));\r\n  }\r\n}\r\n\r\nfunction isMobile() {\r\n  return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n    || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\\\-(n|u)|c55\\/|capi|ccwa|cdm\\\\-|cell|chtm|cldc|cmd\\\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\\\-|_)|g1 u|g560|gene|gf\\\\-5|g\\\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\\\-(m|p|t)|hei\\\\-|hi(pt|ta)|hp( i|ip)|hs\\\\-c|ht(c(\\\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\\\-(20|go|ma)|i230|iac( |\\\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\\\-[a-w])|libw|lynx|m1\\\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\\\-2|po(ck|rt|se)|prox|psio|pt\\\\-g|qa\\\\-a|qc(07|12|21|32|60|\\\\-[2-7]|i\\\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\\\-|oo|p\\\\-)|sdk\\/|se(c(\\\\-|0|1)|47|mc|nd|ri)|sgh\\\\-|shar|sie(\\\\-|m)|sk\\\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\\\-|v\\\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\\\-|tdg\\\\-|tel(i|m)|tim\\\\-|t\\\\-mo|to(pl|sh)|ts(70|m\\\\-|m3|m5)|tx\\\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\\\-|your|zeto|zte\\\\-/i.test(navigator.userAgent.substr(0, 4));\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}