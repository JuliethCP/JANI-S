{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dataUriToBuffer = void 0;\nfunction base64ToArrayBuffer(base64) {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  const bytes = [];\n  for (let i = 0; i < base64.length; i += 4) {\n    const idx0 = chars.indexOf(base64.charAt(i));\n    const idx1 = chars.indexOf(base64.charAt(i + 1));\n    const idx2 = base64.charAt(i + 2) === '=' ? 0 : chars.indexOf(base64.charAt(i + 2));\n    const idx3 = base64.charAt(i + 3) === '=' ? 0 : chars.indexOf(base64.charAt(i + 3));\n    const bin0 = idx0 << 2 | idx1 >> 4;\n    const bin1 = (idx1 & 15) << 4 | idx2 >> 2;\n    const bin2 = (idx2 & 3) << 6 | idx3;\n    bytes.push(bin0);\n    if (base64.charAt(i + 2) !== '=') bytes.push(bin1);\n    if (base64.charAt(i + 3) !== '=') bytes.push(bin2);\n  }\n  const buffer = new ArrayBuffer(bytes.length);\n  const view = new Uint8Array(buffer);\n  view.set(bytes);\n  return buffer;\n}\nfunction stringToBuffer(str) {\n  // Create a buffer with length equal to the string length\n  const buffer = new ArrayBuffer(str.length);\n  // Create a view to manipulate the buffer content\n  const view = new Uint8Array(buffer);\n  // Iterate over the string and populate the buffer with ASCII codes\n  for (let i = 0; i < str.length; i++) {\n    view[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n */\nfunction dataUriToBuffer(uri) {\n  uri = String(uri);\n  if (!/^data:/i.test(uri)) {\n    throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n  }\n  // strip newlines\n  uri = uri.replace(/\\r?\\n/g, '');\n  // split the URI up into the \"metadata\" and the \"data\" portions\n  const firstComma = uri.indexOf(',');\n  if (firstComma === -1 || firstComma <= 4) {\n    throw new TypeError('malformed data: URI');\n  }\n  // remove the \"data:\" scheme and parse the metadata\n  const meta = uri.substring(5, firstComma).split(';');\n  let charset = '';\n  let base64 = false;\n  const type = meta[0] || 'text/plain';\n  let typeFull = type;\n  for (let i = 1; i < meta.length; i++) {\n    if (meta[i] === 'base64') {\n      base64 = true;\n    } else if (meta[i]) {\n      typeFull += `;${meta[i]}`;\n      if (meta[i].indexOf('charset=') === 0) {\n        charset = meta[i].substring(8);\n      }\n    }\n  }\n  // defaults to US-ASCII only if type is not provided\n  if (!meta[0] && !charset.length) {\n    typeFull += ';charset=US-ASCII';\n    charset = 'US-ASCII';\n  }\n  // get the encoded data portion and decode URI-encoded chars\n  const data = unescape(uri.substring(firstComma + 1));\n  const buffer = base64 ? base64ToArrayBuffer(data) : stringToBuffer(data);\n  return {\n    type,\n    typeFull,\n    charset,\n    buffer\n  };\n}\nexports.dataUriToBuffer = dataUriToBuffer;","map":{"version":3,"mappings":"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","names":["base64ToArrayBuffer","base64","chars","bytes","i","length","idx0","indexOf","charAt","idx1","idx2","idx3","bin0","bin1","bin2","push","buffer","ArrayBuffer","view","Uint8Array","set","stringToBuffer","str","charCodeAt","dataUriToBuffer","uri","String","test","TypeError","replace","firstComma","meta","substring","split","charset","type","typeFull","data","unescape","exports"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}