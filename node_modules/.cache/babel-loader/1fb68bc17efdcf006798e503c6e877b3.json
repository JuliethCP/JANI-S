{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport path from 'path';\nimport { getJSON } from '../httpUtil.js';\nimport { BrowserPlatform, ChromeReleaseChannel } from './types.js';\nfunction folder(platform) {\n  switch (platform) {\n    case BrowserPlatform.LINUX:\n      return 'linux64';\n    case BrowserPlatform.MAC_ARM:\n      return 'mac-arm64';\n    case BrowserPlatform.MAC:\n      return 'mac-x64';\n    case BrowserPlatform.WIN32:\n      return 'win32';\n    case BrowserPlatform.WIN64:\n      return 'win64';\n  }\n}\nexport function resolveDownloadUrl(platform, buildId) {\n  let baseUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing';\n  return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\nexport function resolveDownloadPath(platform, buildId) {\n  return [buildId, folder(platform), `chrome-${folder(platform)}.zip`];\n}\nexport function relativeExecutablePath(platform, _buildId) {\n  switch (platform) {\n    case BrowserPlatform.MAC:\n    case BrowserPlatform.MAC_ARM:\n      return path.join('chrome-' + folder(platform), 'Google Chrome for Testing.app', 'Contents', 'MacOS', 'Google Chrome for Testing');\n    case BrowserPlatform.LINUX:\n      return path.join('chrome-linux64', 'chrome');\n    case BrowserPlatform.WIN32:\n    case BrowserPlatform.WIN64:\n      return path.join('chrome-' + folder(platform), 'chrome.exe');\n  }\n}\nexport async function getLastKnownGoodReleaseForChannel(channel) {\n  const data = await getJSON(new URL('https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json'));\n  for (const channel of Object.keys(data.channels)) {\n    data.channels[channel.toLowerCase()] = data.channels[channel];\n    delete data.channels[channel];\n  }\n  return data.channels[channel];\n}\nexport async function getLastKnownGoodReleaseForMilestone(milestone) {\n  const data = await getJSON(new URL('https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'));\n  return data.milestones[milestone];\n}\nexport async function getLastKnownGoodReleaseForBuild(\n/**\n * @example `112.0.23`,\n */\nbuildPrefix) {\n  const data = await getJSON(new URL('https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build.json'));\n  return data.builds[buildPrefix];\n}\nexport async function resolveBuildId(channel) {\n  if (Object.values(ChromeReleaseChannel).includes(channel)) {\n    return (await getLastKnownGoodReleaseForChannel(channel)).version;\n  }\n  if (channel.match(/^\\d+$/)) {\n    // Potentially a milestone.\n    return (await getLastKnownGoodReleaseForMilestone(channel))?.version;\n  }\n  if (channel.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    // Potentially a build prefix without the patch version.\n    return (await getLastKnownGoodReleaseForBuild(channel))?.version;\n  }\n  return;\n}\nexport function resolveSystemExecutablePath(platform, channel) {\n  switch (platform) {\n    case BrowserPlatform.WIN64:\n    case BrowserPlatform.WIN32:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.BETA:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Beta\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.CANARY:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome SxS\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.DEV:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Dev\\\\Application\\\\chrome.exe`;\n      }\n    case BrowserPlatform.MAC_ARM:\n    case BrowserPlatform.MAC:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';\n        case ChromeReleaseChannel.BETA:\n          return '/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta';\n        case ChromeReleaseChannel.CANARY:\n          return '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary';\n        case ChromeReleaseChannel.DEV:\n          return '/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev';\n      }\n    case BrowserPlatform.LINUX:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return '/opt/google/chrome/chrome';\n        case ChromeReleaseChannel.BETA:\n          return '/opt/google/chrome-beta/chrome';\n        case ChromeReleaseChannel.DEV:\n          return '/opt/google/chrome-unstable/chrome';\n      }\n  }\n  throw new Error(`Unable to detect browser executable path for '${channel}' on ${platform}.`);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,IAAI,MAAM,MAAM;AAEvB,SAAQC,OAAO,QAAO,gBAAgB;AAEtC,SAAQC,eAAe,EAAEC,oBAAoB,QAAO,YAAY;AAEhE,SAASC,MAAM,CAACC,QAAyB;EACvC,QAAQA,QAAQ;IACd,KAAKH,eAAe,CAACI,KAAK;MACxB,OAAO,SAAS;IAClB,KAAKJ,eAAe,CAACK,OAAO;MAC1B,OAAO,WAAW;IACpB,KAAKL,eAAe,CAACM,GAAG;MACtB,OAAO,SAAS;IAClB,KAAKN,eAAe,CAACO,KAAK;MACxB,OAAO,OAAO;IAChB,KAAKP,eAAe,CAACQ,KAAK;MACxB,OAAO,OAAO;EAAC;AAErB;AAEA,OAAM,SAAUC,kBAAkB,CAChCN,QAAyB,EACzBO,OAAe,EACwD;EAAA,IAAvEC,OAAO,uEAAG,6DAA6D;EAEvE,OAAO,GAAGA,OAAO,IAAIC,mBAAmB,CAACT,QAAQ,EAAEO,OAAO,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC,EAAE;AACzE;AAEA,OAAM,SAAUD,mBAAmB,CACjCT,QAAyB,EACzBO,OAAe;EAEf,OAAO,CAACA,OAAO,EAAER,MAAM,CAACC,QAAQ,CAAC,EAAE,UAAUD,MAAM,CAACC,QAAQ,CAAC,MAAM,CAAC;AACtE;AAEA,OAAM,SAAUW,sBAAsB,CACpCX,QAAyB,EACzBY,QAAgB;EAEhB,QAAQZ,QAAQ;IACd,KAAKH,eAAe,CAACM,GAAG;IACxB,KAAKN,eAAe,CAACK,OAAO;MAC1B,OAAOP,IAAI,CAACe,IAAI,CACd,SAAS,GAAGX,MAAM,CAACC,QAAQ,CAAC,EAC5B,+BAA+B,EAC/B,UAAU,EACV,OAAO,EACP,2BAA2B,CAC5B;IACH,KAAKH,eAAe,CAACI,KAAK;MACxB,OAAON,IAAI,CAACe,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC;IAC9C,KAAKb,eAAe,CAACO,KAAK;IAC1B,KAAKP,eAAe,CAACQ,KAAK;MACxB,OAAOV,IAAI,CAACe,IAAI,CAAC,SAAS,GAAGX,MAAM,CAACC,QAAQ,CAAC,EAAE,YAAY,CAAC;EAAC;AAEnE;AAEA,OAAO,eAAea,iCAAiC,CACrDC,OAA6B;EAE7B,MAAMC,IAAI,GAAI,MAAMnB,OAAO,CACzB,IAAIoB,GAAG,CACL,qFAAqF,CACtF,CAGF;EAED,KAAK,MAAMF,OAAO,IAAIG,MAAM,CAACC,IAAI,CAACH,IAAI,CAACI,QAAQ,CAAC,EAAE;IAChDJ,IAAI,CAACI,QAAQ,CAACL,OAAO,CAACM,WAAW,EAAE,CAAC,GAAGL,IAAI,CAACI,QAAQ,CAACL,OAAO,CAAE;IAC9D,OAAOC,IAAI,CAACI,QAAQ,CAACL,OAAO,CAAC;;EAG/B,OACEC,IAKD,CAACI,QAAQ,CAACL,OAAO,CAAC;AACrB;AAEA,OAAO,eAAeO,mCAAmC,CACvDC,SAAiB;EAEjB,MAAMP,IAAI,GAAI,MAAMnB,OAAO,CACzB,IAAIoB,GAAG,CACL,0FAA0F,CAC3F,CAGF;EACD,OAAOD,IAAI,CAACQ,UAAU,CAACD,SAAS,CAEnB;AACf;AAEA,OAAO,eAAeE,+BAA+B;AACnD;;;AAGAC,WAAmB;EAEnB,MAAMV,IAAI,GAAI,MAAMnB,OAAO,CACzB,IAAIoB,GAAG,CACL,4FAA4F,CAC7F,CAGF;EACD,OAAOD,IAAI,CAACW,MAAM,CAACD,WAAW,CAEjB;AACf;AAQA,OAAO,eAAeE,cAAc,CAClCb,OAAsC;EAEtC,IACEG,MAAM,CAACW,MAAM,CAAC9B,oBAAoB,CAAC,CAAC+B,QAAQ,CAC1Cf,OAA+B,CAChC,EACD;IACA,OAAO,CACL,MAAMD,iCAAiC,CAACC,OAA+B,CAAC,EACxEgB,OAAO;;EAEX,IAAIhB,OAAO,CAACiB,KAAK,CAAC,OAAO,CAAC,EAAE;IAC1B;IACA,OAAO,CAAC,MAAMV,mCAAmC,CAACP,OAAO,CAAC,GAAGgB,OAAO;;EAEtE,IAAIhB,OAAO,CAACiB,KAAK,CAAC,iBAAiB,CAAC,EAAE;IACpC;IACA,OAAO,CAAC,MAAMP,+BAA+B,CAACV,OAAO,CAAC,GAAGgB,OAAO;;EAElE;AACF;AAEA,OAAM,SAAUE,2BAA2B,CACzChC,QAAyB,EACzBc,OAA6B;EAE7B,QAAQd,QAAQ;IACd,KAAKH,eAAe,CAACQ,KAAK;IAC1B,KAAKR,eAAe,CAACO,KAAK;MACxB,QAAQU,OAAO;QACb,KAAKhB,oBAAoB,CAACmC,MAAM;UAC9B,OAAO,GAAGC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,2CAA2C;QAClF,KAAKrC,oBAAoB,CAACsC,IAAI;UAC5B,OAAO,GAAGF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,gDAAgD;QACvF,KAAKrC,oBAAoB,CAACuC,MAAM;UAC9B,OAAO,GAAGH,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,+CAA+C;QACtF,KAAKrC,oBAAoB,CAACwC,GAAG;UAC3B,OAAO,GAAGJ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,+CAA+C;MAAC;IAE3F,KAAKtC,eAAe,CAACK,OAAO;IAC5B,KAAKL,eAAe,CAACM,GAAG;MACtB,QAAQW,OAAO;QACb,KAAKhB,oBAAoB,CAACmC,MAAM;UAC9B,OAAO,8DAA8D;QACvE,KAAKnC,oBAAoB,CAACsC,IAAI;UAC5B,OAAO,wEAAwE;QACjF,KAAKtC,oBAAoB,CAACuC,MAAM;UAC9B,OAAO,4EAA4E;QACrF,KAAKvC,oBAAoB,CAACwC,GAAG;UAC3B,OAAO,sEAAsE;MAAC;IAEpF,KAAKzC,eAAe,CAACI,KAAK;MACxB,QAAQa,OAAO;QACb,KAAKhB,oBAAoB,CAACmC,MAAM;UAC9B,OAAO,2BAA2B;QACpC,KAAKnC,oBAAoB,CAACsC,IAAI;UAC5B,OAAO,gCAAgC;QACzC,KAAKtC,oBAAoB,CAACwC,GAAG;UAC3B,OAAO,oCAAoC;MAAC;EAC/C;EAGL,MAAM,IAAIC,KAAK,CACb,iDAAiDzB,OAAO,QAAQd,QAAQ,GAAG,CAC5E;AACH","names":["path","getJSON","BrowserPlatform","ChromeReleaseChannel","folder","platform","LINUX","MAC_ARM","MAC","WIN32","WIN64","resolveDownloadUrl","buildId","baseUrl","resolveDownloadPath","join","relativeExecutablePath","_buildId","getLastKnownGoodReleaseForChannel","channel","data","URL","Object","keys","channels","toLowerCase","getLastKnownGoodReleaseForMilestone","milestone","milestones","getLastKnownGoodReleaseForBuild","buildPrefix","builds","resolveBuildId","values","includes","version","match","resolveSystemExecutablePath","STABLE","process","env","BETA","CANARY","DEV","Error"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\@puppeteer\\browsers\\src\\browser-data\\chrome.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\n\nimport {getJSON} from '../httpUtil.js';\n\nimport {BrowserPlatform, ChromeReleaseChannel} from './types.js';\n\nfunction folder(platform: BrowserPlatform): string {\n  switch (platform) {\n    case BrowserPlatform.LINUX:\n      return 'linux64';\n    case BrowserPlatform.MAC_ARM:\n      return 'mac-arm64';\n    case BrowserPlatform.MAC:\n      return 'mac-x64';\n    case BrowserPlatform.WIN32:\n      return 'win32';\n    case BrowserPlatform.WIN64:\n      return 'win64';\n  }\n}\n\nexport function resolveDownloadUrl(\n  platform: BrowserPlatform,\n  buildId: string,\n  baseUrl = 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing'\n): string {\n  return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;\n}\n\nexport function resolveDownloadPath(\n  platform: BrowserPlatform,\n  buildId: string\n): string[] {\n  return [buildId, folder(platform), `chrome-${folder(platform)}.zip`];\n}\n\nexport function relativeExecutablePath(\n  platform: BrowserPlatform,\n  _buildId: string\n): string {\n  switch (platform) {\n    case BrowserPlatform.MAC:\n    case BrowserPlatform.MAC_ARM:\n      return path.join(\n        'chrome-' + folder(platform),\n        'Google Chrome for Testing.app',\n        'Contents',\n        'MacOS',\n        'Google Chrome for Testing'\n      );\n    case BrowserPlatform.LINUX:\n      return path.join('chrome-linux64', 'chrome');\n    case BrowserPlatform.WIN32:\n    case BrowserPlatform.WIN64:\n      return path.join('chrome-' + folder(platform), 'chrome.exe');\n  }\n}\n\nexport async function getLastKnownGoodReleaseForChannel(\n  channel: ChromeReleaseChannel\n): Promise<{version: string; revision: string}> {\n  const data = (await getJSON(\n    new URL(\n      'https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json'\n    )\n  )) as {\n    channels: Record<string, {version: string}>;\n  };\n\n  for (const channel of Object.keys(data.channels)) {\n    data.channels[channel.toLowerCase()] = data.channels[channel]!;\n    delete data.channels[channel];\n  }\n\n  return (\n    data as {\n      channels: {\n        [channel in ChromeReleaseChannel]: {version: string; revision: string};\n      };\n    }\n  ).channels[channel];\n}\n\nexport async function getLastKnownGoodReleaseForMilestone(\n  milestone: string\n): Promise<{version: string; revision: string} | undefined> {\n  const data = (await getJSON(\n    new URL(\n      'https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'\n    )\n  )) as {\n    milestones: Record<string, {version: string; revision: string}>;\n  };\n  return data.milestones[milestone] as\n    | {version: string; revision: string}\n    | undefined;\n}\n\nexport async function getLastKnownGoodReleaseForBuild(\n  /**\n   * @example `112.0.23`,\n   */\n  buildPrefix: string\n): Promise<{version: string; revision: string} | undefined> {\n  const data = (await getJSON(\n    new URL(\n      'https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build.json'\n    )\n  )) as {\n    builds: Record<string, {version: string; revision: string}>;\n  };\n  return data.builds[buildPrefix] as\n    | {version: string; revision: string}\n    | undefined;\n}\n\nexport async function resolveBuildId(\n  channel: ChromeReleaseChannel\n): Promise<string>;\nexport async function resolveBuildId(\n  channel: string\n): Promise<string | undefined>;\nexport async function resolveBuildId(\n  channel: ChromeReleaseChannel | string\n): Promise<string | undefined> {\n  if (\n    Object.values(ChromeReleaseChannel).includes(\n      channel as ChromeReleaseChannel\n    )\n  ) {\n    return (\n      await getLastKnownGoodReleaseForChannel(channel as ChromeReleaseChannel)\n    ).version;\n  }\n  if (channel.match(/^\\d+$/)) {\n    // Potentially a milestone.\n    return (await getLastKnownGoodReleaseForMilestone(channel))?.version;\n  }\n  if (channel.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    // Potentially a build prefix without the patch version.\n    return (await getLastKnownGoodReleaseForBuild(channel))?.version;\n  }\n  return;\n}\n\nexport function resolveSystemExecutablePath(\n  platform: BrowserPlatform,\n  channel: ChromeReleaseChannel\n): string {\n  switch (platform) {\n    case BrowserPlatform.WIN64:\n    case BrowserPlatform.WIN32:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.BETA:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Beta\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.CANARY:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome SxS\\\\Application\\\\chrome.exe`;\n        case ChromeReleaseChannel.DEV:\n          return `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Dev\\\\Application\\\\chrome.exe`;\n      }\n    case BrowserPlatform.MAC_ARM:\n    case BrowserPlatform.MAC:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';\n        case ChromeReleaseChannel.BETA:\n          return '/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta';\n        case ChromeReleaseChannel.CANARY:\n          return '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary';\n        case ChromeReleaseChannel.DEV:\n          return '/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev';\n      }\n    case BrowserPlatform.LINUX:\n      switch (channel) {\n        case ChromeReleaseChannel.STABLE:\n          return '/opt/google/chrome/chrome';\n        case ChromeReleaseChannel.BETA:\n          return '/opt/google/chrome-beta/chrome';\n        case ChromeReleaseChannel.DEV:\n          return '/opt/google/chrome-unstable/chrome';\n      }\n  }\n\n  throw new Error(\n    `Unable to detect browser executable path for '${channel}' on ${platform}.`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}