{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The HTTPResponse class represents responses which are received by the\n * {@link Page} class.\n *\n * @public\n */\nexport class HTTPResponse {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * True if the response was successful (status in the range 200-299).\n   */\n  ok() {\n    // TODO: document === 0 case?\n    const status = this.status();\n    return status === 0 || status >= 200 && status <= 299;\n  }\n  /**\n   * Promise which resolves to a text representation of response body.\n   */\n  async text() {\n    const content = await this.buffer();\n    return content.toString('utf8');\n  }\n  /**\n   * Promise which resolves to a JSON representation of response body.\n   *\n   * @remarks\n   *\n   * This method will throw if the response body is not parsable via\n   * `JSON.parse`.\n   */\n  async json() {\n    const content = await this.text();\n    return JSON.parse(content);\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AA+BA;;;;;;AAMA,OAAM,MAAgBA,YAAY;EAChC;;;EAGAC,eAAe;EAaf;;;EAGAC,EAAE;IACA;IACA,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM,EAAE;IAC5B,OAAOA,MAAM,KAAK,CAAC,IAAKA,MAAM,IAAI,GAAG,IAAIA,MAAM,IAAI,GAAI;EACzD;EAmCA;;;EAGA,MAAMC,IAAI;IACR,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACC,MAAM,EAAE;IACnC,OAAOD,OAAO,CAACE,QAAQ,CAAC,MAAM,CAAC;EACjC;EAEA;;;;;;;;EAQA,MAAMC,IAAI;IACR,MAAMH,OAAO,GAAG,MAAM,IAAI,CAACD,IAAI,EAAE;IACjC,OAAOK,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC;EAC5B","names":["HTTPResponse","constructor","ok","status","text","content","buffer","toString","json","JSON","parse"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\api\\HTTPResponse.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type Protocol from 'devtools-protocol';\n\nimport type {SecurityDetails} from '../common/SecurityDetails.js';\n\nimport type {Frame} from './Frame.js';\nimport type {HTTPRequest} from './HTTPRequest.js';\n\n/**\n * @public\n */\nexport interface RemoteAddress {\n  ip?: string;\n  port?: number;\n}\n\n/**\n * The HTTPResponse class represents responses which are received by the\n * {@link Page} class.\n *\n * @public\n */\nexport abstract class HTTPResponse {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * The IP address and port number used to connect to the remote\n   * server.\n   */\n  abstract remoteAddress(): RemoteAddress;\n\n  /**\n   * The URL of the response.\n   */\n  abstract url(): string;\n\n  /**\n   * True if the response was successful (status in the range 200-299).\n   */\n  ok(): boolean {\n    // TODO: document === 0 case?\n    const status = this.status();\n    return status === 0 || (status >= 200 && status <= 299);\n  }\n\n  /**\n   * The status code of the response (e.g., 200 for a success).\n   */\n  abstract status(): number;\n\n  /**\n   * The status text of the response (e.g. usually an \"OK\" for a\n   * success).\n   */\n  abstract statusText(): string;\n\n  /**\n   * An object with HTTP headers associated with the response. All\n   * header names are lower-case.\n   */\n  abstract headers(): Record<string, string>;\n\n  /**\n   * {@link SecurityDetails} if the response was received over the\n   * secure connection, or `null` otherwise.\n   */\n  abstract securityDetails(): SecurityDetails | null;\n\n  /**\n   * Timing information related to the response.\n   */\n  abstract timing(): Protocol.Network.ResourceTiming | null;\n\n  /**\n   * Promise which resolves to a buffer with response body.\n   */\n  abstract buffer(): Promise<Buffer>;\n\n  /**\n   * Promise which resolves to a text representation of response body.\n   */\n  async text(): Promise<string> {\n    const content = await this.buffer();\n    return content.toString('utf8');\n  }\n\n  /**\n   * Promise which resolves to a JSON representation of response body.\n   *\n   * @remarks\n   *\n   * This method will throw if the response body is not parsable via\n   * `JSON.parse`.\n   */\n  async json(): Promise<any> {\n    const content = await this.text();\n    return JSON.parse(content);\n  }\n\n  /**\n   * A matching {@link HTTPRequest} object.\n   */\n  abstract request(): HTTPRequest;\n\n  /**\n   * True if the response was served from either the browser's disk\n   * cache or memory cache.\n   */\n  abstract fromCache(): boolean;\n\n  /**\n   * True if the response was served by a service worker.\n   */\n  abstract fromServiceWorker(): boolean;\n\n  /**\n   * A {@link Frame} that initiated this response, or `null` if\n   * navigating to error pages.\n   */\n  abstract frame(): Frame | null;\n}\n"]},"metadata":{},"sourceType":"module"}