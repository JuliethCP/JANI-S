{"ast":null,"code":"\"use strict\";\n\n;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\nfunction default_1(fork) {\n  var types = fork.use(types_1.default);\n  var Type = types.Type;\n  var def = Type.def;\n  var or = Type.or;\n  var shared = fork.use(shared_1.default);\n  var defaults = shared.defaults;\n  var geq = shared.geq;\n  // Abstract supertype of all syntactic entities that are allowed to have a\n  // .loc field.\n  def(\"Printable\").field(\"loc\", or(def(\"SourceLocation\"), null), defaults[\"null\"], true);\n  def(\"Node\").bases(\"Printable\").field(\"type\", String).field(\"comments\", or([def(\"Comment\")], null), defaults[\"null\"], true);\n  def(\"SourceLocation\").field(\"start\", def(\"Position\")).field(\"end\", def(\"Position\")).field(\"source\", or(String, null), defaults[\"null\"]);\n  def(\"Position\").field(\"line\", geq(1)).field(\"column\", geq(0));\n  def(\"File\").bases(\"Node\").build(\"program\", \"name\").field(\"program\", def(\"Program\")).field(\"name\", or(String, null), defaults[\"null\"]);\n  def(\"Program\").bases(\"Node\").build(\"body\").field(\"body\", [def(\"Statement\")]);\n  def(\"Function\").bases(\"Node\").field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"]).field(\"params\", [def(\"Pattern\")]).field(\"body\", def(\"BlockStatement\")).field(\"generator\", Boolean, defaults[\"false\"]).field(\"async\", Boolean, defaults[\"false\"]);\n  def(\"Statement\").bases(\"Node\");\n  // The empty .build() here means that an EmptyStatement can be constructed\n  // (i.e. it's not abstract) but that it needs no arguments.\n  def(\"EmptyStatement\").bases(\"Statement\").build();\n  def(\"BlockStatement\").bases(\"Statement\").build(\"body\").field(\"body\", [def(\"Statement\")]);\n  // TODO Figure out how to silently coerce Expressions to\n  // ExpressionStatements where a Statement was expected.\n  def(\"ExpressionStatement\").bases(\"Statement\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n  def(\"IfStatement\").bases(\"Statement\").build(\"test\", \"consequent\", \"alternate\").field(\"test\", def(\"Expression\")).field(\"consequent\", def(\"Statement\")).field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\n  def(\"LabeledStatement\").bases(\"Statement\").build(\"label\", \"body\").field(\"label\", def(\"Identifier\")).field(\"body\", def(\"Statement\"));\n  def(\"BreakStatement\").bases(\"Statement\").build(\"label\").field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n  def(\"ContinueStatement\").bases(\"Statement\").build(\"label\").field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n  def(\"WithStatement\").bases(\"Statement\").build(\"object\", \"body\").field(\"object\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n  def(\"SwitchStatement\").bases(\"Statement\").build(\"discriminant\", \"cases\", \"lexical\").field(\"discriminant\", def(\"Expression\")).field(\"cases\", [def(\"SwitchCase\")]).field(\"lexical\", Boolean, defaults[\"false\"]);\n  def(\"ReturnStatement\").bases(\"Statement\").build(\"argument\").field(\"argument\", or(def(\"Expression\"), null));\n  def(\"ThrowStatement\").bases(\"Statement\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n  def(\"TryStatement\").bases(\"Statement\").build(\"block\", \"handler\", \"finalizer\").field(\"block\", def(\"BlockStatement\")).field(\"handler\", or(def(\"CatchClause\"), null), function () {\n    return this.handlers && this.handlers[0] || null;\n  }).field(\"handlers\", [def(\"CatchClause\")], function () {\n    return this.handler ? [this.handler] : [];\n  }, true) // Indicates this field is hidden from eachField iteration.\n  .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray).field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\n  def(\"CatchClause\").bases(\"Node\").build(\"param\", \"guard\", \"body\")\n  // https://github.com/tc39/proposal-optional-catch-binding\n  .field(\"param\", or(def(\"Pattern\"), null), defaults[\"null\"]).field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"]).field(\"body\", def(\"BlockStatement\"));\n  def(\"WhileStatement\").bases(\"Statement\").build(\"test\", \"body\").field(\"test\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n  def(\"DoWhileStatement\").bases(\"Statement\").build(\"body\", \"test\").field(\"body\", def(\"Statement\")).field(\"test\", def(\"Expression\"));\n  def(\"ForStatement\").bases(\"Statement\").build(\"init\", \"test\", \"update\", \"body\").field(\"init\", or(def(\"VariableDeclaration\"), def(\"Expression\"), null)).field(\"test\", or(def(\"Expression\"), null)).field(\"update\", or(def(\"Expression\"), null)).field(\"body\", def(\"Statement\"));\n  def(\"ForInStatement\").bases(\"Statement\").build(\"left\", \"right\", \"body\").field(\"left\", or(def(\"VariableDeclaration\"), def(\"Expression\"))).field(\"right\", def(\"Expression\")).field(\"body\", def(\"Statement\"));\n  def(\"DebuggerStatement\").bases(\"Statement\").build();\n  def(\"Declaration\").bases(\"Statement\");\n  def(\"FunctionDeclaration\").bases(\"Function\", \"Declaration\").build(\"id\", \"params\", \"body\").field(\"id\", def(\"Identifier\"));\n  def(\"FunctionExpression\").bases(\"Function\", \"Expression\").build(\"id\", \"params\", \"body\");\n  def(\"VariableDeclaration\").bases(\"Declaration\").build(\"kind\", \"declarations\").field(\"kind\", or(\"var\", \"let\", \"const\")).field(\"declarations\", [def(\"VariableDeclarator\")]);\n  def(\"VariableDeclarator\").bases(\"Node\").build(\"id\", \"init\").field(\"id\", def(\"Pattern\")).field(\"init\", or(def(\"Expression\"), null), defaults[\"null\"]);\n  def(\"Expression\").bases(\"Node\");\n  def(\"ThisExpression\").bases(\"Expression\").build();\n  def(\"ArrayExpression\").bases(\"Expression\").build(\"elements\").field(\"elements\", [or(def(\"Expression\"), null)]);\n  def(\"ObjectExpression\").bases(\"Expression\").build(\"properties\").field(\"properties\", [def(\"Property\")]);\n  // TODO Not in the Mozilla Parser API, but used by Esprima.\n  def(\"Property\").bases(\"Node\") // Want to be able to visit Property Nodes.\n  .build(\"kind\", \"key\", \"value\").field(\"kind\", or(\"init\", \"get\", \"set\")).field(\"key\", or(def(\"Literal\"), def(\"Identifier\"))).field(\"value\", def(\"Expression\"));\n  def(\"SequenceExpression\").bases(\"Expression\").build(\"expressions\").field(\"expressions\", [def(\"Expression\")]);\n  var UnaryOperator = or(\"-\", \"+\", \"!\", \"~\", \"typeof\", \"void\", \"delete\");\n  def(\"UnaryExpression\").bases(\"Expression\").build(\"operator\", \"argument\", \"prefix\").field(\"operator\", UnaryOperator).field(\"argument\", def(\"Expression\"))\n  // Esprima doesn't bother with this field, presumably because it's\n  // always true for unary operators.\n  .field(\"prefix\", Boolean, defaults[\"true\"]);\n  var BinaryOperator = or(\"==\", \"!=\", \"===\", \"!==\", \"<\", \"<=\", \">\", \">=\", \"<<\", \">>\", \">>>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \"&\",\n  // TODO Missing from the Parser API.\n  \"|\", \"^\", \"in\", \"instanceof\");\n  def(\"BinaryExpression\").bases(\"Expression\").build(\"operator\", \"left\", \"right\").field(\"operator\", BinaryOperator).field(\"left\", def(\"Expression\")).field(\"right\", def(\"Expression\"));\n  var AssignmentOperator = or(\"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"|=\", \"^=\", \"&=\");\n  def(\"AssignmentExpression\").bases(\"Expression\").build(\"operator\", \"left\", \"right\").field(\"operator\", AssignmentOperator).field(\"left\", or(def(\"Pattern\"), def(\"MemberExpression\"))).field(\"right\", def(\"Expression\"));\n  var UpdateOperator = or(\"++\", \"--\");\n  def(\"UpdateExpression\").bases(\"Expression\").build(\"operator\", \"argument\", \"prefix\").field(\"operator\", UpdateOperator).field(\"argument\", def(\"Expression\")).field(\"prefix\", Boolean);\n  var LogicalOperator = or(\"||\", \"&&\");\n  def(\"LogicalExpression\").bases(\"Expression\").build(\"operator\", \"left\", \"right\").field(\"operator\", LogicalOperator).field(\"left\", def(\"Expression\")).field(\"right\", def(\"Expression\"));\n  def(\"ConditionalExpression\").bases(\"Expression\").build(\"test\", \"consequent\", \"alternate\").field(\"test\", def(\"Expression\")).field(\"consequent\", def(\"Expression\")).field(\"alternate\", def(\"Expression\"));\n  def(\"NewExpression\").bases(\"Expression\").build(\"callee\", \"arguments\").field(\"callee\", def(\"Expression\"))\n  // The Mozilla Parser API gives this type as [or(def(\"Expression\"),\n  // null)], but null values don't really make sense at the call site.\n  // TODO Report this nonsense.\n  .field(\"arguments\", [def(\"Expression\")]);\n  def(\"CallExpression\").bases(\"Expression\").build(\"callee\", \"arguments\").field(\"callee\", def(\"Expression\"))\n  // See comment for NewExpression above.\n  .field(\"arguments\", [def(\"Expression\")]);\n  def(\"MemberExpression\").bases(\"Expression\").build(\"object\", \"property\", \"computed\").field(\"object\", def(\"Expression\")).field(\"property\", or(def(\"Identifier\"), def(\"Expression\"))).field(\"computed\", Boolean, function () {\n    var type = this.property.type;\n    if (type === 'Literal' || type === 'MemberExpression' || type === 'BinaryExpression') {\n      return true;\n    }\n    return false;\n  });\n  def(\"Pattern\").bases(\"Node\");\n  def(\"SwitchCase\").bases(\"Node\").build(\"test\", \"consequent\").field(\"test\", or(def(\"Expression\"), null)).field(\"consequent\", [def(\"Statement\")]);\n  def(\"Identifier\").bases(\"Expression\", \"Pattern\").build(\"name\").field(\"name\", String).field(\"optional\", Boolean, defaults[\"false\"]);\n  def(\"Literal\").bases(\"Expression\").build(\"value\").field(\"value\", or(String, Boolean, null, Number, RegExp)).field(\"regex\", or({\n    pattern: String,\n    flags: String\n  }, null), function () {\n    if (this.value instanceof RegExp) {\n      var flags = \"\";\n      if (this.value.ignoreCase) flags += \"i\";\n      if (this.value.multiline) flags += \"m\";\n      if (this.value.global) flags += \"g\";\n      return {\n        pattern: this.value.source,\n        flags: flags\n      };\n    }\n    return null;\n  });\n  // Abstract (non-buildable) comment supertype. Not a Node.\n  def(\"Comment\").bases(\"Printable\").field(\"value\", String)\n  // A .leading comment comes before the node, whereas a .trailing\n  // comment comes after it. These two fields should not both be true,\n  // but they might both be false when the comment falls inside a node\n  // and the node has no children for the comment to lead or trail,\n  // e.g. { /*dangling*/ }.\n  .field(\"leading\", Boolean, defaults[\"true\"]).field(\"trailing\", Boolean, defaults[\"false\"]);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib_1","require","types_1","__importDefault","shared_1","default_1","fork","types","use","default","Type","def","or","shared","defaults","geq","field","bases","String","build","Boolean","handlers","handler","emptyArray","UnaryOperator","BinaryOperator","AssignmentOperator","UpdateOperator","LogicalOperator","type","property","Number","RegExp","pattern","flags","ignoreCase","multiline","global","source","module"],"sources":["D:/Julieth-Campos/PSO/node_modules/ast-types/def/core.js"],"sourcesContent":["\"use strict\";;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\nfunction default_1(fork) {\n    var types = fork.use(types_1.default);\n    var Type = types.Type;\n    var def = Type.def;\n    var or = Type.or;\n    var shared = fork.use(shared_1.default);\n    var defaults = shared.defaults;\n    var geq = shared.geq;\n    // Abstract supertype of all syntactic entities that are allowed to have a\n    // .loc field.\n    def(\"Printable\")\n        .field(\"loc\", or(def(\"SourceLocation\"), null), defaults[\"null\"], true);\n    def(\"Node\")\n        .bases(\"Printable\")\n        .field(\"type\", String)\n        .field(\"comments\", or([def(\"Comment\")], null), defaults[\"null\"], true);\n    def(\"SourceLocation\")\n        .field(\"start\", def(\"Position\"))\n        .field(\"end\", def(\"Position\"))\n        .field(\"source\", or(String, null), defaults[\"null\"]);\n    def(\"Position\")\n        .field(\"line\", geq(1))\n        .field(\"column\", geq(0));\n    def(\"File\")\n        .bases(\"Node\")\n        .build(\"program\", \"name\")\n        .field(\"program\", def(\"Program\"))\n        .field(\"name\", or(String, null), defaults[\"null\"]);\n    def(\"Program\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n    def(\"Function\")\n        .bases(\"Node\")\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"params\", [def(\"Pattern\")])\n        .field(\"body\", def(\"BlockStatement\"))\n        .field(\"generator\", Boolean, defaults[\"false\"])\n        .field(\"async\", Boolean, defaults[\"false\"]);\n    def(\"Statement\").bases(\"Node\");\n    // The empty .build() here means that an EmptyStatement can be constructed\n    // (i.e. it's not abstract) but that it needs no arguments.\n    def(\"EmptyStatement\").bases(\"Statement\").build();\n    def(\"BlockStatement\")\n        .bases(\"Statement\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n    // TODO Figure out how to silently coerce Expressions to\n    // ExpressionStatements where a Statement was expected.\n    def(\"ExpressionStatement\")\n        .bases(\"Statement\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n    def(\"IfStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Statement\"))\n        .field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\n    def(\"LabeledStatement\")\n        .bases(\"Statement\")\n        .build(\"label\", \"body\")\n        .field(\"label\", def(\"Identifier\"))\n        .field(\"body\", def(\"Statement\"));\n    def(\"BreakStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    def(\"ContinueStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n    def(\"WithStatement\")\n        .bases(\"Statement\")\n        .build(\"object\", \"body\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n    def(\"SwitchStatement\")\n        .bases(\"Statement\")\n        .build(\"discriminant\", \"cases\", \"lexical\")\n        .field(\"discriminant\", def(\"Expression\"))\n        .field(\"cases\", [def(\"SwitchCase\")])\n        .field(\"lexical\", Boolean, defaults[\"false\"]);\n    def(\"ReturnStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", or(def(\"Expression\"), null));\n    def(\"ThrowStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n    def(\"TryStatement\")\n        .bases(\"Statement\")\n        .build(\"block\", \"handler\", \"finalizer\")\n        .field(\"block\", def(\"BlockStatement\"))\n        .field(\"handler\", or(def(\"CatchClause\"), null), function () {\n        return this.handlers && this.handlers[0] || null;\n    })\n        .field(\"handlers\", [def(\"CatchClause\")], function () {\n        return this.handler ? [this.handler] : [];\n    }, true) // Indicates this field is hidden from eachField iteration.\n        .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray)\n        .field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\n    def(\"CatchClause\")\n        .bases(\"Node\")\n        .build(\"param\", \"guard\", \"body\")\n        // https://github.com/tc39/proposal-optional-catch-binding\n        .field(\"param\", or(def(\"Pattern\"), null), defaults[\"null\"])\n        .field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"])\n        .field(\"body\", def(\"BlockStatement\"));\n    def(\"WhileStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"body\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n    def(\"DoWhileStatement\")\n        .bases(\"Statement\")\n        .build(\"body\", \"test\")\n        .field(\"body\", def(\"Statement\"))\n        .field(\"test\", def(\"Expression\"));\n    def(\"ForStatement\")\n        .bases(\"Statement\")\n        .build(\"init\", \"test\", \"update\", \"body\")\n        .field(\"init\", or(def(\"VariableDeclaration\"), def(\"Expression\"), null))\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"update\", or(def(\"Expression\"), null))\n        .field(\"body\", def(\"Statement\"));\n    def(\"ForInStatement\")\n        .bases(\"Statement\")\n        .build(\"left\", \"right\", \"body\")\n        .field(\"left\", or(def(\"VariableDeclaration\"), def(\"Expression\")))\n        .field(\"right\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n    def(\"DebuggerStatement\").bases(\"Statement\").build();\n    def(\"Declaration\").bases(\"Statement\");\n    def(\"FunctionDeclaration\")\n        .bases(\"Function\", \"Declaration\")\n        .build(\"id\", \"params\", \"body\")\n        .field(\"id\", def(\"Identifier\"));\n    def(\"FunctionExpression\")\n        .bases(\"Function\", \"Expression\")\n        .build(\"id\", \"params\", \"body\");\n    def(\"VariableDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"kind\", \"declarations\")\n        .field(\"kind\", or(\"var\", \"let\", \"const\"))\n        .field(\"declarations\", [def(\"VariableDeclarator\")]);\n    def(\"VariableDeclarator\")\n        .bases(\"Node\")\n        .build(\"id\", \"init\")\n        .field(\"id\", def(\"Pattern\"))\n        .field(\"init\", or(def(\"Expression\"), null), defaults[\"null\"]);\n    def(\"Expression\").bases(\"Node\");\n    def(\"ThisExpression\").bases(\"Expression\").build();\n    def(\"ArrayExpression\")\n        .bases(\"Expression\")\n        .build(\"elements\")\n        .field(\"elements\", [or(def(\"Expression\"), null)]);\n    def(\"ObjectExpression\")\n        .bases(\"Expression\")\n        .build(\"properties\")\n        .field(\"properties\", [def(\"Property\")]);\n    // TODO Not in the Mozilla Parser API, but used by Esprima.\n    def(\"Property\")\n        .bases(\"Node\") // Want to be able to visit Property Nodes.\n        .build(\"kind\", \"key\", \"value\")\n        .field(\"kind\", or(\"init\", \"get\", \"set\"))\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))\n        .field(\"value\", def(\"Expression\"));\n    def(\"SequenceExpression\")\n        .bases(\"Expression\")\n        .build(\"expressions\")\n        .field(\"expressions\", [def(\"Expression\")]);\n    var UnaryOperator = or(\"-\", \"+\", \"!\", \"~\", \"typeof\", \"void\", \"delete\");\n    def(\"UnaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UnaryOperator)\n        .field(\"argument\", def(\"Expression\"))\n        // Esprima doesn't bother with this field, presumably because it's\n        // always true for unary operators.\n        .field(\"prefix\", Boolean, defaults[\"true\"]);\n    var BinaryOperator = or(\"==\", \"!=\", \"===\", \"!==\", \"<\", \"<=\", \">\", \">=\", \"<<\", \">>\", \">>>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \"&\", // TODO Missing from the Parser API.\n    \"|\", \"^\", \"in\", \"instanceof\");\n    def(\"BinaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", BinaryOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n    var AssignmentOperator = or(\"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"|=\", \"^=\", \"&=\");\n    def(\"AssignmentExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", AssignmentOperator)\n        .field(\"left\", or(def(\"Pattern\"), def(\"MemberExpression\")))\n        .field(\"right\", def(\"Expression\"));\n    var UpdateOperator = or(\"++\", \"--\");\n    def(\"UpdateExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UpdateOperator)\n        .field(\"argument\", def(\"Expression\"))\n        .field(\"prefix\", Boolean);\n    var LogicalOperator = or(\"||\", \"&&\");\n    def(\"LogicalExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", LogicalOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n    def(\"ConditionalExpression\")\n        .bases(\"Expression\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Expression\"))\n        .field(\"alternate\", def(\"Expression\"));\n    def(\"NewExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // The Mozilla Parser API gives this type as [or(def(\"Expression\"),\n        // null)], but null values don't really make sense at the call site.\n        // TODO Report this nonsense.\n        .field(\"arguments\", [def(\"Expression\")]);\n    def(\"CallExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // See comment for NewExpression above.\n        .field(\"arguments\", [def(\"Expression\")]);\n    def(\"MemberExpression\")\n        .bases(\"Expression\")\n        .build(\"object\", \"property\", \"computed\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"property\", or(def(\"Identifier\"), def(\"Expression\")))\n        .field(\"computed\", Boolean, function () {\n        var type = this.property.type;\n        if (type === 'Literal' ||\n            type === 'MemberExpression' ||\n            type === 'BinaryExpression') {\n            return true;\n        }\n        return false;\n    });\n    def(\"Pattern\").bases(\"Node\");\n    def(\"SwitchCase\")\n        .bases(\"Node\")\n        .build(\"test\", \"consequent\")\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"consequent\", [def(\"Statement\")]);\n    def(\"Identifier\")\n        .bases(\"Expression\", \"Pattern\")\n        .build(\"name\")\n        .field(\"name\", String)\n        .field(\"optional\", Boolean, defaults[\"false\"]);\n    def(\"Literal\")\n        .bases(\"Expression\")\n        .build(\"value\")\n        .field(\"value\", or(String, Boolean, null, Number, RegExp))\n        .field(\"regex\", or({\n        pattern: String,\n        flags: String\n    }, null), function () {\n        if (this.value instanceof RegExp) {\n            var flags = \"\";\n            if (this.value.ignoreCase)\n                flags += \"i\";\n            if (this.value.multiline)\n                flags += \"m\";\n            if (this.value.global)\n                flags += \"g\";\n            return {\n                pattern: this.value.source,\n                flags: flags\n            };\n        }\n        return null;\n    });\n    // Abstract (non-buildable) comment supertype. Not a Node.\n    def(\"Comment\")\n        .bases(\"Printable\")\n        .field(\"value\", String)\n        // A .leading comment comes before the node, whereas a .trailing\n        // comment comes after it. These two fields should not both be true,\n        // but they might both be false when the comment falls inside a node\n        // and the node has no children for the comment to lead or trail,\n        // e.g. { /*dangling*/ }.\n        .field(\"leading\", Boolean, defaults[\"true\"])\n        .field(\"trailing\", Boolean, defaults[\"false\"]);\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}