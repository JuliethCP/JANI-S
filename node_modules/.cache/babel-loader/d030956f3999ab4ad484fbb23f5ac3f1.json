{"ast":null,"code":"var __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __setFunctionName = this && this.__setFunctionName || function (f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", {\n    configurable: true,\n    value: prefix ? \"\".concat(prefix, \" \", name) : name\n  });\n};\nimport { CDPSessionEvent } from '../api/CDPSession.js';\nimport { debugError } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { invokeAtMostOnceForArguments } from '../util/decorators.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\n/**\n * @internal\n */\nexport class EmulatedState {\n  #state;\n  #clientProvider;\n  #updater;\n  constructor(initialState, clientProvider, updater) {\n    this.#state = initialState;\n    this.#clientProvider = clientProvider;\n    this.#updater = updater;\n    this.#clientProvider.registerState(this);\n  }\n  async setState(state) {\n    this.#state = state;\n    await this.sync();\n  }\n  get state() {\n    return this.#state;\n  }\n  async sync() {\n    await Promise.all(this.#clientProvider.clients().map(client => {\n      return this.#updater(client, this.#state);\n    }));\n  }\n}\n/**\n * @internal\n */\nlet EmulationManager = (() => {\n  let _instanceExtraInitializers = [];\n  let _private_applyViewport_decorators;\n  let _private_applyViewport_descriptor;\n  let _private_emulateIdleState_decorators;\n  let _private_emulateIdleState_descriptor;\n  let _private_emulateTimezone_decorators;\n  let _private_emulateTimezone_descriptor;\n  let _private_emulateVisionDeficiency_decorators;\n  let _private_emulateVisionDeficiency_descriptor;\n  let _private_emulateCpuThrottling_decorators;\n  let _private_emulateCpuThrottling_descriptor;\n  let _private_emulateMediaFeatures_decorators;\n  let _private_emulateMediaFeatures_descriptor;\n  let _private_emulateMediaType_decorators;\n  let _private_emulateMediaType_descriptor;\n  let _private_setGeolocation_decorators;\n  let _private_setGeolocation_descriptor;\n  let _private_setDefaultBackgroundColor_decorators;\n  let _private_setDefaultBackgroundColor_descriptor;\n  let _private_setJavaScriptEnabled_decorators;\n  let _private_setJavaScriptEnabled_descriptor;\n  return class EmulationManager {\n    static #_ = (() => {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      _private_applyViewport_decorators = [invokeAtMostOnceForArguments];\n      _private_emulateIdleState_decorators = [invokeAtMostOnceForArguments];\n      _private_emulateTimezone_decorators = [invokeAtMostOnceForArguments];\n      _private_emulateVisionDeficiency_decorators = [invokeAtMostOnceForArguments];\n      _private_emulateCpuThrottling_decorators = [invokeAtMostOnceForArguments];\n      _private_emulateMediaFeatures_decorators = [invokeAtMostOnceForArguments];\n      _private_emulateMediaType_decorators = [invokeAtMostOnceForArguments];\n      _private_setGeolocation_decorators = [invokeAtMostOnceForArguments];\n      _private_setDefaultBackgroundColor_decorators = [invokeAtMostOnceForArguments];\n      _private_setJavaScriptEnabled_decorators = [invokeAtMostOnceForArguments];\n      __esDecorate(this, _private_applyViewport_descriptor = {\n        value: __setFunctionName(async function (client, viewportState) {\n          if (!viewportState.viewport) {\n            return;\n          }\n          const {\n            viewport\n          } = viewportState;\n          const mobile = viewport.isMobile || false;\n          const width = viewport.width;\n          const height = viewport.height;\n          const deviceScaleFactor = viewport.deviceScaleFactor ?? 1;\n          const screenOrientation = viewport.isLandscape ? {\n            angle: 90,\n            type: 'landscapePrimary'\n          } : {\n            angle: 0,\n            type: 'portraitPrimary'\n          };\n          const hasTouch = viewport.hasTouch || false;\n          await Promise.all([client.send('Emulation.setDeviceMetricsOverride', {\n            mobile,\n            width,\n            height,\n            deviceScaleFactor,\n            screenOrientation\n          }), client.send('Emulation.setTouchEmulationEnabled', {\n            enabled: hasTouch\n          })]);\n        }, \"#applyViewport\")\n      }, _private_applyViewport_decorators, {\n        kind: \"method\",\n        name: \"#applyViewport\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #applyViewport in obj,\n          get: obj => obj.#applyViewport\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateIdleState_descriptor = {\n        value: __setFunctionName(async function (client, idleStateState) {\n          if (!idleStateState.active) {\n            return;\n          }\n          if (idleStateState.overrides) {\n            await client.send('Emulation.setIdleOverride', {\n              isUserActive: idleStateState.overrides.isUserActive,\n              isScreenUnlocked: idleStateState.overrides.isScreenUnlocked\n            });\n          } else {\n            await client.send('Emulation.clearIdleOverride');\n          }\n        }, \"#emulateIdleState\")\n      }, _private_emulateIdleState_decorators, {\n        kind: \"method\",\n        name: \"#emulateIdleState\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateIdleState in obj,\n          get: obj => obj.#emulateIdleState\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateTimezone_descriptor = {\n        value: __setFunctionName(async function (client, timezoneState) {\n          if (!timezoneState.active) {\n            return;\n          }\n          try {\n            await client.send('Emulation.setTimezoneOverride', {\n              timezoneId: timezoneState.timezoneId || ''\n            });\n          } catch (error) {\n            if (isErrorLike(error) && error.message.includes('Invalid timezone')) {\n              throw new Error(`Invalid timezone ID: ${timezoneState.timezoneId}`);\n            }\n            throw error;\n          }\n        }, \"#emulateTimezone\")\n      }, _private_emulateTimezone_decorators, {\n        kind: \"method\",\n        name: \"#emulateTimezone\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateTimezone in obj,\n          get: obj => obj.#emulateTimezone\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateVisionDeficiency_descriptor = {\n        value: __setFunctionName(async function (client, visionDeficiency) {\n          if (!visionDeficiency.active) {\n            return;\n          }\n          await client.send('Emulation.setEmulatedVisionDeficiency', {\n            type: visionDeficiency.visionDeficiency || 'none'\n          });\n        }, \"#emulateVisionDeficiency\")\n      }, _private_emulateVisionDeficiency_decorators, {\n        kind: \"method\",\n        name: \"#emulateVisionDeficiency\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateVisionDeficiency in obj,\n          get: obj => obj.#emulateVisionDeficiency\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateCpuThrottling_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setCPUThrottlingRate', {\n            rate: state.factor ?? 1\n          });\n        }, \"#emulateCpuThrottling\")\n      }, _private_emulateCpuThrottling_decorators, {\n        kind: \"method\",\n        name: \"#emulateCpuThrottling\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateCpuThrottling in obj,\n          get: obj => obj.#emulateCpuThrottling\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateMediaFeatures_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setEmulatedMedia', {\n            features: state.mediaFeatures\n          });\n        }, \"#emulateMediaFeatures\")\n      }, _private_emulateMediaFeatures_decorators, {\n        kind: \"method\",\n        name: \"#emulateMediaFeatures\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateMediaFeatures in obj,\n          get: obj => obj.#emulateMediaFeatures\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_emulateMediaType_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setEmulatedMedia', {\n            media: state.type || ''\n          });\n        }, \"#emulateMediaType\")\n      }, _private_emulateMediaType_decorators, {\n        kind: \"method\",\n        name: \"#emulateMediaType\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #emulateMediaType in obj,\n          get: obj => obj.#emulateMediaType\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_setGeolocation_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setGeolocationOverride', state.geoLocation ? {\n            longitude: state.geoLocation.longitude,\n            latitude: state.geoLocation.latitude,\n            accuracy: state.geoLocation.accuracy\n          } : undefined);\n        }, \"#setGeolocation\")\n      }, _private_setGeolocation_decorators, {\n        kind: \"method\",\n        name: \"#setGeolocation\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #setGeolocation in obj,\n          get: obj => obj.#setGeolocation\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_setDefaultBackgroundColor_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setDefaultBackgroundColorOverride', {\n            color: state.color\n          });\n        }, \"#setDefaultBackgroundColor\")\n      }, _private_setDefaultBackgroundColor_decorators, {\n        kind: \"method\",\n        name: \"#setDefaultBackgroundColor\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #setDefaultBackgroundColor in obj,\n          get: obj => obj.#setDefaultBackgroundColor\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, _private_setJavaScriptEnabled_descriptor = {\n        value: __setFunctionName(async function (client, state) {\n          if (!state.active) {\n            return;\n          }\n          await client.send('Emulation.setScriptExecutionDisabled', {\n            value: !state.javaScriptEnabled\n          });\n        }, \"#setJavaScriptEnabled\")\n      }, _private_setJavaScriptEnabled_decorators, {\n        kind: \"method\",\n        name: \"#setJavaScriptEnabled\",\n        static: false,\n        private: true,\n        access: {\n          has: obj => #setJavaScriptEnabled in obj,\n          get: obj => obj.#setJavaScriptEnabled\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      if (_metadata) Object.defineProperty(this, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n    })();\n    #client = (__runInitializers(this, _instanceExtraInitializers), void 0);\n    #emulatingMobile = false;\n    #hasTouch = false;\n    #states = [];\n    #viewportState = new EmulatedState({\n      active: false\n    }, this, this.#applyViewport);\n    #idleOverridesState = new EmulatedState({\n      active: false\n    }, this, this.#emulateIdleState);\n    #timezoneState = new EmulatedState({\n      active: false\n    }, this, this.#emulateTimezone);\n    #visionDeficiencyState = new EmulatedState({\n      active: false\n    }, this, this.#emulateVisionDeficiency);\n    #cpuThrottlingState = new EmulatedState({\n      active: false\n    }, this, this.#emulateCpuThrottling);\n    #mediaFeaturesState = new EmulatedState({\n      active: false\n    }, this, this.#emulateMediaFeatures);\n    #mediaTypeState = new EmulatedState({\n      active: false\n    }, this, this.#emulateMediaType);\n    #geoLocationState = new EmulatedState({\n      active: false\n    }, this, this.#setGeolocation);\n    #defaultBackgroundColorState = new EmulatedState({\n      active: false\n    }, this, this.#setDefaultBackgroundColor);\n    #javascriptEnabledState = new EmulatedState({\n      javaScriptEnabled: true,\n      active: false\n    }, this, this.#setJavaScriptEnabled);\n    #secondaryClients = new Set();\n    constructor(client) {\n      this.#client = client;\n    }\n    updateClient(client) {\n      this.#client = client;\n      this.#secondaryClients.delete(client);\n    }\n    registerState(state) {\n      this.#states.push(state);\n    }\n    clients() {\n      return [this.#client, ...Array.from(this.#secondaryClients)];\n    }\n    async registerSpeculativeSession(client) {\n      this.#secondaryClients.add(client);\n      client.once(CDPSessionEvent.Disconnected, () => {\n        this.#secondaryClients.delete(client);\n      });\n      // We don't await here because we want to register all state changes before\n      // the target is unpaused.\n      void Promise.all(this.#states.map(s => {\n        return s.sync().catch(debugError);\n      }));\n    }\n    get javascriptEnabled() {\n      return this.#javascriptEnabledState.state.javaScriptEnabled;\n    }\n    async emulateViewport(viewport) {\n      await this.#viewportState.setState({\n        viewport,\n        active: true\n      });\n      const mobile = viewport.isMobile || false;\n      const hasTouch = viewport.hasTouch || false;\n      const reloadNeeded = this.#emulatingMobile !== mobile || this.#hasTouch !== hasTouch;\n      this.#emulatingMobile = mobile;\n      this.#hasTouch = hasTouch;\n      return reloadNeeded;\n    }\n    get #applyViewport() {\n      return _private_applyViewport_descriptor.value;\n    }\n    async emulateIdleState(overrides) {\n      await this.#idleOverridesState.setState({\n        active: true,\n        overrides\n      });\n    }\n    get #emulateIdleState() {\n      return _private_emulateIdleState_descriptor.value;\n    }\n    get #emulateTimezone() {\n      return _private_emulateTimezone_descriptor.value;\n    }\n    async emulateTimezone(timezoneId) {\n      await this.#timezoneState.setState({\n        timezoneId,\n        active: true\n      });\n    }\n    get #emulateVisionDeficiency() {\n      return _private_emulateVisionDeficiency_descriptor.value;\n    }\n    async emulateVisionDeficiency(type) {\n      const visionDeficiencies = new Set(['none', 'achromatopsia', 'blurredVision', 'deuteranopia', 'protanopia', 'tritanopia']);\n      assert(!type || visionDeficiencies.has(type), `Unsupported vision deficiency: ${type}`);\n      await this.#visionDeficiencyState.setState({\n        active: true,\n        visionDeficiency: type\n      });\n    }\n    get #emulateCpuThrottling() {\n      return _private_emulateCpuThrottling_descriptor.value;\n    }\n    async emulateCPUThrottling(factor) {\n      assert(factor === null || factor >= 1, 'Throttling rate should be greater or equal to 1');\n      await this.#cpuThrottlingState.setState({\n        active: true,\n        factor: factor ?? undefined\n      });\n    }\n    get #emulateMediaFeatures() {\n      return _private_emulateMediaFeatures_descriptor.value;\n    }\n    async emulateMediaFeatures(features) {\n      if (Array.isArray(features)) {\n        for (const mediaFeature of features) {\n          const name = mediaFeature.name;\n          assert(/^(?:prefers-(?:color-scheme|reduced-motion)|color-gamut)$/.test(name), 'Unsupported media feature: ' + name);\n        }\n      }\n      await this.#mediaFeaturesState.setState({\n        active: true,\n        mediaFeatures: features\n      });\n    }\n    get #emulateMediaType() {\n      return _private_emulateMediaType_descriptor.value;\n    }\n    async emulateMediaType(type) {\n      assert(type === 'screen' || type === 'print' || (type ?? undefined) === undefined, 'Unsupported media type: ' + type);\n      await this.#mediaTypeState.setState({\n        type,\n        active: true\n      });\n    }\n    get #setGeolocation() {\n      return _private_setGeolocation_descriptor.value;\n    }\n    async setGeolocation(options) {\n      const {\n        longitude,\n        latitude,\n        accuracy = 0\n      } = options;\n      if (longitude < -180 || longitude > 180) {\n        throw new Error(`Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`);\n      }\n      if (latitude < -90 || latitude > 90) {\n        throw new Error(`Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`);\n      }\n      if (accuracy < 0) {\n        throw new Error(`Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`);\n      }\n      await this.#geoLocationState.setState({\n        active: true,\n        geoLocation: {\n          longitude,\n          latitude,\n          accuracy\n        }\n      });\n    }\n    get #setDefaultBackgroundColor() {\n      return _private_setDefaultBackgroundColor_descriptor.value;\n    }\n    /**\n     * Resets default white background\n     */\n    async resetDefaultBackgroundColor() {\n      await this.#defaultBackgroundColorState.setState({\n        active: true,\n        color: undefined\n      });\n    }\n    /**\n     * Hides default white background\n     */\n    async setTransparentBackgroundColor() {\n      await this.#defaultBackgroundColorState.setState({\n        active: true,\n        color: {\n          r: 0,\n          g: 0,\n          b: 0,\n          a: 0\n        }\n      });\n    }\n    get #setJavaScriptEnabled() {\n      return _private_setJavaScriptEnabled_descriptor.value;\n    }\n    async setJavaScriptEnabled(enabled) {\n      await this.#javascriptEnabledState.setState({\n        active: true,\n        javaScriptEnabled: enabled\n      });\n    }\n  };\n})();\nexport { EmulationManager };","map":{"version":3,"mappings":"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","names":["CDPSessionEvent","debugError","assert","invokeAtMostOnceForArguments","isErrorLike","EmulatedState","constructor","initialState","clientProvider","updater","registerState","setState","state","sync","Promise","all","clients","map","client","EmulationManager","__esDecorate","value","viewportState","viewport","mobile","isMobile","width","height","deviceScaleFactor","screenOrientation","isLandscape","angle","type","hasTouch","send","enabled","kind","name","static","private","access","has","get","metadata","idleStateState","active","overrides","isUserActive","isScreenUnlocked","timezoneState","timezoneId","error","message","includes","Error","visionDeficiency","rate","factor","features","mediaFeatures","media","geoLocation","longitude","latitude","accuracy","undefined","color","javaScriptEnabled","Set","updateClient","delete","push","Array","from","registerSpeculativeSession","add","once","Disconnected","s","catch","javascriptEnabled","emulateViewport","reloadNeeded","emulateIdleState","emulateTimezone","emulateVisionDeficiency","visionDeficiencies","emulateCPUThrottling","emulateMediaFeatures","isArray","mediaFeature","test","emulateMediaType","setGeolocation","options","resetDefaultBackgroundColor","setTransparentBackgroundColor","r","g","b","a","setJavaScriptEnabled"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\EmulationManager.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type {Protocol} from 'devtools-protocol';\n\nimport {type CDPSession, CDPSessionEvent} from '../api/CDPSession.js';\nimport type {GeolocationOptions, MediaFeature} from '../api/Page.js';\nimport {debugError} from '../common/util.js';\nimport type {Viewport} from '../common/Viewport.js';\nimport {assert} from '../util/assert.js';\nimport {invokeAtMostOnceForArguments} from '../util/decorators.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\ninterface ViewportState {\n  viewport?: Viewport;\n  active: boolean;\n}\n\ninterface IdleOverridesState {\n  overrides?: {\n    isUserActive: boolean;\n    isScreenUnlocked: boolean;\n  };\n  active: boolean;\n}\n\ninterface TimezoneState {\n  timezoneId?: string;\n  active: boolean;\n}\n\ninterface VisionDeficiencyState {\n  visionDeficiency?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type'];\n  active: boolean;\n}\n\ninterface CpuThrottlingState {\n  factor?: number;\n  active: boolean;\n}\n\ninterface MediaFeaturesState {\n  mediaFeatures?: MediaFeature[];\n  active: boolean;\n}\n\ninterface MediaTypeState {\n  type?: string;\n  active: boolean;\n}\n\ninterface GeoLocationState {\n  geoLocation?: GeolocationOptions;\n  active: boolean;\n}\n\ninterface DefaultBackgroundColorState {\n  color?: Protocol.DOM.RGBA;\n  active: boolean;\n}\n\ninterface JavascriptEnabledState {\n  javaScriptEnabled: boolean;\n  active: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ClientProvider {\n  clients(): CDPSession[];\n  registerState(state: EmulatedState<any>): void;\n}\n\n/**\n * @internal\n */\nexport class EmulatedState<T extends {active: boolean}> {\n  #state: T;\n  #clientProvider: ClientProvider;\n  #updater: (client: CDPSession, state: T) => Promise<void>;\n\n  constructor(\n    initialState: T,\n    clientProvider: ClientProvider,\n    updater: (client: CDPSession, state: T) => Promise<void>\n  ) {\n    this.#state = initialState;\n    this.#clientProvider = clientProvider;\n    this.#updater = updater;\n    this.#clientProvider.registerState(this);\n  }\n\n  async setState(state: T): Promise<void> {\n    this.#state = state;\n    await this.sync();\n  }\n\n  get state(): T {\n    return this.#state;\n  }\n\n  async sync(): Promise<void> {\n    await Promise.all(\n      this.#clientProvider.clients().map(client => {\n        return this.#updater(client, this.#state);\n      })\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class EmulationManager {\n  #client: CDPSession;\n\n  #emulatingMobile = false;\n  #hasTouch = false;\n\n  #states: Array<EmulatedState<any>> = [];\n\n  #viewportState = new EmulatedState<ViewportState>(\n    {\n      active: false,\n    },\n    this,\n    this.#applyViewport\n  );\n  #idleOverridesState = new EmulatedState<IdleOverridesState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateIdleState\n  );\n  #timezoneState = new EmulatedState<TimezoneState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateTimezone\n  );\n  #visionDeficiencyState = new EmulatedState<VisionDeficiencyState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateVisionDeficiency\n  );\n  #cpuThrottlingState = new EmulatedState<CpuThrottlingState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateCpuThrottling\n  );\n  #mediaFeaturesState = new EmulatedState<MediaFeaturesState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateMediaFeatures\n  );\n  #mediaTypeState = new EmulatedState<MediaTypeState>(\n    {\n      active: false,\n    },\n    this,\n    this.#emulateMediaType\n  );\n  #geoLocationState = new EmulatedState<GeoLocationState>(\n    {\n      active: false,\n    },\n    this,\n    this.#setGeolocation\n  );\n  #defaultBackgroundColorState = new EmulatedState<DefaultBackgroundColorState>(\n    {\n      active: false,\n    },\n    this,\n    this.#setDefaultBackgroundColor\n  );\n  #javascriptEnabledState = new EmulatedState<JavascriptEnabledState>(\n    {\n      javaScriptEnabled: true,\n      active: false,\n    },\n    this,\n    this.#setJavaScriptEnabled\n  );\n\n  #secondaryClients = new Set<CDPSession>();\n\n  constructor(client: CDPSession) {\n    this.#client = client;\n  }\n\n  updateClient(client: CDPSession): void {\n    this.#client = client;\n    this.#secondaryClients.delete(client);\n  }\n\n  registerState(state: EmulatedState<any>): void {\n    this.#states.push(state);\n  }\n\n  clients(): CDPSession[] {\n    return [this.#client, ...Array.from(this.#secondaryClients)];\n  }\n\n  async registerSpeculativeSession(client: CDPSession): Promise<void> {\n    this.#secondaryClients.add(client);\n    client.once(CDPSessionEvent.Disconnected, () => {\n      this.#secondaryClients.delete(client);\n    });\n    // We don't await here because we want to register all state changes before\n    // the target is unpaused.\n    void Promise.all(\n      this.#states.map(s => {\n        return s.sync().catch(debugError);\n      })\n    );\n  }\n\n  get javascriptEnabled(): boolean {\n    return this.#javascriptEnabledState.state.javaScriptEnabled;\n  }\n\n  async emulateViewport(viewport: Viewport): Promise<boolean> {\n    await this.#viewportState.setState({\n      viewport,\n      active: true,\n    });\n\n    const mobile = viewport.isMobile || false;\n    const hasTouch = viewport.hasTouch || false;\n    const reloadNeeded =\n      this.#emulatingMobile !== mobile || this.#hasTouch !== hasTouch;\n    this.#emulatingMobile = mobile;\n    this.#hasTouch = hasTouch;\n\n    return reloadNeeded;\n  }\n\n  @invokeAtMostOnceForArguments\n  async #applyViewport(\n    client: CDPSession,\n    viewportState: ViewportState\n  ): Promise<void> {\n    if (!viewportState.viewport) {\n      return;\n    }\n    const {viewport} = viewportState;\n    const mobile = viewport.isMobile || false;\n    const width = viewport.width;\n    const height = viewport.height;\n    const deviceScaleFactor = viewport.deviceScaleFactor ?? 1;\n    const screenOrientation: Protocol.Emulation.ScreenOrientation =\n      viewport.isLandscape\n        ? {angle: 90, type: 'landscapePrimary'}\n        : {angle: 0, type: 'portraitPrimary'};\n    const hasTouch = viewport.hasTouch || false;\n\n    await Promise.all([\n      client.send('Emulation.setDeviceMetricsOverride', {\n        mobile,\n        width,\n        height,\n        deviceScaleFactor,\n        screenOrientation,\n      }),\n      client.send('Emulation.setTouchEmulationEnabled', {\n        enabled: hasTouch,\n      }),\n    ]);\n  }\n\n  async emulateIdleState(overrides?: {\n    isUserActive: boolean;\n    isScreenUnlocked: boolean;\n  }): Promise<void> {\n    await this.#idleOverridesState.setState({\n      active: true,\n      overrides,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateIdleState(\n    client: CDPSession,\n    idleStateState: IdleOverridesState\n  ): Promise<void> {\n    if (!idleStateState.active) {\n      return;\n    }\n    if (idleStateState.overrides) {\n      await client.send('Emulation.setIdleOverride', {\n        isUserActive: idleStateState.overrides.isUserActive,\n        isScreenUnlocked: idleStateState.overrides.isScreenUnlocked,\n      });\n    } else {\n      await client.send('Emulation.clearIdleOverride');\n    }\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateTimezone(\n    client: CDPSession,\n    timezoneState: TimezoneState\n  ): Promise<void> {\n    if (!timezoneState.active) {\n      return;\n    }\n    try {\n      await client.send('Emulation.setTimezoneOverride', {\n        timezoneId: timezoneState.timezoneId || '',\n      });\n    } catch (error) {\n      if (isErrorLike(error) && error.message.includes('Invalid timezone')) {\n        throw new Error(`Invalid timezone ID: ${timezoneState.timezoneId}`);\n      }\n      throw error;\n    }\n  }\n\n  async emulateTimezone(timezoneId?: string): Promise<void> {\n    await this.#timezoneState.setState({\n      timezoneId,\n      active: true,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateVisionDeficiency(\n    client: CDPSession,\n    visionDeficiency: VisionDeficiencyState\n  ): Promise<void> {\n    if (!visionDeficiency.active) {\n      return;\n    }\n    await client.send('Emulation.setEmulatedVisionDeficiency', {\n      type: visionDeficiency.visionDeficiency || 'none',\n    });\n  }\n\n  async emulateVisionDeficiency(\n    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type']\n  ): Promise<void> {\n    const visionDeficiencies = new Set<\n      Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type']\n    >([\n      'none',\n      'achromatopsia',\n      'blurredVision',\n      'deuteranopia',\n      'protanopia',\n      'tritanopia',\n    ]);\n    assert(\n      !type || visionDeficiencies.has(type),\n      `Unsupported vision deficiency: ${type}`\n    );\n    await this.#visionDeficiencyState.setState({\n      active: true,\n      visionDeficiency: type,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateCpuThrottling(\n    client: CDPSession,\n    state: CpuThrottlingState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setCPUThrottlingRate', {\n      rate: state.factor ?? 1,\n    });\n  }\n\n  async emulateCPUThrottling(factor: number | null): Promise<void> {\n    assert(\n      factor === null || factor >= 1,\n      'Throttling rate should be greater or equal to 1'\n    );\n    await this.#cpuThrottlingState.setState({\n      active: true,\n      factor: factor ?? undefined,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateMediaFeatures(\n    client: CDPSession,\n    state: MediaFeaturesState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setEmulatedMedia', {\n      features: state.mediaFeatures,\n    });\n  }\n\n  async emulateMediaFeatures(features?: MediaFeature[]): Promise<void> {\n    if (Array.isArray(features)) {\n      for (const mediaFeature of features) {\n        const name = mediaFeature.name;\n        assert(\n          /^(?:prefers-(?:color-scheme|reduced-motion)|color-gamut)$/.test(\n            name\n          ),\n          'Unsupported media feature: ' + name\n        );\n      }\n    }\n    await this.#mediaFeaturesState.setState({\n      active: true,\n      mediaFeatures: features,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #emulateMediaType(\n    client: CDPSession,\n    state: MediaTypeState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setEmulatedMedia', {\n      media: state.type || '',\n    });\n  }\n\n  async emulateMediaType(type?: string): Promise<void> {\n    assert(\n      type === 'screen' ||\n        type === 'print' ||\n        (type ?? undefined) === undefined,\n      'Unsupported media type: ' + type\n    );\n    await this.#mediaTypeState.setState({\n      type,\n      active: true,\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #setGeolocation(\n    client: CDPSession,\n    state: GeoLocationState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send(\n      'Emulation.setGeolocationOverride',\n      state.geoLocation\n        ? {\n            longitude: state.geoLocation.longitude,\n            latitude: state.geoLocation.latitude,\n            accuracy: state.geoLocation.accuracy,\n          }\n        : undefined\n    );\n  }\n\n  async setGeolocation(options: GeolocationOptions): Promise<void> {\n    const {longitude, latitude, accuracy = 0} = options;\n    if (longitude < -180 || longitude > 180) {\n      throw new Error(\n        `Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`\n      );\n    }\n    if (latitude < -90 || latitude > 90) {\n      throw new Error(\n        `Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`\n      );\n    }\n    if (accuracy < 0) {\n      throw new Error(\n        `Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`\n      );\n    }\n    await this.#geoLocationState.setState({\n      active: true,\n      geoLocation: {\n        longitude,\n        latitude,\n        accuracy,\n      },\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #setDefaultBackgroundColor(\n    client: CDPSession,\n    state: DefaultBackgroundColorState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setDefaultBackgroundColorOverride', {\n      color: state.color,\n    });\n  }\n\n  /**\n   * Resets default white background\n   */\n  async resetDefaultBackgroundColor(): Promise<void> {\n    await this.#defaultBackgroundColorState.setState({\n      active: true,\n      color: undefined,\n    });\n  }\n\n  /**\n   * Hides default white background\n   */\n  async setTransparentBackgroundColor(): Promise<void> {\n    await this.#defaultBackgroundColorState.setState({\n      active: true,\n      color: {r: 0, g: 0, b: 0, a: 0},\n    });\n  }\n\n  @invokeAtMostOnceForArguments\n  async #setJavaScriptEnabled(\n    client: CDPSession,\n    state: JavascriptEnabledState\n  ): Promise<void> {\n    if (!state.active) {\n      return;\n    }\n    await client.send('Emulation.setScriptExecutionDisabled', {\n      value: !state.javaScriptEnabled,\n    });\n  }\n\n  async setJavaScriptEnabled(enabled: boolean): Promise<void> {\n    await this.#javascriptEnabledState.setState({\n      active: true,\n      javaScriptEnabled: enabled,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}