{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseList = void 0;\nconst dosParser = __importStar(require(\"./parseListDOS\"));\nconst unixParser = __importStar(require(\"./parseListUnix\"));\nconst mlsdParser = __importStar(require(\"./parseListMLSD\"));\n/**\n * Available directory listing parsers. These are candidates that will be tested\n * in the order presented. The first candidate will be used to parse the whole list.\n */\nconst availableParsers = [dosParser, unixParser, mlsdParser // Keep MLSD last, may accept filename only\n];\n\nfunction firstCompatibleParser(line, parsers) {\n  return parsers.find(parser => parser.testLine(line) === true);\n}\nfunction isNotBlank(str) {\n  return str.trim() !== \"\";\n}\nfunction isNotMeta(str) {\n  return !str.startsWith(\"total\");\n}\nconst REGEX_NEWLINE = /\\r?\\n/;\n/**\n * Parse raw directory listing.\n */\nfunction parseList(rawList) {\n  const lines = rawList.split(REGEX_NEWLINE).filter(isNotBlank).filter(isNotMeta);\n  if (lines.length === 0) {\n    return [];\n  }\n  const testLine = lines[lines.length - 1];\n  const parser = firstCompatibleParser(testLine, availableParsers);\n  if (!parser) {\n    throw new Error(\"This library only supports MLSD, Unix- or DOS-style directory listing. Your FTP server seems to be using another format. You can see the transmitted listing when setting `client.ftp.verbose = true`. You can then provide a custom parser to `client.parseList`, see the documentation for details.\");\n  }\n  const files = lines.map(parser.parseLine).filter(info => info !== undefined);\n  return parser.transformList(files);\n}\nexports.parseList = parseList;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","parseList","dosParser","require","unixParser","mlsdParser","availableParsers","firstCompatibleParser","line","parsers","find","parser","testLine","isNotBlank","str","trim","isNotMeta","startsWith","REGEX_NEWLINE","rawList","lines","split","filter","length","Error","files","map","parseLine","info","transformList"],"sources":["D:/Julieth-Campos/PSO/node_modules/basic-ftp/dist/parseList.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseList = void 0;\nconst dosParser = __importStar(require(\"./parseListDOS\"));\nconst unixParser = __importStar(require(\"./parseListUnix\"));\nconst mlsdParser = __importStar(require(\"./parseListMLSD\"));\n/**\n * Available directory listing parsers. These are candidates that will be tested\n * in the order presented. The first candidate will be used to parse the whole list.\n */\nconst availableParsers = [\n    dosParser,\n    unixParser,\n    mlsdParser // Keep MLSD last, may accept filename only\n];\nfunction firstCompatibleParser(line, parsers) {\n    return parsers.find(parser => parser.testLine(line) === true);\n}\nfunction isNotBlank(str) {\n    return str.trim() !== \"\";\n}\nfunction isNotMeta(str) {\n    return !str.startsWith(\"total\");\n}\nconst REGEX_NEWLINE = /\\r?\\n/;\n/**\n * Parse raw directory listing.\n */\nfunction parseList(rawList) {\n    const lines = rawList\n        .split(REGEX_NEWLINE)\n        .filter(isNotBlank)\n        .filter(isNotMeta);\n    if (lines.length === 0) {\n        return [];\n    }\n    const testLine = lines[lines.length - 1];\n    const parser = firstCompatibleParser(testLine, availableParsers);\n    if (!parser) {\n        throw new Error(\"This library only supports MLSD, Unix- or DOS-style directory listing. Your FTP server seems to be using another format. You can see the transmitted listing when setting `client.ftp.verbose = true`. You can then provide a custom parser to `client.parseList`, see the documentation for details.\");\n    }\n    const files = lines\n        .map(parser.parseLine)\n        .filter((info) => info !== undefined);\n    return parser.transformList(files);\n}\nexports.parseList = parseList;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}