{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CDPSessionEvent } from '../api/CDPSession.js';\nimport { CallbackRegistry } from '../common/CallbackRegistry.js';\nimport { debug } from '../common/Debug.js';\nimport { TargetCloseError } from '../common/Errors.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { createProtocolErrorMessage } from '../util/ErrorLike.js';\nimport { CdpCDPSession } from './CDPSession.js';\nconst debugProtocolSend = debug('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = debug('puppeteer:protocol:RECV ◀');\n/**\n * @public\n */\nexport class Connection extends EventEmitter {\n  #url;\n  #transport;\n  #delay;\n  #timeout;\n  #sessions = new Map();\n  #closed = false;\n  #manuallyAttached = new Set();\n  #callbacks = new CallbackRegistry();\n  constructor(url, transport) {\n    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let timeout = arguments.length > 3 ? arguments[3] : undefined;\n    super();\n    this.#url = url;\n    this.#delay = delay;\n    this.#timeout = timeout ?? 180000;\n    this.#transport = transport;\n    this.#transport.onmessage = this.onMessage.bind(this);\n    this.#transport.onclose = this.#onClose.bind(this);\n  }\n  static fromSession(session) {\n    return session.connection();\n  }\n  get timeout() {\n    return this.#timeout;\n  }\n  /**\n   * @internal\n   */\n  get _closed() {\n    return this.#closed;\n  }\n  /**\n   * @internal\n   */\n  get _sessions() {\n    return this.#sessions;\n  }\n  /**\n   * @param sessionId - The session id\n   * @returns The current CDP session if it exists\n   */\n  session(sessionId) {\n    return this.#sessions.get(sessionId) || null;\n  }\n  url() {\n    return this.#url;\n  }\n  send(method) {\n    // There is only ever 1 param arg passed, but the Protocol defines it as an\n    // array of 0 or 1 items See this comment:\n    // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n    // which explains why the protocol defines the params this way for better\n    // type-inference.\n    // So now we check if there are any params or not and deal with them accordingly.\n    const params = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : undefined;\n    return this._rawSend(this.#callbacks, method, params);\n  }\n  /**\n   * @internal\n   */\n  _rawSend(callbacks, method, params, sessionId) {\n    return callbacks.create(method, this.#timeout, id => {\n      const stringifiedMessage = JSON.stringify({\n        method,\n        params,\n        id,\n        sessionId\n      });\n      debugProtocolSend(stringifiedMessage);\n      this.#transport.send(stringifiedMessage);\n    });\n  }\n  /**\n   * @internal\n   */\n  async closeBrowser() {\n    await this.send('Browser.close');\n  }\n  /**\n   * @internal\n   */\n  async onMessage(message) {\n    if (this.#delay) {\n      await new Promise(r => {\n        return setTimeout(r, this.#delay);\n      });\n    }\n    debugProtocolReceive(message);\n    const object = JSON.parse(message);\n    if (object.method === 'Target.attachedToTarget') {\n      const sessionId = object.params.sessionId;\n      const session = new CdpCDPSession(this, object.params.targetInfo.type, sessionId, object.sessionId);\n      this.#sessions.set(sessionId, session);\n      this.emit(CDPSessionEvent.SessionAttached, session);\n      const parentSession = this.#sessions.get(object.sessionId);\n      if (parentSession) {\n        parentSession.emit(CDPSessionEvent.SessionAttached, session);\n      }\n    } else if (object.method === 'Target.detachedFromTarget') {\n      const session = this.#sessions.get(object.params.sessionId);\n      if (session) {\n        session._onClosed();\n        this.#sessions.delete(object.params.sessionId);\n        this.emit(CDPSessionEvent.SessionDetached, session);\n        const parentSession = this.#sessions.get(object.sessionId);\n        if (parentSession) {\n          parentSession.emit(CDPSessionEvent.SessionDetached, session);\n        }\n      }\n    }\n    if (object.sessionId) {\n      const session = this.#sessions.get(object.sessionId);\n      if (session) {\n        session._onMessage(object);\n      }\n    } else if (object.id) {\n      if (object.error) {\n        this.#callbacks.reject(object.id, createProtocolErrorMessage(object), object.error.message);\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      this.emit(object.method, object.params);\n    }\n  }\n  #onClose() {\n    if (this.#closed) {\n      return;\n    }\n    this.#closed = true;\n    this.#transport.onmessage = undefined;\n    this.#transport.onclose = undefined;\n    this.#callbacks.clear();\n    for (const session of this.#sessions.values()) {\n      session._onClosed();\n    }\n    this.#sessions.clear();\n    this.emit(CDPSessionEvent.Disconnected, undefined);\n  }\n  dispose() {\n    this.#onClose();\n    this.#transport.close();\n  }\n  /**\n   * @internal\n   */\n  isAutoAttached(targetId) {\n    return !this.#manuallyAttached.has(targetId);\n  }\n  /**\n   * @internal\n   */\n  async _createSession(targetInfo) {\n    let isAutoAttachEmulated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!isAutoAttachEmulated) {\n      this.#manuallyAttached.add(targetInfo.targetId);\n    }\n    const {\n      sessionId\n    } = await this.send('Target.attachToTarget', {\n      targetId: targetInfo.targetId,\n      flatten: true\n    });\n    this.#manuallyAttached.delete(targetInfo.targetId);\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      throw new Error('CDPSession creation failed.');\n    }\n    return session;\n  }\n  /**\n   * @param targetInfo - The target info\n   * @returns The CDP session that is created\n   */\n  async createSession(targetInfo) {\n    return await this._createSession(targetInfo, false);\n  }\n}\n/**\n * @internal\n */\nexport function isTargetClosedError(error) {\n  return error instanceof TargetCloseError;\n}","map":{"version":3,"mappings":"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","names":["CDPSessionEvent","CallbackRegistry","debug","TargetCloseError","EventEmitter","createProtocolErrorMessage","CdpCDPSession","debugProtocolSend","debugProtocolReceive","Connection","Map","Set","constructor","url","transport","delay","timeout","onmessage","onMessage","bind","onclose","fromSession","session","connection","_closed","_sessions","sessionId","get","send","method","params","undefined","_rawSend","callbacks","create","id","stringifiedMessage","JSON","stringify","closeBrowser","message","Promise","r","setTimeout","object","parse","targetInfo","type","set","emit","SessionAttached","parentSession","_onClosed","delete","SessionDetached","_onMessage","error","reject","resolve","result","clear","values","Disconnected","dispose","close","isAutoAttached","targetId","has","_createSession","isAutoAttachEmulated","add","flatten","Error","createSession","isTargetClosedError"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\Connection.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Protocol} from 'devtools-protocol';\nimport type {ProtocolMapping} from 'devtools-protocol/types/protocol-mapping.js';\n\nimport {\n  CDPSessionEvent,\n  type CDPSession,\n  type CDPSessionEvents,\n} from '../api/CDPSession.js';\nimport {CallbackRegistry} from '../common/CallbackRegistry.js';\nimport type {ConnectionTransport} from '../common/ConnectionTransport.js';\nimport {debug} from '../common/Debug.js';\nimport {TargetCloseError} from '../common/Errors.js';\nimport {EventEmitter} from '../common/EventEmitter.js';\nimport {createProtocolErrorMessage} from '../util/ErrorLike.js';\n\nimport {CdpCDPSession} from './CDPSession.js';\n\nconst debugProtocolSend = debug('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = debug('puppeteer:protocol:RECV ◀');\n\n/**\n * @public\n */\nexport type {ConnectionTransport, ProtocolMapping};\n\n/**\n * @public\n */\nexport class Connection extends EventEmitter<CDPSessionEvents> {\n  #url: string;\n  #transport: ConnectionTransport;\n  #delay: number;\n  #timeout: number;\n  #sessions = new Map<string, CdpCDPSession>();\n  #closed = false;\n  #manuallyAttached = new Set<string>();\n  #callbacks = new CallbackRegistry();\n\n  constructor(\n    url: string,\n    transport: ConnectionTransport,\n    delay = 0,\n    timeout?: number\n  ) {\n    super();\n    this.#url = url;\n    this.#delay = delay;\n    this.#timeout = timeout ?? 180_000;\n\n    this.#transport = transport;\n    this.#transport.onmessage = this.onMessage.bind(this);\n    this.#transport.onclose = this.#onClose.bind(this);\n  }\n\n  static fromSession(session: CDPSession): Connection | undefined {\n    return session.connection();\n  }\n\n  get timeout(): number {\n    return this.#timeout;\n  }\n\n  /**\n   * @internal\n   */\n  get _closed(): boolean {\n    return this.#closed;\n  }\n\n  /**\n   * @internal\n   */\n  get _sessions(): Map<string, CDPSession> {\n    return this.#sessions;\n  }\n\n  /**\n   * @param sessionId - The session id\n   * @returns The current CDP session if it exists\n   */\n  session(sessionId: string): CDPSession | null {\n    return this.#sessions.get(sessionId) || null;\n  }\n\n  url(): string {\n    return this.#url;\n  }\n\n  send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    ...paramArgs: ProtocolMapping.Commands[T]['paramsType']\n  ): Promise<ProtocolMapping.Commands[T]['returnType']> {\n    // There is only ever 1 param arg passed, but the Protocol defines it as an\n    // array of 0 or 1 items See this comment:\n    // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n    // which explains why the protocol defines the params this way for better\n    // type-inference.\n    // So now we check if there are any params or not and deal with them accordingly.\n    const params = paramArgs.length ? paramArgs[0] : undefined;\n    return this._rawSend(this.#callbacks, method, params);\n  }\n\n  /**\n   * @internal\n   */\n  _rawSend<T extends keyof ProtocolMapping.Commands>(\n    callbacks: CallbackRegistry,\n    method: T,\n    params: ProtocolMapping.Commands[T]['paramsType'][0],\n    sessionId?: string\n  ): Promise<ProtocolMapping.Commands[T]['returnType']> {\n    return callbacks.create(method, this.#timeout, id => {\n      const stringifiedMessage = JSON.stringify({\n        method,\n        params,\n        id,\n        sessionId,\n      });\n      debugProtocolSend(stringifiedMessage);\n      this.#transport.send(stringifiedMessage);\n    }) as Promise<ProtocolMapping.Commands[T]['returnType']>;\n  }\n\n  /**\n   * @internal\n   */\n  async closeBrowser(): Promise<void> {\n    await this.send('Browser.close');\n  }\n\n  /**\n   * @internal\n   */\n  protected async onMessage(message: string): Promise<void> {\n    if (this.#delay) {\n      await new Promise(r => {\n        return setTimeout(r, this.#delay);\n      });\n    }\n    debugProtocolReceive(message);\n    const object = JSON.parse(message);\n    if (object.method === 'Target.attachedToTarget') {\n      const sessionId = object.params.sessionId;\n      const session = new CdpCDPSession(\n        this,\n        object.params.targetInfo.type,\n        sessionId,\n        object.sessionId\n      );\n      this.#sessions.set(sessionId, session);\n      this.emit(CDPSessionEvent.SessionAttached, session);\n      const parentSession = this.#sessions.get(object.sessionId);\n      if (parentSession) {\n        parentSession.emit(CDPSessionEvent.SessionAttached, session);\n      }\n    } else if (object.method === 'Target.detachedFromTarget') {\n      const session = this.#sessions.get(object.params.sessionId);\n      if (session) {\n        session._onClosed();\n        this.#sessions.delete(object.params.sessionId);\n        this.emit(CDPSessionEvent.SessionDetached, session);\n        const parentSession = this.#sessions.get(object.sessionId);\n        if (parentSession) {\n          parentSession.emit(CDPSessionEvent.SessionDetached, session);\n        }\n      }\n    }\n    if (object.sessionId) {\n      const session = this.#sessions.get(object.sessionId);\n      if (session) {\n        session._onMessage(object);\n      }\n    } else if (object.id) {\n      if (object.error) {\n        this.#callbacks.reject(\n          object.id,\n          createProtocolErrorMessage(object),\n          object.error.message\n        );\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      this.emit(object.method, object.params);\n    }\n  }\n\n  #onClose(): void {\n    if (this.#closed) {\n      return;\n    }\n    this.#closed = true;\n    this.#transport.onmessage = undefined;\n    this.#transport.onclose = undefined;\n    this.#callbacks.clear();\n    for (const session of this.#sessions.values()) {\n      session._onClosed();\n    }\n    this.#sessions.clear();\n    this.emit(CDPSessionEvent.Disconnected, undefined);\n  }\n\n  dispose(): void {\n    this.#onClose();\n    this.#transport.close();\n  }\n\n  /**\n   * @internal\n   */\n  isAutoAttached(targetId: string): boolean {\n    return !this.#manuallyAttached.has(targetId);\n  }\n\n  /**\n   * @internal\n   */\n  async _createSession(\n    targetInfo: Protocol.Target.TargetInfo,\n    isAutoAttachEmulated = true\n  ): Promise<CDPSession> {\n    if (!isAutoAttachEmulated) {\n      this.#manuallyAttached.add(targetInfo.targetId);\n    }\n    const {sessionId} = await this.send('Target.attachToTarget', {\n      targetId: targetInfo.targetId,\n      flatten: true,\n    });\n    this.#manuallyAttached.delete(targetInfo.targetId);\n    const session = this.#sessions.get(sessionId);\n    if (!session) {\n      throw new Error('CDPSession creation failed.');\n    }\n    return session;\n  }\n\n  /**\n   * @param targetInfo - The target info\n   * @returns The CDP session that is created\n   */\n  async createSession(\n    targetInfo: Protocol.Target.TargetInfo\n  ): Promise<CDPSession> {\n    return await this._createSession(targetInfo, false);\n  }\n}\n\n/**\n * @internal\n */\nexport function isTargetClosedError(error: Error): boolean {\n  return error instanceof TargetCloseError;\n}\n"]},"metadata":{},"sourceType":"module"}