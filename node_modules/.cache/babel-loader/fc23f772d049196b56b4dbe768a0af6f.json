{"ast":null,"code":"/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Browser as SupportedBrowser, resolveBuildId, detectBrowserPlatform, getInstalledBrowsers, uninstall } from '@puppeteer/browsers';\nimport { Puppeteer } from '../cdp/Puppeteer.js';\nimport { PUPPETEER_REVISIONS } from '../revisions.js';\nimport { ChromeLauncher } from './ChromeLauncher.js';\nimport { FirefoxLauncher } from './FirefoxLauncher.js';\n/**\n * Extends the main {@link Puppeteer} class with Node specific behaviour for\n * fetching and downloading browsers.\n *\n * If you're using Puppeteer in a Node environment, this is the class you'll get\n * when you run `require('puppeteer')` (or the equivalent ES `import`).\n *\n * @remarks\n * The most common method to use is {@link PuppeteerNode.launch | launch}, which\n * is used to launch and connect to a new browser instance.\n *\n * See {@link Puppeteer | the main Puppeteer class} for methods common to all\n * environments, such as {@link Puppeteer.connect}.\n *\n * @example\n * The following is a typical example of using Puppeteer to drive automation:\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n * Once you have created a `page` you have access to a large API to interact\n * with the page, navigate, or find certain elements in that page.\n * The {@link Page | `page` documentation} lists all the available methods.\n *\n * @public\n */\nexport class PuppeteerNode extends Puppeteer {\n  #_launcher;\n  #lastLaunchedProduct;\n  /**\n   * @internal\n   */\n  defaultBrowserRevision;\n  /**\n   * @internal\n   */\n  configuration = {};\n  /**\n   * @internal\n   */\n  constructor(settings) {\n    const {\n      configuration,\n      ...commonSettings\n    } = settings;\n    super(commonSettings);\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    switch (this.configuration.defaultProduct) {\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        break;\n      default:\n        this.configuration.defaultProduct = 'chrome';\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        break;\n    }\n    this.connect = this.connect.bind(this);\n    this.launch = this.launch.bind(this);\n    this.executablePath = this.executablePath.bind(this);\n    this.defaultArgs = this.defaultArgs.bind(this);\n    this.trimCache = this.trimCache.bind(this);\n  }\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n  connect(options) {\n    return super.connect(options);\n  }\n  /**\n   * Launches a browser instance with given arguments and options when\n   * specified.\n   *\n   * When using with `puppeteer-core`,\n   * {@link LaunchOptions | options.executablePath} or\n   * {@link LaunchOptions | options.channel} must be provided.\n   *\n   * @example\n   * You can use {@link LaunchOptions | options.ignoreDefaultArgs}\n   * to filter out `--mute-audio` from default arguments:\n   *\n   * ```ts\n   * const browser = await puppeteer.launch({\n   *   ignoreDefaultArgs: ['--mute-audio'],\n   * });\n   * ```\n   *\n   * @remarks\n   * Puppeteer can also be used to control the Chrome browser, but it works best\n   * with the version of Chrome for Testing downloaded by default.\n   * There is no guarantee it will work with any other version. If Google Chrome\n   * (rather than Chrome for Testing) is preferred, a\n   * {@link https://www.google.com/chrome/browser/canary.html | Chrome Canary}\n   * or\n   * {@link https://www.chromium.org/getting-involved/dev-channel | Dev Channel}\n   * build is suggested. See\n   * {@link https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/ | this article}\n   * for a description of the differences between Chromium and Chrome.\n   * {@link https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md | This article}\n   * describes some differences for Linux users. See\n   * {@link https://goo.gle/chrome-for-testing | this doc} for the description\n   * of Chrome for Testing.\n   *\n   * @param options - Options to configure launching behavior.\n   */\n  launch() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      product = this.defaultProduct\n    } = options;\n    this.#lastLaunchedProduct = product;\n    return this.#launcher.launch(options);\n  }\n  /**\n   * @internal\n   */\n  get #launcher() {\n    if (this.#_launcher && this.#_launcher.product === this.lastLaunchedProduct) {\n      return this.#_launcher;\n    }\n    switch (this.lastLaunchedProduct) {\n      case 'chrome':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        this.#_launcher = new ChromeLauncher(this);\n        break;\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        this.#_launcher = new FirefoxLauncher(this);\n        break;\n      default:\n        throw new Error(`Unknown product: ${this.#lastLaunchedProduct}`);\n    }\n    return this.#_launcher;\n  }\n  /**\n   * The default executable path.\n   */\n  executablePath(channel) {\n    return this.#launcher.executablePath(channel);\n  }\n  /**\n   * @internal\n   */\n  get browserRevision() {\n    return this.#_launcher?.getActualBrowserRevision() ?? this.configuration.browserRevision ?? this.defaultBrowserRevision;\n  }\n  /**\n   * The default download path for puppeteer. For puppeteer-core, this\n   * code should never be called as it is never defined.\n   *\n   * @internal\n   */\n  get defaultDownloadPath() {\n    return this.configuration.downloadPath ?? this.configuration.cacheDirectory;\n  }\n  /**\n   * The name of the browser that was last launched.\n   */\n  get lastLaunchedProduct() {\n    return this.#lastLaunchedProduct ?? this.defaultProduct;\n  }\n  /**\n   * The name of the browser that will be launched by default. For\n   * `puppeteer`, this is influenced by your configuration. Otherwise, it's\n   * `chrome`.\n   */\n  get defaultProduct() {\n    return this.configuration.defaultProduct ?? 'chrome';\n  }\n  /**\n   * @deprecated Do not use as this field as it does not take into account\n   * multiple browsers of different types. Use\n   * {@link PuppeteerNode.defaultProduct | defaultProduct} or\n   * {@link PuppeteerNode.lastLaunchedProduct | lastLaunchedProduct}.\n   *\n   * @returns The name of the browser that is under automation.\n   */\n  get product() {\n    return this.#launcher.product;\n  }\n  /**\n   * @param options - Set of configurable options to set on the browser.\n   *\n   * @returns The default flags that Chromium will be launched with.\n   */\n  defaultArgs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.#launcher.defaultArgs(options);\n  }\n  /**\n   * Removes all non-current Firefox and Chrome binaries in the cache directory\n   * identified by the provided Puppeteer configuration. The current browser\n   * version is determined by resolving PUPPETEER_REVISIONS from Puppeteer\n   * unless `configuration.browserRevision` is provided.\n   *\n   * @remarks\n   *\n   * Note that the method does not check if any other Puppeteer versions\n   * installed on the host that use the same cache directory require the\n   * non-current binaries.\n   *\n   * @public\n   */\n  async trimCache() {\n    const platform = detectBrowserPlatform();\n    if (!platform) {\n      throw new Error('The current platform is not supported.');\n    }\n    const cacheDir = this.configuration.downloadPath ?? this.configuration.cacheDirectory;\n    const installedBrowsers = await getInstalledBrowsers({\n      cacheDir\n    });\n    const product = this.configuration.defaultProduct;\n    const puppeteerBrowsers = [{\n      product: 'chrome',\n      browser: SupportedBrowser.CHROME,\n      currentBuildId: ''\n    }, {\n      product: 'firefox',\n      browser: SupportedBrowser.FIREFOX,\n      currentBuildId: ''\n    }];\n    // Resolve current buildIds.\n    for (const item of puppeteerBrowsers) {\n      item.currentBuildId = await resolveBuildId(item.browser, platform, (product === item.product ? this.configuration.browserRevision : null) || PUPPETEER_REVISIONS[item.product]);\n    }\n    const currentBrowserBuilds = new Set(puppeteerBrowsers.map(browser => {\n      return `${browser.browser}_${browser.currentBuildId}`;\n    }));\n    const currentBrowsers = new Set(puppeteerBrowsers.map(browser => {\n      return browser.browser;\n    }));\n    for (const installedBrowser of installedBrowsers) {\n      // Don't uninstall browsers that are not managed by Puppeteer yet.\n      if (!currentBrowsers.has(installedBrowser.browser)) {\n        continue;\n      }\n      // Keep the browser build used by the current Puppeteer installation.\n      if (currentBrowserBuilds.has(`${installedBrowser.browser}_${installedBrowser.buildId}`)) {\n        continue;\n      }\n      await uninstall({\n        browser: installedBrowser.browser,\n        platform,\n        cacheDir,\n        buildId: installedBrowser.buildId\n      });\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["Browser","SupportedBrowser","resolveBuildId","detectBrowserPlatform","getInstalledBrowsers","uninstall","Puppeteer","PUPPETEER_REVISIONS","ChromeLauncher","FirefoxLauncher","PuppeteerNode","defaultBrowserRevision","configuration","constructor","settings","commonSettings","defaultProduct","firefox","chrome","connect","bind","launch","executablePath","defaultArgs","trimCache","options","product","lastLaunchedProduct","Error","channel","browserRevision","getActualBrowserRevision","defaultDownloadPath","downloadPath","cacheDirectory","platform","cacheDir","installedBrowsers","puppeteerBrowsers","browser","CHROME","currentBuildId","FIREFOX","item","currentBrowserBuilds","Set","map","currentBrowsers","installedBrowser","has","buildId"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\node\\PuppeteerNode.ts"],"sourcesContent":["/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Browser as SupportedBrowser,\n  resolveBuildId,\n  detectBrowserPlatform,\n  getInstalledBrowsers,\n  uninstall,\n} from '@puppeteer/browsers';\n\nimport type {Browser} from '../api/Browser.js';\nimport type {BrowserConnectOptions} from '../cdp/BrowserConnector.js';\nimport {\n  type CommonPuppeteerSettings,\n  type ConnectOptions,\n  Puppeteer,\n} from '../cdp/Puppeteer.js';\nimport type {Configuration} from '../common/Configuration.js';\nimport type {Product} from '../common/Product.js';\nimport {PUPPETEER_REVISIONS} from '../revisions.js';\n\nimport {ChromeLauncher} from './ChromeLauncher.js';\nimport {FirefoxLauncher} from './FirefoxLauncher.js';\nimport type {\n  BrowserLaunchArgumentOptions,\n  ChromeReleaseChannel,\n  LaunchOptions,\n} from './LaunchOptions.js';\nimport type {ProductLauncher} from './ProductLauncher.js';\n\n/**\n * @public\n */\nexport interface PuppeteerLaunchOptions\n  extends LaunchOptions,\n    BrowserLaunchArgumentOptions,\n    BrowserConnectOptions {\n  product?: Product;\n  extraPrefsFirefox?: Record<string, unknown>;\n}\n\n/**\n * Extends the main {@link Puppeteer} class with Node specific behaviour for\n * fetching and downloading browsers.\n *\n * If you're using Puppeteer in a Node environment, this is the class you'll get\n * when you run `require('puppeteer')` (or the equivalent ES `import`).\n *\n * @remarks\n * The most common method to use is {@link PuppeteerNode.launch | launch}, which\n * is used to launch and connect to a new browser instance.\n *\n * See {@link Puppeteer | the main Puppeteer class} for methods common to all\n * environments, such as {@link Puppeteer.connect}.\n *\n * @example\n * The following is a typical example of using Puppeteer to drive automation:\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n * Once you have created a `page` you have access to a large API to interact\n * with the page, navigate, or find certain elements in that page.\n * The {@link Page | `page` documentation} lists all the available methods.\n *\n * @public\n */\nexport class PuppeteerNode extends Puppeteer {\n  #_launcher?: ProductLauncher;\n  #lastLaunchedProduct?: Product;\n\n  /**\n   * @internal\n   */\n  defaultBrowserRevision: string;\n\n  /**\n   * @internal\n   */\n  configuration: Configuration = {};\n\n  /**\n   * @internal\n   */\n  constructor(\n    settings: {\n      configuration?: Configuration;\n    } & CommonPuppeteerSettings\n  ) {\n    const {configuration, ...commonSettings} = settings;\n    super(commonSettings);\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    switch (this.configuration.defaultProduct) {\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        break;\n      default:\n        this.configuration.defaultProduct = 'chrome';\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        break;\n    }\n\n    this.connect = this.connect.bind(this);\n    this.launch = this.launch.bind(this);\n    this.executablePath = this.executablePath.bind(this);\n    this.defaultArgs = this.defaultArgs.bind(this);\n    this.trimCache = this.trimCache.bind(this);\n  }\n\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n  override connect(options: ConnectOptions): Promise<Browser> {\n    return super.connect(options);\n  }\n\n  /**\n   * Launches a browser instance with given arguments and options when\n   * specified.\n   *\n   * When using with `puppeteer-core`,\n   * {@link LaunchOptions | options.executablePath} or\n   * {@link LaunchOptions | options.channel} must be provided.\n   *\n   * @example\n   * You can use {@link LaunchOptions | options.ignoreDefaultArgs}\n   * to filter out `--mute-audio` from default arguments:\n   *\n   * ```ts\n   * const browser = await puppeteer.launch({\n   *   ignoreDefaultArgs: ['--mute-audio'],\n   * });\n   * ```\n   *\n   * @remarks\n   * Puppeteer can also be used to control the Chrome browser, but it works best\n   * with the version of Chrome for Testing downloaded by default.\n   * There is no guarantee it will work with any other version. If Google Chrome\n   * (rather than Chrome for Testing) is preferred, a\n   * {@link https://www.google.com/chrome/browser/canary.html | Chrome Canary}\n   * or\n   * {@link https://www.chromium.org/getting-involved/dev-channel | Dev Channel}\n   * build is suggested. See\n   * {@link https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/ | this article}\n   * for a description of the differences between Chromium and Chrome.\n   * {@link https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md | This article}\n   * describes some differences for Linux users. See\n   * {@link https://goo.gle/chrome-for-testing | this doc} for the description\n   * of Chrome for Testing.\n   *\n   * @param options - Options to configure launching behavior.\n   */\n  launch(options: PuppeteerLaunchOptions = {}): Promise<Browser> {\n    const {product = this.defaultProduct} = options;\n    this.#lastLaunchedProduct = product;\n    return this.#launcher.launch(options);\n  }\n\n  /**\n   * @internal\n   */\n  get #launcher(): ProductLauncher {\n    if (\n      this.#_launcher &&\n      this.#_launcher.product === this.lastLaunchedProduct\n    ) {\n      return this.#_launcher;\n    }\n    switch (this.lastLaunchedProduct) {\n      case 'chrome':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        this.#_launcher = new ChromeLauncher(this);\n        break;\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        this.#_launcher = new FirefoxLauncher(this);\n        break;\n      default:\n        throw new Error(`Unknown product: ${this.#lastLaunchedProduct}`);\n    }\n    return this.#_launcher;\n  }\n\n  /**\n   * The default executable path.\n   */\n  executablePath(channel?: ChromeReleaseChannel): string {\n    return this.#launcher.executablePath(channel);\n  }\n\n  /**\n   * @internal\n   */\n  get browserRevision(): string {\n    return (\n      this.#_launcher?.getActualBrowserRevision() ??\n      this.configuration.browserRevision ??\n      this.defaultBrowserRevision!\n    );\n  }\n\n  /**\n   * The default download path for puppeteer. For puppeteer-core, this\n   * code should never be called as it is never defined.\n   *\n   * @internal\n   */\n  get defaultDownloadPath(): string | undefined {\n    return this.configuration.downloadPath ?? this.configuration.cacheDirectory;\n  }\n\n  /**\n   * The name of the browser that was last launched.\n   */\n  get lastLaunchedProduct(): Product {\n    return this.#lastLaunchedProduct ?? this.defaultProduct;\n  }\n\n  /**\n   * The name of the browser that will be launched by default. For\n   * `puppeteer`, this is influenced by your configuration. Otherwise, it's\n   * `chrome`.\n   */\n  get defaultProduct(): Product {\n    return this.configuration.defaultProduct ?? 'chrome';\n  }\n\n  /**\n   * @deprecated Do not use as this field as it does not take into account\n   * multiple browsers of different types. Use\n   * {@link PuppeteerNode.defaultProduct | defaultProduct} or\n   * {@link PuppeteerNode.lastLaunchedProduct | lastLaunchedProduct}.\n   *\n   * @returns The name of the browser that is under automation.\n   */\n  get product(): string {\n    return this.#launcher.product;\n  }\n\n  /**\n   * @param options - Set of configurable options to set on the browser.\n   *\n   * @returns The default flags that Chromium will be launched with.\n   */\n  defaultArgs(options: BrowserLaunchArgumentOptions = {}): string[] {\n    return this.#launcher.defaultArgs(options);\n  }\n\n  /**\n   * Removes all non-current Firefox and Chrome binaries in the cache directory\n   * identified by the provided Puppeteer configuration. The current browser\n   * version is determined by resolving PUPPETEER_REVISIONS from Puppeteer\n   * unless `configuration.browserRevision` is provided.\n   *\n   * @remarks\n   *\n   * Note that the method does not check if any other Puppeteer versions\n   * installed on the host that use the same cache directory require the\n   * non-current binaries.\n   *\n   * @public\n   */\n  async trimCache(): Promise<void> {\n    const platform = detectBrowserPlatform();\n    if (!platform) {\n      throw new Error('The current platform is not supported.');\n    }\n\n    const cacheDir =\n      this.configuration.downloadPath ?? this.configuration.cacheDirectory!;\n    const installedBrowsers = await getInstalledBrowsers({\n      cacheDir,\n    });\n\n    const product = this.configuration.defaultProduct!;\n\n    const puppeteerBrowsers: Array<{\n      product: Product;\n      browser: SupportedBrowser;\n      currentBuildId: string;\n    }> = [\n      {\n        product: 'chrome',\n        browser: SupportedBrowser.CHROME,\n        currentBuildId: '',\n      },\n      {\n        product: 'firefox',\n        browser: SupportedBrowser.FIREFOX,\n        currentBuildId: '',\n      },\n    ];\n\n    // Resolve current buildIds.\n    for (const item of puppeteerBrowsers) {\n      item.currentBuildId = await resolveBuildId(\n        item.browser,\n        platform,\n        (product === item.product\n          ? this.configuration.browserRevision\n          : null) || PUPPETEER_REVISIONS[item.product]\n      );\n    }\n\n    const currentBrowserBuilds = new Set(\n      puppeteerBrowsers.map(browser => {\n        return `${browser.browser}_${browser.currentBuildId}`;\n      })\n    );\n\n    const currentBrowsers = new Set(\n      puppeteerBrowsers.map(browser => {\n        return browser.browser;\n      })\n    );\n\n    for (const installedBrowser of installedBrowsers) {\n      // Don't uninstall browsers that are not managed by Puppeteer yet.\n      if (!currentBrowsers.has(installedBrowser.browser)) {\n        continue;\n      }\n      // Keep the browser build used by the current Puppeteer installation.\n      if (\n        currentBrowserBuilds.has(\n          `${installedBrowser.browser}_${installedBrowser.buildId}`\n        )\n      ) {\n        continue;\n      }\n\n      await uninstall({\n        browser: installedBrowser.browser,\n        platform,\n        cacheDir,\n        buildId: installedBrowser.buildId,\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}