{"ast":null,"code":"var __addDisposableResource = this && this.__addDisposableResource || function (env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({\n      value: value,\n      dispose: dispose,\n      async: async\n    });\n  } else if (async) {\n    env.stack.push({\n      async: true\n    });\n  }\n  return value;\n};\nvar __disposeResources = this && this.__disposeResources || function (SuppressedError) {\n  return function (env) {\n    function fail(e) {\n      env.error = env.hasError ? new SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n      env.hasError = true;\n    }\n    function next() {\n      while (env.stack.length) {\n        var rec = env.stack.pop();\n        try {\n          var result = rec.dispose && rec.dispose.call(rec.value);\n          if (rec.async) return Promise.resolve(result).then(next, function (e) {\n            fail(e);\n            return next();\n          });\n        } catch (e) {\n          fail(e);\n        }\n      }\n      if (env.hasError) throw env.error;\n    }\n    return next();\n  };\n}(typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n});\nimport { JSHandle } from '../api/JSHandle.js';\nimport { debugError } from '../common/util.js';\nimport { DisposableStack } from '../util/disposable.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\n/**\n * @internal\n */\nexport class Binding {\n  #name;\n  #fn;\n  constructor(name, fn) {\n    this.#name = name;\n    this.#fn = fn;\n  }\n  get name() {\n    return this.#name;\n  }\n  /**\n   * @param context - Context to run the binding in; the context should have\n   * the binding added to it beforehand.\n   * @param id - ID of the call. This should come from the CDP\n   * `onBindingCalled` response.\n   * @param args - Plain arguments from CDP.\n   */\n  async run(context, id, args, isTrivial) {\n    const stack = new DisposableStack();\n    try {\n      if (!isTrivial) {\n        const env_1 = {\n          stack: [],\n          error: void 0,\n          hasError: false\n        };\n        try {\n          // Getting non-trivial arguments.\n          const handles = __addDisposableResource(env_1, await context.evaluateHandle((name, seq) => {\n            // @ts-expect-error Code is evaluated in a different context.\n            return globalThis[name].args.get(seq);\n          }, this.#name, id), false);\n          const properties = await handles.getProperties();\n          for (const [index, handle] of properties) {\n            // This is not straight-forward since some arguments can stringify, but\n            // aren't plain objects so add subtypes when the use-case arises.\n            if (index in args) {\n              switch (handle.remoteObject().subtype) {\n                case 'node':\n                  args[+index] = handle;\n                  break;\n                default:\n                  stack.use(handle);\n              }\n            } else {\n              stack.use(handle);\n            }\n          }\n        } catch (e_1) {\n          env_1.error = e_1;\n          env_1.hasError = true;\n        } finally {\n          __disposeResources(env_1);\n        }\n      }\n      await context.evaluate((name, seq, result) => {\n        // @ts-expect-error Code is evaluated in a different context.\n        const callbacks = globalThis[name].callbacks;\n        callbacks.get(seq).resolve(result);\n        callbacks.delete(seq);\n      }, this.#name, id, await this.#fn(...args));\n      for (const arg of args) {\n        if (arg instanceof JSHandle) {\n          stack.use(arg);\n        }\n      }\n    } catch (error) {\n      if (isErrorLike(error)) {\n        await context.evaluate((name, seq, message, stack) => {\n          const error = new Error(message);\n          error.stack = stack;\n          // @ts-expect-error Code is evaluated in a different context.\n          const callbacks = globalThis[name].callbacks;\n          callbacks.get(seq).reject(error);\n          callbacks.delete(seq);\n        }, this.#name, id, error.message, error.stack).catch(debugError);\n      } else {\n        await context.evaluate((name, seq, error) => {\n          // @ts-expect-error Code is evaluated in a different context.\n          const callbacks = globalThis[name].callbacks;\n          callbacks.get(seq).reject(error);\n          callbacks.delete(seq);\n        }, this.#name, id, error).catch(debugError);\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["JSHandle","debugError","DisposableStack","isErrorLike","Binding","constructor","name","fn","run","context","id","args","isTrivial","stack","handles","evaluateHandle","seq","globalThis","get","properties","getProperties","index","handle","remoteObject","subtype","use","evaluate","result","callbacks","resolve","delete","arg","error","message","Error","reject","catch"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\Binding.ts"],"sourcesContent":["import {JSHandle} from '../api/JSHandle.js';\nimport {debugError} from '../common/util.js';\nimport {DisposableStack} from '../util/disposable.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\nimport type {ExecutionContext} from './ExecutionContext.js';\n\n/**\n * @internal\n */\nexport class Binding {\n  #name: string;\n  #fn: (...args: unknown[]) => unknown;\n  constructor(name: string, fn: (...args: unknown[]) => unknown) {\n    this.#name = name;\n    this.#fn = fn;\n  }\n\n  get name(): string {\n    return this.#name;\n  }\n\n  /**\n   * @param context - Context to run the binding in; the context should have\n   * the binding added to it beforehand.\n   * @param id - ID of the call. This should come from the CDP\n   * `onBindingCalled` response.\n   * @param args - Plain arguments from CDP.\n   */\n  async run(\n    context: ExecutionContext,\n    id: number,\n    args: unknown[],\n    isTrivial: boolean\n  ): Promise<void> {\n    const stack = new DisposableStack();\n    try {\n      if (!isTrivial) {\n        // Getting non-trivial arguments.\n        using handles = await context.evaluateHandle(\n          (name, seq) => {\n            // @ts-expect-error Code is evaluated in a different context.\n            return globalThis[name].args.get(seq);\n          },\n          this.#name,\n          id\n        );\n        const properties = await handles.getProperties();\n        for (const [index, handle] of properties) {\n          // This is not straight-forward since some arguments can stringify, but\n          // aren't plain objects so add subtypes when the use-case arises.\n          if (index in args) {\n            switch (handle.remoteObject().subtype) {\n              case 'node':\n                args[+index] = handle;\n                break;\n              default:\n                stack.use(handle);\n            }\n          } else {\n            stack.use(handle);\n          }\n        }\n      }\n\n      await context.evaluate(\n        (name, seq, result) => {\n          // @ts-expect-error Code is evaluated in a different context.\n          const callbacks = globalThis[name].callbacks;\n          callbacks.get(seq).resolve(result);\n          callbacks.delete(seq);\n        },\n        this.#name,\n        id,\n        await this.#fn(...args)\n      );\n\n      for (const arg of args) {\n        if (arg instanceof JSHandle) {\n          stack.use(arg);\n        }\n      }\n    } catch (error) {\n      if (isErrorLike(error)) {\n        await context\n          .evaluate(\n            (name, seq, message, stack) => {\n              const error = new Error(message);\n              error.stack = stack;\n              // @ts-expect-error Code is evaluated in a different context.\n              const callbacks = globalThis[name].callbacks;\n              callbacks.get(seq).reject(error);\n              callbacks.delete(seq);\n            },\n            this.#name,\n            id,\n            error.message,\n            error.stack\n          )\n          .catch(debugError);\n      } else {\n        await context\n          .evaluate(\n            (name, seq, error) => {\n              // @ts-expect-error Code is evaluated in a different context.\n              const callbacks = globalThis[name].callbacks;\n              callbacks.get(seq).reject(error);\n              callbacks.delete(seq);\n            },\n            this.#name,\n            id,\n            error\n          )\n          .catch(debugError);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}