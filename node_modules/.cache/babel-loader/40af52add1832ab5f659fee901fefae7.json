{"ast":null,"code":"/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nimport { ElementHandle } from '../api/ElementHandle.js';\nimport { debugError } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { throwIfDisposed } from '../util/decorators.js';\nimport { CdpJSHandle } from './JSHandle.js';\n/**\n * The CdpElementHandle extends ElementHandle now to keep compatibility\n * with `instanceof` because of that we need to have methods for\n * CdpJSHandle to in this implementation as well.\n *\n * @internal\n */\nlet CdpElementHandle = (() => {\n  var _a, _b;\n  let _classSuper = ElementHandle;\n  let _instanceExtraInitializers = [];\n  let _contentFrame_decorators;\n  let _scrollIntoView_decorators;\n  let _uploadFile_decorators;\n  let _autofill_decorators;\n  return class CdpElementHandle extends _classSuper {\n    static #_ = (() => {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n      _contentFrame_decorators = [throwIfDisposed()];\n      _scrollIntoView_decorators = [throwIfDisposed(), (_a = ElementHandle).bindIsolatedHandle.bind(_a)];\n      _uploadFile_decorators = [throwIfDisposed(), (_b = ElementHandle).bindIsolatedHandle.bind(_b)];\n      _autofill_decorators = [throwIfDisposed()];\n      __esDecorate(this, null, _contentFrame_decorators, {\n        kind: \"method\",\n        name: \"contentFrame\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"contentFrame\" in obj,\n          get: obj => obj.contentFrame\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _scrollIntoView_decorators, {\n        kind: \"method\",\n        name: \"scrollIntoView\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"scrollIntoView\" in obj,\n          get: obj => obj.scrollIntoView\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _uploadFile_decorators, {\n        kind: \"method\",\n        name: \"uploadFile\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"uploadFile\" in obj,\n          get: obj => obj.uploadFile\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _autofill_decorators, {\n        kind: \"method\",\n        name: \"autofill\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"autofill\" in obj,\n          get: obj => obj.autofill\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      if (_metadata) Object.defineProperty(this, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n    })();\n    constructor(world, remoteObject) {\n      super(new CdpJSHandle(world, remoteObject));\n      __runInitializers(this, _instanceExtraInitializers);\n    }\n    get realm() {\n      return this.handle.realm;\n    }\n    get client() {\n      return this.handle.client;\n    }\n    remoteObject() {\n      return this.handle.remoteObject();\n    }\n    get #frameManager() {\n      return this.frame._frameManager;\n    }\n    get frame() {\n      return this.realm.environment;\n    }\n    async contentFrame() {\n      const nodeInfo = await this.client.send('DOM.describeNode', {\n        objectId: this.id\n      });\n      if (typeof nodeInfo.node.frameId !== 'string') {\n        return null;\n      }\n      return this.#frameManager.frame(nodeInfo.node.frameId);\n    }\n    async scrollIntoView() {\n      await this.assertConnectedElement();\n      try {\n        await this.client.send('DOM.scrollIntoViewIfNeeded', {\n          objectId: this.id\n        });\n      } catch (error) {\n        debugError(error);\n        // Fallback to Element.scrollIntoView if DOM.scrollIntoViewIfNeeded is not supported\n        await super.scrollIntoView();\n      }\n    }\n    async uploadFile() {\n      const isMultiple = await this.evaluate(element => {\n        return element.multiple;\n      });\n      for (var _len = arguments.length, filePaths = new Array(_len), _key = 0; _key < _len; _key++) {\n        filePaths[_key] = arguments[_key];\n      }\n      assert(filePaths.length <= 1 || isMultiple, 'Multiple file uploads only work with <input type=file multiple>');\n      // Locate all files and confirm that they exist.\n      let path;\n      try {\n        path = await import('path');\n      } catch (error) {\n        if (error instanceof TypeError) {\n          throw new Error(`JSHandle#uploadFile can only be used in Node-like environments.`);\n        }\n        throw error;\n      }\n      const files = filePaths.map(filePath => {\n        if (path.win32.isAbsolute(filePath) || path.posix.isAbsolute(filePath)) {\n          return filePath;\n        } else {\n          return path.resolve(filePath);\n        }\n      });\n      /**\n       * The zero-length array is a special case, it seems that\n       * DOM.setFileInputFiles does not actually update the files in that case, so\n       * the solution is to eval the element value to a new FileList directly.\n       */\n      if (files.length === 0) {\n        // XXX: These events should converted to trusted events. Perhaps do this\n        // in `DOM.setFileInputFiles`?\n        await this.evaluate(element => {\n          element.files = new DataTransfer().files;\n          // Dispatch events for this case because it should behave akin to a user action.\n          element.dispatchEvent(new Event('input', {\n            bubbles: true,\n            composed: true\n          }));\n          element.dispatchEvent(new Event('change', {\n            bubbles: true\n          }));\n        });\n        return;\n      }\n      const {\n        node: {\n          backendNodeId\n        }\n      } = await this.client.send('DOM.describeNode', {\n        objectId: this.id\n      });\n      await this.client.send('DOM.setFileInputFiles', {\n        objectId: this.id,\n        files,\n        backendNodeId\n      });\n    }\n    async autofill(data) {\n      const nodeInfo = await this.client.send('DOM.describeNode', {\n        objectId: this.handle.id\n      });\n      const fieldId = nodeInfo.node.backendNodeId;\n      const frameId = this.frame._id;\n      await this.client.send('Autofill.trigger', {\n        fieldId,\n        frameId,\n        card: data.creditCard\n      });\n    }\n  };\n})();\nexport { CdpElementHandle };","map":{"version":3,"mappings":"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","names":["ElementHandle","debugError","assert","throwIfDisposed","CdpJSHandle","CdpElementHandle","_classSuper","bindIsolatedHandle","__esDecorate","kind","name","static","private","access","has","get","contentFrame","metadata","scrollIntoView","uploadFile","autofill","constructor","world","remoteObject","realm","handle","client","frame","_frameManager","environment","nodeInfo","send","objectId","id","node","frameId","assertConnectedElement","error","isMultiple","evaluate","element","multiple","filePaths","length","path","TypeError","Error","files","map","filePath","win32","isAbsolute","posix","resolve","DataTransfer","dispatchEvent","Event","bubbles","composed","backendNodeId","data","fieldId","_id","card","creditCard"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\ElementHandle.ts"],"sourcesContent":["/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type Path from 'path';\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {ElementHandle, type AutofillData} from '../api/ElementHandle.js';\nimport {debugError} from '../common/util.js';\nimport {assert} from '../util/assert.js';\nimport {throwIfDisposed} from '../util/decorators.js';\n\nimport type {CdpFrame} from './Frame.js';\nimport type {FrameManager} from './FrameManager.js';\nimport type {IsolatedWorld} from './IsolatedWorld.js';\nimport {CdpJSHandle} from './JSHandle.js';\n\n/**\n * The CdpElementHandle extends ElementHandle now to keep compatibility\n * with `instanceof` because of that we need to have methods for\n * CdpJSHandle to in this implementation as well.\n *\n * @internal\n */\nexport class CdpElementHandle<\n  ElementType extends Node = Element,\n> extends ElementHandle<ElementType> {\n  protected declare readonly handle: CdpJSHandle<ElementType>;\n\n  constructor(\n    world: IsolatedWorld,\n    remoteObject: Protocol.Runtime.RemoteObject\n  ) {\n    super(new CdpJSHandle(world, remoteObject));\n  }\n\n  override get realm(): IsolatedWorld {\n    return this.handle.realm;\n  }\n\n  get client(): CDPSession {\n    return this.handle.client;\n  }\n\n  override remoteObject(): Protocol.Runtime.RemoteObject {\n    return this.handle.remoteObject();\n  }\n\n  get #frameManager(): FrameManager {\n    return this.frame._frameManager;\n  }\n\n  override get frame(): CdpFrame {\n    return this.realm.environment as CdpFrame;\n  }\n\n  override async contentFrame(\n    this: ElementHandle<HTMLIFrameElement>\n  ): Promise<CdpFrame>;\n\n  @throwIfDisposed()\n  override async contentFrame(): Promise<CdpFrame | null> {\n    const nodeInfo = await this.client.send('DOM.describeNode', {\n      objectId: this.id,\n    });\n    if (typeof nodeInfo.node.frameId !== 'string') {\n      return null;\n    }\n    return this.#frameManager.frame(nodeInfo.node.frameId);\n  }\n\n  @throwIfDisposed()\n  @ElementHandle.bindIsolatedHandle\n  override async scrollIntoView(\n    this: CdpElementHandle<Element>\n  ): Promise<void> {\n    await this.assertConnectedElement();\n    try {\n      await this.client.send('DOM.scrollIntoViewIfNeeded', {\n        objectId: this.id,\n      });\n    } catch (error) {\n      debugError(error);\n      // Fallback to Element.scrollIntoView if DOM.scrollIntoViewIfNeeded is not supported\n      await super.scrollIntoView();\n    }\n  }\n\n  @throwIfDisposed()\n  @ElementHandle.bindIsolatedHandle\n  override async uploadFile(\n    this: CdpElementHandle<HTMLInputElement>,\n    ...filePaths: string[]\n  ): Promise<void> {\n    const isMultiple = await this.evaluate(element => {\n      return element.multiple;\n    });\n    assert(\n      filePaths.length <= 1 || isMultiple,\n      'Multiple file uploads only work with <input type=file multiple>'\n    );\n\n    // Locate all files and confirm that they exist.\n    let path: typeof Path;\n    try {\n      path = await import('path');\n    } catch (error) {\n      if (error instanceof TypeError) {\n        throw new Error(\n          `JSHandle#uploadFile can only be used in Node-like environments.`\n        );\n      }\n      throw error;\n    }\n    const files = filePaths.map(filePath => {\n      if (path.win32.isAbsolute(filePath) || path.posix.isAbsolute(filePath)) {\n        return filePath;\n      } else {\n        return path.resolve(filePath);\n      }\n    });\n\n    /**\n     * The zero-length array is a special case, it seems that\n     * DOM.setFileInputFiles does not actually update the files in that case, so\n     * the solution is to eval the element value to a new FileList directly.\n     */\n    if (files.length === 0) {\n      // XXX: These events should converted to trusted events. Perhaps do this\n      // in `DOM.setFileInputFiles`?\n      await this.evaluate(element => {\n        element.files = new DataTransfer().files;\n\n        // Dispatch events for this case because it should behave akin to a user action.\n        element.dispatchEvent(\n          new Event('input', {bubbles: true, composed: true})\n        );\n        element.dispatchEvent(new Event('change', {bubbles: true}));\n      });\n      return;\n    }\n\n    const {\n      node: {backendNodeId},\n    } = await this.client.send('DOM.describeNode', {\n      objectId: this.id,\n    });\n    await this.client.send('DOM.setFileInputFiles', {\n      objectId: this.id,\n      files,\n      backendNodeId,\n    });\n  }\n\n  @throwIfDisposed()\n  override async autofill(data: AutofillData): Promise<void> {\n    const nodeInfo = await this.client.send('DOM.describeNode', {\n      objectId: this.handle.id,\n    });\n    const fieldId = nodeInfo.node.backendNodeId;\n    const frameId = this.frame._id;\n    await this.client.send('Autofill.trigger', {\n      fieldId,\n      frameId,\n      card: data.creditCard,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}