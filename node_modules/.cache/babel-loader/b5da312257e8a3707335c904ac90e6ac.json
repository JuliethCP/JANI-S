{"ast":null,"code":"/**\n * The default cooperative request interception resolution priority\n *\n * @public\n */\nexport const DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;\n/**\n * Represents an HTTP request sent by a page.\n * @remarks\n *\n * Whenever the page sends a request, such as for a network resource, the\n * following events are emitted by Puppeteer's `page`:\n *\n * - `request`: emitted when the request is issued by the page.\n * - `requestfinished` - emitted when the response body is downloaded and the\n *   request is complete.\n *\n * If request fails at some point, then instead of `requestfinished` event the\n * `requestfailed` event is emitted.\n *\n * All of these events provide an instance of `HTTPRequest` representing the\n * request that occurred:\n *\n * ```\n * page.on('request', request => ...)\n * ```\n *\n * NOTE: HTTP Error responses, such as 404 or 503, are still successful\n * responses from HTTP standpoint, so request will complete with\n * `requestfinished` event.\n *\n * If request gets a 'redirect' response, the request is successfully finished\n * with the `requestfinished` event, and a new request is issued to a\n * redirected url.\n *\n * @public\n */\nexport class HTTPRequest {\n  /**\n   * @internal\n   */\n  _requestId = '';\n  /**\n   * @internal\n   */\n  _interceptionId;\n  /**\n   * @internal\n   */\n  _failureText = null;\n  /**\n   * @internal\n   */\n  _response = null;\n  /**\n   * @internal\n   */\n  _fromMemoryCache = false;\n  /**\n   * @internal\n   */\n  _redirectChain = [];\n  /**\n   * @internal\n   */\n  constructor() {}\n}\n/**\n * @public\n */\nexport var InterceptResolutionAction;\n(function (InterceptResolutionAction) {\n  InterceptResolutionAction[\"Abort\"] = \"abort\";\n  InterceptResolutionAction[\"Respond\"] = \"respond\";\n  InterceptResolutionAction[\"Continue\"] = \"continue\";\n  InterceptResolutionAction[\"Disabled\"] = \"disabled\";\n  InterceptResolutionAction[\"None\"] = \"none\";\n  InterceptResolutionAction[\"AlreadyHandled\"] = \"already-handled\";\n})(InterceptResolutionAction || (InterceptResolutionAction = {}));\n/**\n * @internal\n */\nexport function headersArray(headers) {\n  const result = [];\n  for (const name in headers) {\n    const value = headers[name];\n    if (!Object.is(value, undefined)) {\n      const values = Array.isArray(value) ? value : [value];\n      result.push(...values.map(value => {\n        return {\n          name,\n          value: value + ''\n        };\n      }));\n    }\n  }\n  return result;\n}\n/**\n * @internal\n *\n * @remarks\n * List taken from {@link https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml}\n * with extra 306 and 418 codes.\n */\nexport const STATUS_TEXTS = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '103': 'Early Hints',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '306': 'Switch Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': \"I'm a teapot\",\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Too Early',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required'\n};","map":{"version":3,"mappings":"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","names":["DEFAULT_INTERCEPT_RESOLUTION_PRIORITY","HTTPRequest","_requestId","_interceptionId","_failureText","_response","_fromMemoryCache","_redirectChain","constructor","InterceptResolutionAction","headersArray","headers","result","name","value","Object","is","undefined","values","Array","isArray","push","map","STATUS_TEXTS"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\api\\HTTPRequest.ts"],"sourcesContent":["/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from './CDPSession.js';\nimport type {Frame} from './Frame.js';\nimport type {HTTPResponse} from './HTTPResponse.js';\n\n/**\n * @public\n */\nexport interface ContinueRequestOverrides {\n  /**\n   * If set, the request URL will change. This is not a redirect.\n   */\n  url?: string;\n  method?: string;\n  postData?: string;\n  headers?: Record<string, string>;\n}\n\n/**\n * @public\n */\nexport interface InterceptResolutionState {\n  action: InterceptResolutionAction;\n  priority?: number;\n}\n\n/**\n * Required response data to fulfill a request with.\n *\n * @public\n */\nexport interface ResponseForRequest {\n  status: number;\n  /**\n   * Optional response headers. All values are converted to strings.\n   */\n  headers: Record<string, unknown>;\n  contentType: string;\n  body: string | Buffer;\n}\n\n/**\n * Resource types for HTTPRequests as perceived by the rendering engine.\n *\n * @public\n */\nexport type ResourceType = Lowercase<Protocol.Network.ResourceType>;\n\n/**\n * The default cooperative request interception resolution priority\n *\n * @public\n */\nexport const DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;\n\n/**\n * Represents an HTTP request sent by a page.\n * @remarks\n *\n * Whenever the page sends a request, such as for a network resource, the\n * following events are emitted by Puppeteer's `page`:\n *\n * - `request`: emitted when the request is issued by the page.\n * - `requestfinished` - emitted when the response body is downloaded and the\n *   request is complete.\n *\n * If request fails at some point, then instead of `requestfinished` event the\n * `requestfailed` event is emitted.\n *\n * All of these events provide an instance of `HTTPRequest` representing the\n * request that occurred:\n *\n * ```\n * page.on('request', request => ...)\n * ```\n *\n * NOTE: HTTP Error responses, such as 404 or 503, are still successful\n * responses from HTTP standpoint, so request will complete with\n * `requestfinished` event.\n *\n * If request gets a 'redirect' response, the request is successfully finished\n * with the `requestfinished` event, and a new request is issued to a\n * redirected url.\n *\n * @public\n */\nexport abstract class HTTPRequest {\n  /**\n   * @internal\n   */\n  _requestId = '';\n  /**\n   * @internal\n   */\n  _interceptionId: string | undefined;\n  /**\n   * @internal\n   */\n  _failureText: string | null = null;\n  /**\n   * @internal\n   */\n  _response: HTTPResponse | null = null;\n  /**\n   * @internal\n   */\n  _fromMemoryCache = false;\n  /**\n   * @internal\n   */\n  _redirectChain: HTTPRequest[] = [];\n\n  /**\n   * Warning! Using this client can break Puppeteer. Use with caution.\n   *\n   * @experimental\n   */\n  abstract get client(): CDPSession;\n\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * The URL of the request\n   */\n  abstract url(): string;\n\n  /**\n   * The `ContinueRequestOverrides` that will be used\n   * if the interception is allowed to continue (ie, `abort()` and\n   * `respond()` aren't called).\n   */\n  abstract continueRequestOverrides(): ContinueRequestOverrides;\n\n  /**\n   * The `ResponseForRequest` that gets used if the\n   * interception is allowed to respond (ie, `abort()` is not called).\n   */\n  abstract responseForRequest(): Partial<ResponseForRequest> | null;\n\n  /**\n   * The most recent reason for aborting the request\n   */\n  abstract abortErrorReason(): Protocol.Network.ErrorReason | null;\n\n  /**\n   * An InterceptResolutionState object describing the current resolution\n   * action and priority.\n   *\n   * InterceptResolutionState contains:\n   * action: InterceptResolutionAction\n   * priority?: number\n   *\n   * InterceptResolutionAction is one of: `abort`, `respond`, `continue`,\n   * `disabled`, `none`, or `already-handled`.\n   */\n  abstract interceptResolutionState(): InterceptResolutionState;\n\n  /**\n   * Is `true` if the intercept resolution has already been handled,\n   * `false` otherwise.\n   */\n  abstract isInterceptResolutionHandled(): boolean;\n\n  /**\n   * Adds an async request handler to the processing queue.\n   * Deferred handlers are not guaranteed to execute in any particular order,\n   * but they are guaranteed to resolve before the request interception\n   * is finalized.\n   */\n  abstract enqueueInterceptAction(\n    pendingHandler: () => void | PromiseLike<unknown>\n  ): void;\n\n  /**\n   * Awaits pending interception handlers and then decides how to fulfill\n   * the request interception.\n   */\n  abstract finalizeInterceptions(): Promise<void>;\n\n  /**\n   * Contains the request's resource type as it was perceived by the rendering\n   * engine.\n   */\n  abstract resourceType(): ResourceType;\n\n  /**\n   * The method used (`GET`, `POST`, etc.)\n   */\n  abstract method(): string;\n\n  /**\n   * The request's post body, if any.\n   */\n  abstract postData(): string | undefined;\n\n  /**\n   * An object with HTTP headers associated with the request. All\n   * header names are lower-case.\n   */\n  abstract headers(): Record<string, string>;\n\n  /**\n   * A matching `HTTPResponse` object, or null if the response has not\n   * been received yet.\n   */\n  abstract response(): HTTPResponse | null;\n\n  /**\n   * The frame that initiated the request, or null if navigating to\n   * error pages.\n   */\n  abstract frame(): Frame | null;\n\n  /**\n   * True if the request is the driver of the current frame's navigation.\n   */\n  abstract isNavigationRequest(): boolean;\n\n  /**\n   * The initiator of the request.\n   */\n  abstract initiator(): Protocol.Network.Initiator | undefined;\n\n  /**\n   * A `redirectChain` is a chain of requests initiated to fetch a resource.\n   * @remarks\n   *\n   * `redirectChain` is shared between all the requests of the same chain.\n   *\n   * For example, if the website `http://example.com` has a single redirect to\n   * `https://example.com`, then the chain will contain one request:\n   *\n   * ```ts\n   * const response = await page.goto('http://example.com');\n   * const chain = response.request().redirectChain();\n   * console.log(chain.length); // 1\n   * console.log(chain[0].url()); // 'http://example.com'\n   * ```\n   *\n   * If the website `https://google.com` has no redirects, then the chain will be empty:\n   *\n   * ```ts\n   * const response = await page.goto('https://google.com');\n   * const chain = response.request().redirectChain();\n   * console.log(chain.length); // 0\n   * ```\n   *\n   * @returns the chain of requests - if a server responds with at least a\n   * single redirect, this chain will contain all requests that were redirected.\n   */\n  abstract redirectChain(): HTTPRequest[];\n\n  /**\n   * Access information about the request's failure.\n   *\n   * @remarks\n   *\n   * @example\n   *\n   * Example of logging all failed requests:\n   *\n   * ```ts\n   * page.on('requestfailed', request => {\n   *   console.log(request.url() + ' ' + request.failure().errorText);\n   * });\n   * ```\n   *\n   * @returns `null` unless the request failed. If the request fails this can\n   * return an object with `errorText` containing a human-readable error\n   * message, e.g. `net::ERR_FAILED`. It is not guaranteed that there will be\n   * failure text if the request fails.\n   */\n  abstract failure(): {errorText: string} | null;\n\n  /**\n   * Continues request with optional request overrides.\n   *\n   * @remarks\n   *\n   * To use this, request\n   * interception should be enabled with {@link Page.setRequestInterception}.\n   *\n   * Exception is immediately thrown if the request interception is not enabled.\n   *\n   * @example\n   *\n   * ```ts\n   * await page.setRequestInterception(true);\n   * page.on('request', request => {\n   *   // Override headers\n   *   const headers = Object.assign({}, request.headers(), {\n   *     foo: 'bar', // set \"foo\" header\n   *     origin: undefined, // remove \"origin\" header\n   *   });\n   *   request.continue({headers});\n   * });\n   * ```\n   *\n   * @param overrides - optional overrides to apply to the request.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n  abstract continue(\n    overrides?: ContinueRequestOverrides,\n    priority?: number\n  ): Promise<void>;\n\n  /**\n   * Fulfills a request with the given response.\n   *\n   * @remarks\n   *\n   * To use this, request\n   * interception should be enabled with {@link Page.setRequestInterception}.\n   *\n   * Exception is immediately thrown if the request interception is not enabled.\n   *\n   * @example\n   * An example of fulfilling all requests with 404 responses:\n   *\n   * ```ts\n   * await page.setRequestInterception(true);\n   * page.on('request', request => {\n   *   request.respond({\n   *     status: 404,\n   *     contentType: 'text/plain',\n   *     body: 'Not Found!',\n   *   });\n   * });\n   * ```\n   *\n   * NOTE: Mocking responses for dataURL requests is not supported.\n   * Calling `request.respond` for a dataURL request is a noop.\n   *\n   * @param response - the response to fulfill the request with.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n  abstract respond(\n    response: Partial<ResponseForRequest>,\n    priority?: number\n  ): Promise<void>;\n\n  /**\n   * Aborts a request.\n   *\n   * @remarks\n   * To use this, request interception should be enabled with\n   * {@link Page.setRequestInterception}. If it is not enabled, this method will\n   * throw an exception immediately.\n   *\n   * @param errorCode - optional error code to provide.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n  abstract abort(errorCode?: ErrorCode, priority?: number): Promise<void>;\n}\n\n/**\n * @public\n */\nexport enum InterceptResolutionAction {\n  Abort = 'abort',\n  Respond = 'respond',\n  Continue = 'continue',\n  Disabled = 'disabled',\n  None = 'none',\n  AlreadyHandled = 'already-handled',\n}\n\n/**\n * @public\n *\n * @deprecated please use {@link InterceptResolutionAction} instead.\n */\nexport type InterceptResolutionStrategy = InterceptResolutionAction;\n\n/**\n * @public\n */\nexport type ErrorCode =\n  | 'aborted'\n  | 'accessdenied'\n  | 'addressunreachable'\n  | 'blockedbyclient'\n  | 'blockedbyresponse'\n  | 'connectionaborted'\n  | 'connectionclosed'\n  | 'connectionfailed'\n  | 'connectionrefused'\n  | 'connectionreset'\n  | 'internetdisconnected'\n  | 'namenotresolved'\n  | 'timedout'\n  | 'failed';\n\n/**\n * @public\n */\nexport type ActionResult = 'continue' | 'abort' | 'respond';\n\n/**\n * @internal\n */\nexport function headersArray(\n  headers: Record<string, string | string[]>\n): Array<{name: string; value: string}> {\n  const result = [];\n  for (const name in headers) {\n    const value = headers[name];\n\n    if (!Object.is(value, undefined)) {\n      const values = Array.isArray(value) ? value : [value];\n\n      result.push(\n        ...values.map(value => {\n          return {name, value: value + ''};\n        })\n      );\n    }\n  }\n  return result;\n}\n\n/**\n * @internal\n *\n * @remarks\n * List taken from {@link https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml}\n * with extra 306 and 418 codes.\n */\nexport const STATUS_TEXTS: Record<string, string> = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '103': 'Early Hints',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '306': 'Switch Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': \"I'm a teapot\",\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Too Early',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required',\n} as const;\n"]},"metadata":{},"sourceType":"module"}