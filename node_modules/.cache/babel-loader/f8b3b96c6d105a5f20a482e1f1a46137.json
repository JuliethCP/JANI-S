{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;\nvar tslib_1 = require(\"tslib\");\nvar fork_1 = tslib_1.__importDefault(require(\"./fork\"));\nvar core_1 = tslib_1.__importDefault(require(\"./def/core\"));\nvar es6_1 = tslib_1.__importDefault(require(\"./def/es6\"));\nvar es7_1 = tslib_1.__importDefault(require(\"./def/es7\"));\nvar es2020_1 = tslib_1.__importDefault(require(\"./def/es2020\"));\nvar jsx_1 = tslib_1.__importDefault(require(\"./def/jsx\"));\nvar flow_1 = tslib_1.__importDefault(require(\"./def/flow\"));\nvar esprima_1 = tslib_1.__importDefault(require(\"./def/esprima\"));\nvar babel_1 = tslib_1.__importDefault(require(\"./def/babel\"));\nvar typescript_1 = tslib_1.__importDefault(require(\"./def/typescript\"));\nvar es_proposals_1 = tslib_1.__importDefault(require(\"./def/es-proposals\"));\nvar namedTypes_1 = require(\"./gen/namedTypes\");\nObject.defineProperty(exports, \"namedTypes\", {\n  enumerable: true,\n  get: function () {\n    return namedTypes_1.namedTypes;\n  }\n});\nvar _a = fork_1.default([\n  // This core module of AST types captures ES5 as it is parsed today by\n  // git://github.com/ariya/esprima.git#master.\n  core_1.default,\n  // Feel free to add to or remove from this list of extension modules to\n  // configure the precise type hierarchy that you need.\n  es6_1.default, es7_1.default, es2020_1.default, jsx_1.default, flow_1.default, esprima_1.default, babel_1.default, typescript_1.default, es_proposals_1.default]),\n  astNodesAreEquivalent = _a.astNodesAreEquivalent,\n  builders = _a.builders,\n  builtInTypes = _a.builtInTypes,\n  defineMethod = _a.defineMethod,\n  eachField = _a.eachField,\n  finalize = _a.finalize,\n  getBuilderName = _a.getBuilderName,\n  getFieldNames = _a.getFieldNames,\n  getFieldValue = _a.getFieldValue,\n  getSupertypeNames = _a.getSupertypeNames,\n  n = _a.namedTypes,\n  NodePath = _a.NodePath,\n  Path = _a.Path,\n  PathVisitor = _a.PathVisitor,\n  someField = _a.someField,\n  Type = _a.Type,\n  use = _a.use,\n  visit = _a.visit;\nexports.astNodesAreEquivalent = astNodesAreEquivalent;\nexports.builders = builders;\nexports.builtInTypes = builtInTypes;\nexports.defineMethod = defineMethod;\nexports.eachField = eachField;\nexports.finalize = finalize;\nexports.getBuilderName = getBuilderName;\nexports.getFieldNames = getFieldNames;\nexports.getFieldValue = getFieldValue;\nexports.getSupertypeNames = getSupertypeNames;\nexports.NodePath = NodePath;\nexports.Path = Path;\nexports.PathVisitor = PathVisitor;\nexports.someField = someField;\nexports.Type = Type;\nexports.use = use;\nexports.visit = visit;\n// Populate the exported fields of the namedTypes namespace, while still\n// retaining its member types.\nObject.assign(namedTypes_1.namedTypes, n);","map":{"version":3,"names":["Object","defineProperty","exports","value","visit","use","Type","someField","PathVisitor","Path","NodePath","namedTypes","getSupertypeNames","getFieldValue","getFieldNames","getBuilderName","finalize","eachField","defineMethod","builtInTypes","builders","astNodesAreEquivalent","tslib_1","require","fork_1","__importDefault","core_1","es6_1","es7_1","es2020_1","jsx_1","flow_1","esprima_1","babel_1","typescript_1","es_proposals_1","namedTypes_1","enumerable","get","_a","default","n","assign"],"sources":["D:/Julieth-Campos/PSO/node_modules/ast-types/main.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.visit = exports.use = exports.Type = exports.someField = exports.PathVisitor = exports.Path = exports.NodePath = exports.namedTypes = exports.getSupertypeNames = exports.getFieldValue = exports.getFieldNames = exports.getBuilderName = exports.finalize = exports.eachField = exports.defineMethod = exports.builtInTypes = exports.builders = exports.astNodesAreEquivalent = void 0;\nvar tslib_1 = require(\"tslib\");\nvar fork_1 = tslib_1.__importDefault(require(\"./fork\"));\nvar core_1 = tslib_1.__importDefault(require(\"./def/core\"));\nvar es6_1 = tslib_1.__importDefault(require(\"./def/es6\"));\nvar es7_1 = tslib_1.__importDefault(require(\"./def/es7\"));\nvar es2020_1 = tslib_1.__importDefault(require(\"./def/es2020\"));\nvar jsx_1 = tslib_1.__importDefault(require(\"./def/jsx\"));\nvar flow_1 = tslib_1.__importDefault(require(\"./def/flow\"));\nvar esprima_1 = tslib_1.__importDefault(require(\"./def/esprima\"));\nvar babel_1 = tslib_1.__importDefault(require(\"./def/babel\"));\nvar typescript_1 = tslib_1.__importDefault(require(\"./def/typescript\"));\nvar es_proposals_1 = tslib_1.__importDefault(require(\"./def/es-proposals\"));\nvar namedTypes_1 = require(\"./gen/namedTypes\");\nObject.defineProperty(exports, \"namedTypes\", { enumerable: true, get: function () { return namedTypes_1.namedTypes; } });\nvar _a = fork_1.default([\n    // This core module of AST types captures ES5 as it is parsed today by\n    // git://github.com/ariya/esprima.git#master.\n    core_1.default,\n    // Feel free to add to or remove from this list of extension modules to\n    // configure the precise type hierarchy that you need.\n    es6_1.default,\n    es7_1.default,\n    es2020_1.default,\n    jsx_1.default,\n    flow_1.default,\n    esprima_1.default,\n    babel_1.default,\n    typescript_1.default,\n    es_proposals_1.default,\n]), astNodesAreEquivalent = _a.astNodesAreEquivalent, builders = _a.builders, builtInTypes = _a.builtInTypes, defineMethod = _a.defineMethod, eachField = _a.eachField, finalize = _a.finalize, getBuilderName = _a.getBuilderName, getFieldNames = _a.getFieldNames, getFieldValue = _a.getFieldValue, getSupertypeNames = _a.getSupertypeNames, n = _a.namedTypes, NodePath = _a.NodePath, Path = _a.Path, PathVisitor = _a.PathVisitor, someField = _a.someField, Type = _a.Type, use = _a.use, visit = _a.visit;\nexports.astNodesAreEquivalent = astNodesAreEquivalent;\nexports.builders = builders;\nexports.builtInTypes = builtInTypes;\nexports.defineMethod = defineMethod;\nexports.eachField = eachField;\nexports.finalize = finalize;\nexports.getBuilderName = getBuilderName;\nexports.getFieldNames = getFieldNames;\nexports.getFieldValue = getFieldValue;\nexports.getSupertypeNames = getSupertypeNames;\nexports.NodePath = NodePath;\nexports.Path = Path;\nexports.PathVisitor = PathVisitor;\nexports.someField = someField;\nexports.Type = Type;\nexports.use = use;\nexports.visit = visit;\n// Populate the exported fields of the namedTypes namespace, while still\n// retaining its member types.\nObject.assign(namedTypes_1.namedTypes, n);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}