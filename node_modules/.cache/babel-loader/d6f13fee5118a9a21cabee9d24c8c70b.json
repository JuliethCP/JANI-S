{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformList = exports.parseLine = exports.testLine = void 0;\nconst FileInfo_1 = require(\"./FileInfo\");\nconst JA_MONTH = \"\\u6708\";\nconst JA_DAY = \"\\u65e5\";\nconst JA_YEAR = \"\\u5e74\";\n/**\n * This parser is based on the FTP client library source code in Apache Commons Net provided\n * under the Apache 2.0 license. It has been simplified and rewritten to better fit the Javascript language.\n *\n * https://github.com/apache/commons-net/blob/master/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java\n *\n * Below is the regular expression used by this parser.\n *\n * Permissions:\n *    r   the file is readable\n *    w   the file is writable\n *    x   the file is executable\n *    -   the indicated permission is not granted\n *    L   mandatory locking occurs during access (the set-group-ID bit is\n *        on and the group execution bit is off)\n *    s   the set-user-ID or set-group-ID bit is on, and the corresponding\n *        user or group execution bit is also on\n *    S   undefined bit-state (the set-user-ID bit is on and the user\n *        execution bit is off)\n *    t   the 1000 (octal) bit, or sticky bit, is on [see chmod(1)], and\n *        execution is on\n *    T   the 1000 bit is turned on, and execution is off (undefined bit-\n *        state)\n *    e   z/OS external link bit\n *    Final letter may be appended:\n *    +   file has extended security attributes (e.g. ACL)\n *    Note: local listings on MacOSX also use '@'\n *    this is not allowed for here as does not appear to be shown by FTP servers\n *    {@code @}   file has extended attributes\n */\nconst RE_LINE = new RegExp(\"([bcdelfmpSs-])\" // file type\n+ \"(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]?)))\\\\+?\" // permissions\n+ \"\\\\s*\" // separator TODO why allow it to be omitted??\n+ \"(\\\\d+)\" // link count\n+ \"\\\\s+\" // separator\n+ \"(?:(\\\\S+(?:\\\\s\\\\S+)*?)\\\\s+)?\" // owner name (optional spaces)\n+ \"(?:(\\\\S+(?:\\\\s\\\\S+)*)\\\\s+)?\" // group name (optional spaces)\n+ \"(\\\\d+(?:,\\\\s*\\\\d+)?)\" // size or n,m\n+ \"\\\\s+\" // separator\n/**\n * numeric or standard format date:\n *   yyyy-mm-dd (expecting hh:mm to follow)\n *   MMM [d]d\n *   [d]d MMM\n *   N.B. use non-space for MMM to allow for languages such as German which use\n *   diacritics (e.g. umlaut) in some abbreviations.\n *   Japanese uses numeric day and month with suffixes to distinguish them\n *   [d]dXX [d]dZZ\n */ + \"(\" + \"(?:\\\\d+[-/]\\\\d+[-/]\\\\d+)\" +\n// yyyy-mm-dd\n\"|(?:\\\\S{3}\\\\s+\\\\d{1,2})\" +\n// MMM [d]d\n\"|(?:\\\\d{1,2}\\\\s+\\\\S{3})\" +\n// [d]d MMM\n\"|(?:\\\\d{1,2}\" + JA_MONTH + \"\\\\s+\\\\d{1,2}\" + JA_DAY + \")\" + \")\" + \"\\\\s+\" // separator\n/**\n * year (for non-recent standard format) - yyyy\n * or time (for numeric or recent standard format) [h]h:mm\n * or Japanese year - yyyyXX\n */ + \"((?:\\\\d+(?::\\\\d+)?)|(?:\\\\d{4}\" + JA_YEAR + \"))\" // (20)\n+ \"\\\\s\" // separator\n+ \"(.*)\"); // the rest (21)\n/**\n * Returns true if a given line might be a Unix-style listing.\n *\n * - Example: `-rw-r--r--+   1 patrick  staff   1057 Dec 11 14:35 test.txt`\n */\nfunction testLine(line) {\n  return RE_LINE.test(line);\n}\nexports.testLine = testLine;\n/**\n * Parse a single line of a Unix-style directory listing.\n */\nfunction parseLine(line) {\n  const groups = line.match(RE_LINE);\n  if (groups === null) {\n    return undefined;\n  }\n  const name = groups[21];\n  if (name === \".\" || name === \"..\") {\n    // Ignore parent directory links\n    return undefined;\n  }\n  const file = new FileInfo_1.FileInfo(name);\n  file.size = parseInt(groups[18], 10);\n  file.user = groups[16];\n  file.group = groups[17];\n  file.hardLinkCount = parseInt(groups[15], 10);\n  file.rawModifiedAt = groups[19] + \" \" + groups[20];\n  file.permissions = {\n    user: parseMode(groups[4], groups[5], groups[6]),\n    group: parseMode(groups[8], groups[9], groups[10]),\n    world: parseMode(groups[12], groups[13], groups[14])\n  };\n  // Set file type\n  switch (groups[1].charAt(0)) {\n    case \"d\":\n      file.type = FileInfo_1.FileType.Directory;\n      break;\n    case \"e\":\n      // NET-39 => z/OS external link\n      file.type = FileInfo_1.FileType.SymbolicLink;\n      break;\n    case \"l\":\n      file.type = FileInfo_1.FileType.SymbolicLink;\n      break;\n    case \"b\":\n    case \"c\":\n      file.type = FileInfo_1.FileType.File; // TODO change this if DEVICE_TYPE implemented\n      break;\n    case \"f\":\n    case \"-\":\n      file.type = FileInfo_1.FileType.File;\n      break;\n    default:\n      // A 'whiteout' file is an ARTIFICIAL entry in any of several types of\n      // 'translucent' filesystems, of which a 'union' filesystem is one.\n      file.type = FileInfo_1.FileType.Unknown;\n  }\n  // Separate out the link name for symbolic links\n  if (file.isSymbolicLink) {\n    const end = name.indexOf(\" -> \");\n    if (end !== -1) {\n      file.name = name.substring(0, end);\n      file.link = name.substring(end + 4);\n    }\n  }\n  return file;\n}\nexports.parseLine = parseLine;\nfunction transformList(files) {\n  return files;\n}\nexports.transformList = transformList;\nfunction parseMode(r, w, x) {\n  let value = 0;\n  if (r !== \"-\") {\n    value += FileInfo_1.FileInfo.UnixPermission.Read;\n  }\n  if (w !== \"-\") {\n    value += FileInfo_1.FileInfo.UnixPermission.Write;\n  }\n  const execToken = x.charAt(0);\n  if (execToken !== \"-\" && execToken.toUpperCase() !== execToken) {\n    value += FileInfo_1.FileInfo.UnixPermission.Execute;\n  }\n  return value;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","transformList","parseLine","testLine","FileInfo_1","require","JA_MONTH","JA_DAY","JA_YEAR","RE_LINE","RegExp","line","test","groups","match","undefined","name","file","FileInfo","size","parseInt","user","group","hardLinkCount","rawModifiedAt","permissions","parseMode","world","charAt","type","FileType","Directory","SymbolicLink","File","Unknown","isSymbolicLink","end","indexOf","substring","link","files","r","w","x","UnixPermission","Read","Write","execToken","toUpperCase","Execute"],"sources":["D:/Julieth-Campos/PSO/node_modules/basic-ftp/dist/parseListUnix.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformList = exports.parseLine = exports.testLine = void 0;\nconst FileInfo_1 = require(\"./FileInfo\");\nconst JA_MONTH = \"\\u6708\";\nconst JA_DAY = \"\\u65e5\";\nconst JA_YEAR = \"\\u5e74\";\n/**\n * This parser is based on the FTP client library source code in Apache Commons Net provided\n * under the Apache 2.0 license. It has been simplified and rewritten to better fit the Javascript language.\n *\n * https://github.com/apache/commons-net/blob/master/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java\n *\n * Below is the regular expression used by this parser.\n *\n * Permissions:\n *    r   the file is readable\n *    w   the file is writable\n *    x   the file is executable\n *    -   the indicated permission is not granted\n *    L   mandatory locking occurs during access (the set-group-ID bit is\n *        on and the group execution bit is off)\n *    s   the set-user-ID or set-group-ID bit is on, and the corresponding\n *        user or group execution bit is also on\n *    S   undefined bit-state (the set-user-ID bit is on and the user\n *        execution bit is off)\n *    t   the 1000 (octal) bit, or sticky bit, is on [see chmod(1)], and\n *        execution is on\n *    T   the 1000 bit is turned on, and execution is off (undefined bit-\n *        state)\n *    e   z/OS external link bit\n *    Final letter may be appended:\n *    +   file has extended security attributes (e.g. ACL)\n *    Note: local listings on MacOSX also use '@'\n *    this is not allowed for here as does not appear to be shown by FTP servers\n *    {@code @}   file has extended attributes\n */\nconst RE_LINE = new RegExp(\"([bcdelfmpSs-])\" // file type\n    + \"(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]?)))\\\\+?\" // permissions\n    + \"\\\\s*\" // separator TODO why allow it to be omitted??\n    + \"(\\\\d+)\" // link count\n    + \"\\\\s+\" // separator\n    + \"(?:(\\\\S+(?:\\\\s\\\\S+)*?)\\\\s+)?\" // owner name (optional spaces)\n    + \"(?:(\\\\S+(?:\\\\s\\\\S+)*)\\\\s+)?\" // group name (optional spaces)\n    + \"(\\\\d+(?:,\\\\s*\\\\d+)?)\" // size or n,m\n    + \"\\\\s+\" // separator\n    /**\n     * numeric or standard format date:\n     *   yyyy-mm-dd (expecting hh:mm to follow)\n     *   MMM [d]d\n     *   [d]d MMM\n     *   N.B. use non-space for MMM to allow for languages such as German which use\n     *   diacritics (e.g. umlaut) in some abbreviations.\n     *   Japanese uses numeric day and month with suffixes to distinguish them\n     *   [d]dXX [d]dZZ\n     */\n    + \"(\" +\n    \"(?:\\\\d+[-/]\\\\d+[-/]\\\\d+)\" + // yyyy-mm-dd\n    \"|(?:\\\\S{3}\\\\s+\\\\d{1,2})\" + // MMM [d]d\n    \"|(?:\\\\d{1,2}\\\\s+\\\\S{3})\" + // [d]d MMM\n    \"|(?:\\\\d{1,2}\" + JA_MONTH + \"\\\\s+\\\\d{1,2}\" + JA_DAY + \")\" +\n    \")\"\n    + \"\\\\s+\" // separator\n    /**\n     * year (for non-recent standard format) - yyyy\n     * or time (for numeric or recent standard format) [h]h:mm\n     * or Japanese year - yyyyXX\n     */\n    + \"((?:\\\\d+(?::\\\\d+)?)|(?:\\\\d{4}\" + JA_YEAR + \"))\" // (20)\n    + \"\\\\s\" // separator\n    + \"(.*)\"); // the rest (21)\n/**\n * Returns true if a given line might be a Unix-style listing.\n *\n * - Example: `-rw-r--r--+   1 patrick  staff   1057 Dec 11 14:35 test.txt`\n */\nfunction testLine(line) {\n    return RE_LINE.test(line);\n}\nexports.testLine = testLine;\n/**\n * Parse a single line of a Unix-style directory listing.\n */\nfunction parseLine(line) {\n    const groups = line.match(RE_LINE);\n    if (groups === null) {\n        return undefined;\n    }\n    const name = groups[21];\n    if (name === \".\" || name === \"..\") { // Ignore parent directory links\n        return undefined;\n    }\n    const file = new FileInfo_1.FileInfo(name);\n    file.size = parseInt(groups[18], 10);\n    file.user = groups[16];\n    file.group = groups[17];\n    file.hardLinkCount = parseInt(groups[15], 10);\n    file.rawModifiedAt = groups[19] + \" \" + groups[20];\n    file.permissions = {\n        user: parseMode(groups[4], groups[5], groups[6]),\n        group: parseMode(groups[8], groups[9], groups[10]),\n        world: parseMode(groups[12], groups[13], groups[14]),\n    };\n    // Set file type\n    switch (groups[1].charAt(0)) {\n        case \"d\":\n            file.type = FileInfo_1.FileType.Directory;\n            break;\n        case \"e\": // NET-39 => z/OS external link\n            file.type = FileInfo_1.FileType.SymbolicLink;\n            break;\n        case \"l\":\n            file.type = FileInfo_1.FileType.SymbolicLink;\n            break;\n        case \"b\":\n        case \"c\":\n            file.type = FileInfo_1.FileType.File; // TODO change this if DEVICE_TYPE implemented\n            break;\n        case \"f\":\n        case \"-\":\n            file.type = FileInfo_1.FileType.File;\n            break;\n        default:\n            // A 'whiteout' file is an ARTIFICIAL entry in any of several types of\n            // 'translucent' filesystems, of which a 'union' filesystem is one.\n            file.type = FileInfo_1.FileType.Unknown;\n    }\n    // Separate out the link name for symbolic links\n    if (file.isSymbolicLink) {\n        const end = name.indexOf(\" -> \");\n        if (end !== -1) {\n            file.name = name.substring(0, end);\n            file.link = name.substring(end + 4);\n        }\n    }\n    return file;\n}\nexports.parseLine = parseLine;\nfunction transformList(files) {\n    return files;\n}\nexports.transformList = transformList;\nfunction parseMode(r, w, x) {\n    let value = 0;\n    if (r !== \"-\") {\n        value += FileInfo_1.FileInfo.UnixPermission.Read;\n    }\n    if (w !== \"-\") {\n        value += FileInfo_1.FileInfo.UnixPermission.Write;\n    }\n    const execToken = x.charAt(0);\n    if (execToken !== \"-\" && execToken.toUpperCase() !== execToken) {\n        value += FileInfo_1.FileInfo.UnixPermission.Execute;\n    }\n    return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}