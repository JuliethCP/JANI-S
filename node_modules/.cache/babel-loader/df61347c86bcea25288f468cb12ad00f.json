{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { stdin as input, stdout as output } from 'process';\nimport * as readline from 'readline';\nimport ProgressBar from 'progress';\nimport { hideBin } from 'yargs/helpers';\nimport yargs from 'yargs/yargs';\nimport { resolveBuildId, BrowserPlatform } from './browser-data/browser-data.js';\nimport { Cache } from './Cache.js';\nimport { detectBrowserPlatform } from './detectPlatform.js';\nimport { install } from './install.js';\nimport { computeExecutablePath, computeSystemExecutablePath, launch } from './launch.js';\n/**\n * @public\n */\nexport class CLI {\n  #cachePath;\n  #rl;\n  constructor() {\n    let cachePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();\n    let rl = arguments.length > 1 ? arguments[1] : undefined;\n    this.#cachePath = cachePath;\n    this.#rl = rl;\n  }\n  #defineBrowserParameter(yargs) {\n    yargs.positional('browser', {\n      description: 'Which browser to install <browser>[@<buildId|latest>]. `latest` will try to find the latest available build. `buildId` is a browser-specific identifier such as a version or a revision.',\n      type: 'string',\n      coerce: opt => {\n        return {\n          name: this.#parseBrowser(opt),\n          buildId: this.#parseBuildId(opt)\n        };\n      }\n    });\n  }\n  #definePlatformParameter(yargs) {\n    yargs.option('platform', {\n      type: 'string',\n      desc: 'Platform that the binary needs to be compatible with.',\n      choices: Object.values(BrowserPlatform),\n      defaultDescription: 'Auto-detected'\n    });\n  }\n  #definePathParameter(yargs) {\n    let required = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    yargs.option('path', {\n      type: 'string',\n      desc: 'Path to the root folder for the browser downloads and installation. The installation folder structure is compatible with the cache structure used by Puppeteer.',\n      defaultDescription: 'Current working directory',\n      ...(required ? {} : {\n        default: process.cwd()\n      })\n    });\n    if (required) {\n      yargs.demandOption('path');\n    }\n  }\n  async run(argv) {\n    const yargsInstance = yargs(hideBin(argv));\n    await yargsInstance.scriptName('@puppeteer/browsers').command('install <browser>', 'Download and install the specified browser. If successful, the command outputs the actual browser buildId that was installed and the absolute path to the browser executable (format: <browser>@<buildID> <path>).', yargs => {\n      this.#defineBrowserParameter(yargs);\n      this.#definePlatformParameter(yargs);\n      this.#definePathParameter(yargs);\n      yargs.option('base-url', {\n        type: 'string',\n        desc: 'Base URL to download from'\n      });\n      yargs.example('$0 install chrome', 'Install the latest available build of the Chrome browser.');\n      yargs.example('$0 install chrome@latest', 'Install the latest available build for the Chrome browser.');\n      yargs.example('$0 install chrome@canary', 'Install the latest available build for the Chrome Canary browser.');\n      yargs.example('$0 install chrome@115', 'Install the latest available build for Chrome 115.');\n      yargs.example('$0 install chromedriver@canary', 'Install the latest available build for ChromeDriver Canary.');\n      yargs.example('$0 install chromedriver@115', 'Install the latest available build for ChromeDriver 115.');\n      yargs.example('$0 install chromedriver@115.0.5790', 'Install the latest available patch (115.0.5790.X) build for ChromeDriver.');\n      yargs.example('$0 install chrome-headless-shell', 'Install the latest available chrome-headless-shell build.');\n      yargs.example('$0 install chrome-headless-shell@beta', 'Install the latest available chrome-headless-shell build corresponding to the Beta channel.');\n      yargs.example('$0 install chrome-headless-shell@118', 'Install the latest available chrome-headless-shell 118 build.');\n      yargs.example('$0 install chromium@1083080', 'Install the revision 1083080 of the Chromium browser.');\n      yargs.example('$0 install firefox', 'Install the latest available build of the Firefox browser.');\n      yargs.example('$0 install firefox --platform mac', 'Install the latest Mac (Intel) build of the Firefox browser.');\n      yargs.example('$0 install firefox --path /tmp/my-browser-cache', 'Install to the specified cache directory.');\n    }, async argv => {\n      const args = argv;\n      args.platform ??= detectBrowserPlatform();\n      if (!args.platform) {\n        throw new Error(`Could not resolve the current platform`);\n      }\n      args.browser.buildId = await resolveBuildId(args.browser.name, args.platform, args.browser.buildId);\n      await install({\n        browser: args.browser.name,\n        buildId: args.browser.buildId,\n        platform: args.platform,\n        cacheDir: args.path ?? this.#cachePath,\n        downloadProgressCallback: makeProgressCallback(args.browser.name, args.browser.buildId),\n        baseUrl: args.baseUrl\n      });\n      console.log(`${args.browser.name}@${args.browser.buildId} ${computeExecutablePath({\n        browser: args.browser.name,\n        buildId: args.browser.buildId,\n        cacheDir: args.path ?? this.#cachePath,\n        platform: args.platform\n      })}`);\n    }).command('launch <browser>', 'Launch the specified browser', yargs => {\n      this.#defineBrowserParameter(yargs);\n      this.#definePlatformParameter(yargs);\n      this.#definePathParameter(yargs);\n      yargs.option('detached', {\n        type: 'boolean',\n        desc: 'Detach the child process.',\n        default: false\n      });\n      yargs.option('system', {\n        type: 'boolean',\n        desc: 'Search for a browser installed on the system instead of the cache folder.',\n        default: false\n      });\n      yargs.example('$0 launch chrome@115.0.5790.170', 'Launch Chrome 115.0.5790.170');\n      yargs.example('$0 launch firefox@112.0a1', 'Launch the Firefox browser identified by the milestone 112.0a1.');\n      yargs.example('$0 launch chrome@115.0.5790.170 --detached', 'Launch the browser but detach the sub-processes.');\n      yargs.example('$0 launch chrome@canary --system', 'Try to locate the Canary build of Chrome installed on the system and launch it.');\n    }, async argv => {\n      const args = argv;\n      const executablePath = args.system ? computeSystemExecutablePath({\n        browser: args.browser.name,\n        // TODO: throw an error if not a ChromeReleaseChannel is provided.\n        channel: args.browser.buildId,\n        platform: args.platform\n      }) : computeExecutablePath({\n        browser: args.browser.name,\n        buildId: args.browser.buildId,\n        cacheDir: args.path ?? this.#cachePath,\n        platform: args.platform\n      });\n      launch({\n        executablePath,\n        detached: args.detached\n      });\n    }).command('clear', 'Removes all installed browsers from the specified cache directory', yargs => {\n      this.#definePathParameter(yargs, true);\n    }, async argv => {\n      const args = argv;\n      const cacheDir = args.path ?? this.#cachePath;\n      const rl = this.#rl ?? readline.createInterface({\n        input,\n        output\n      });\n      rl.question(`Do you want to permanently and recursively delete the content of ${cacheDir} (yes/No)? `, answer => {\n        rl.close();\n        if (!['y', 'yes'].includes(answer.toLowerCase().trim())) {\n          console.log('Cancelled.');\n          return;\n        }\n        const cache = new Cache(cacheDir);\n        cache.clear();\n        console.log(`${cacheDir} cleared.`);\n      });\n    }).demandCommand(1).help().wrap(Math.min(120, yargsInstance.terminalWidth())).parse();\n  }\n  #parseBrowser(version) {\n    return version.split('@').shift();\n  }\n  #parseBuildId(version) {\n    const parts = version.split('@');\n    return parts.length === 2 ? parts[1] : 'latest';\n  }\n}\n/**\n * @public\n */\nexport function makeProgressCallback(browser, buildId) {\n  let progressBar;\n  let lastDownloadedBytes = 0;\n  return (downloadedBytes, totalBytes) => {\n    if (!progressBar) {\n      progressBar = new ProgressBar(`Downloading ${browser} r${buildId} - ${toMegabytes(totalBytes)} [:bar] :percent :etas `, {\n        complete: '=',\n        incomplete: ' ',\n        width: 20,\n        total: totalBytes\n      });\n    }\n    const delta = downloadedBytes - lastDownloadedBytes;\n    lastDownloadedBytes = downloadedBytes;\n    progressBar.tick(delta);\n  };\n}\nfunction toMegabytes(bytes) {\n  const mb = bytes / 1000 / 1000;\n  return `${Math.round(mb * 10) / 10} MB`;\n}","map":{"version":3,"mappings":"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","names":["stdin","input","stdout","output","readline","ProgressBar","hideBin","yargs","resolveBuildId","BrowserPlatform","Cache","detectBrowserPlatform","install","computeExecutablePath","computeSystemExecutablePath","launch","CLI","constructor","cachePath","process","cwd","rl","positional","description","type","coerce","opt","name","buildId","option","desc","choices","Object","values","defaultDescription","required","default","demandOption","run","argv","yargsInstance","scriptName","command","example","args","platform","Error","browser","cacheDir","path","downloadProgressCallback","makeProgressCallback","baseUrl","console","log","executablePath","system","channel","detached","createInterface","question","answer","close","includes","toLowerCase","trim","cache","clear","demandCommand","help","wrap","Math","min","terminalWidth","parse","version","split","shift","parts","length","progressBar","lastDownloadedBytes","downloadedBytes","totalBytes","toMegabytes","complete","incomplete","width","total","delta","tick","bytes","mb","round"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\@puppeteer\\browsers\\src\\CLI.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {stdin as input, stdout as output} from 'process';\nimport * as readline from 'readline';\n\nimport ProgressBar from 'progress';\nimport type * as Yargs from 'yargs';\nimport {hideBin} from 'yargs/helpers';\nimport yargs from 'yargs/yargs';\n\nimport {\n  resolveBuildId,\n  type Browser,\n  BrowserPlatform,\n  type ChromeReleaseChannel,\n} from './browser-data/browser-data.js';\nimport {Cache} from './Cache.js';\nimport {detectBrowserPlatform} from './detectPlatform.js';\nimport {install} from './install.js';\nimport {\n  computeExecutablePath,\n  computeSystemExecutablePath,\n  launch,\n} from './launch.js';\n\ninterface InstallArgs {\n  browser: {\n    name: Browser;\n    buildId: string;\n  };\n  path?: string;\n  platform?: BrowserPlatform;\n  baseUrl?: string;\n}\n\ninterface LaunchArgs {\n  browser: {\n    name: Browser;\n    buildId: string;\n  };\n  path?: string;\n  platform?: BrowserPlatform;\n  detached: boolean;\n  system: boolean;\n}\n\ninterface ClearArgs {\n  path?: string;\n}\n\n/**\n * @public\n */\nexport class CLI {\n  #cachePath;\n  #rl?: readline.Interface;\n\n  constructor(cachePath = process.cwd(), rl?: readline.Interface) {\n    this.#cachePath = cachePath;\n    this.#rl = rl;\n  }\n\n  #defineBrowserParameter(yargs: Yargs.Argv<unknown>): void {\n    yargs.positional('browser', {\n      description:\n        'Which browser to install <browser>[@<buildId|latest>]. `latest` will try to find the latest available build. `buildId` is a browser-specific identifier such as a version or a revision.',\n      type: 'string',\n      coerce: (opt): InstallArgs['browser'] => {\n        return {\n          name: this.#parseBrowser(opt),\n          buildId: this.#parseBuildId(opt),\n        };\n      },\n    });\n  }\n\n  #definePlatformParameter(yargs: Yargs.Argv<unknown>): void {\n    yargs.option('platform', {\n      type: 'string',\n      desc: 'Platform that the binary needs to be compatible with.',\n      choices: Object.values(BrowserPlatform),\n      defaultDescription: 'Auto-detected',\n    });\n  }\n\n  #definePathParameter(yargs: Yargs.Argv<unknown>, required = false): void {\n    yargs.option('path', {\n      type: 'string',\n      desc: 'Path to the root folder for the browser downloads and installation. The installation folder structure is compatible with the cache structure used by Puppeteer.',\n      defaultDescription: 'Current working directory',\n      ...(required ? {} : {default: process.cwd()}),\n    });\n    if (required) {\n      yargs.demandOption('path');\n    }\n  }\n\n  async run(argv: string[]): Promise<void> {\n    const yargsInstance = yargs(hideBin(argv));\n    await yargsInstance\n      .scriptName('@puppeteer/browsers')\n      .command(\n        'install <browser>',\n        'Download and install the specified browser. If successful, the command outputs the actual browser buildId that was installed and the absolute path to the browser executable (format: <browser>@<buildID> <path>).',\n        yargs => {\n          this.#defineBrowserParameter(yargs);\n          this.#definePlatformParameter(yargs);\n          this.#definePathParameter(yargs);\n          yargs.option('base-url', {\n            type: 'string',\n            desc: 'Base URL to download from',\n          });\n          yargs.example(\n            '$0 install chrome',\n            'Install the latest available build of the Chrome browser.'\n          );\n          yargs.example(\n            '$0 install chrome@latest',\n            'Install the latest available build for the Chrome browser.'\n          );\n          yargs.example(\n            '$0 install chrome@canary',\n            'Install the latest available build for the Chrome Canary browser.'\n          );\n          yargs.example(\n            '$0 install chrome@115',\n            'Install the latest available build for Chrome 115.'\n          );\n          yargs.example(\n            '$0 install chromedriver@canary',\n            'Install the latest available build for ChromeDriver Canary.'\n          );\n          yargs.example(\n            '$0 install chromedriver@115',\n            'Install the latest available build for ChromeDriver 115.'\n          );\n          yargs.example(\n            '$0 install chromedriver@115.0.5790',\n            'Install the latest available patch (115.0.5790.X) build for ChromeDriver.'\n          );\n          yargs.example(\n            '$0 install chrome-headless-shell',\n            'Install the latest available chrome-headless-shell build.'\n          );\n          yargs.example(\n            '$0 install chrome-headless-shell@beta',\n            'Install the latest available chrome-headless-shell build corresponding to the Beta channel.'\n          );\n          yargs.example(\n            '$0 install chrome-headless-shell@118',\n            'Install the latest available chrome-headless-shell 118 build.'\n          );\n          yargs.example(\n            '$0 install chromium@1083080',\n            'Install the revision 1083080 of the Chromium browser.'\n          );\n          yargs.example(\n            '$0 install firefox',\n            'Install the latest available build of the Firefox browser.'\n          );\n          yargs.example(\n            '$0 install firefox --platform mac',\n            'Install the latest Mac (Intel) build of the Firefox browser.'\n          );\n          yargs.example(\n            '$0 install firefox --path /tmp/my-browser-cache',\n            'Install to the specified cache directory.'\n          );\n        },\n        async argv => {\n          const args = argv as unknown as InstallArgs;\n          args.platform ??= detectBrowserPlatform();\n          if (!args.platform) {\n            throw new Error(`Could not resolve the current platform`);\n          }\n          args.browser.buildId = await resolveBuildId(\n            args.browser.name,\n            args.platform,\n            args.browser.buildId\n          );\n          await install({\n            browser: args.browser.name,\n            buildId: args.browser.buildId,\n            platform: args.platform,\n            cacheDir: args.path ?? this.#cachePath,\n            downloadProgressCallback: makeProgressCallback(\n              args.browser.name,\n              args.browser.buildId\n            ),\n            baseUrl: args.baseUrl,\n          });\n          console.log(\n            `${args.browser.name}@${\n              args.browser.buildId\n            } ${computeExecutablePath({\n              browser: args.browser.name,\n              buildId: args.browser.buildId,\n              cacheDir: args.path ?? this.#cachePath,\n              platform: args.platform,\n            })}`\n          );\n        }\n      )\n      .command(\n        'launch <browser>',\n        'Launch the specified browser',\n        yargs => {\n          this.#defineBrowserParameter(yargs);\n          this.#definePlatformParameter(yargs);\n          this.#definePathParameter(yargs);\n          yargs.option('detached', {\n            type: 'boolean',\n            desc: 'Detach the child process.',\n            default: false,\n          });\n          yargs.option('system', {\n            type: 'boolean',\n            desc: 'Search for a browser installed on the system instead of the cache folder.',\n            default: false,\n          });\n          yargs.example(\n            '$0 launch chrome@115.0.5790.170',\n            'Launch Chrome 115.0.5790.170'\n          );\n          yargs.example(\n            '$0 launch firefox@112.0a1',\n            'Launch the Firefox browser identified by the milestone 112.0a1.'\n          );\n          yargs.example(\n            '$0 launch chrome@115.0.5790.170 --detached',\n            'Launch the browser but detach the sub-processes.'\n          );\n          yargs.example(\n            '$0 launch chrome@canary --system',\n            'Try to locate the Canary build of Chrome installed on the system and launch it.'\n          );\n        },\n        async argv => {\n          const args = argv as unknown as LaunchArgs;\n          const executablePath = args.system\n            ? computeSystemExecutablePath({\n                browser: args.browser.name,\n                // TODO: throw an error if not a ChromeReleaseChannel is provided.\n                channel: args.browser.buildId as ChromeReleaseChannel,\n                platform: args.platform,\n              })\n            : computeExecutablePath({\n                browser: args.browser.name,\n                buildId: args.browser.buildId,\n                cacheDir: args.path ?? this.#cachePath,\n                platform: args.platform,\n              });\n          launch({\n            executablePath,\n            detached: args.detached,\n          });\n        }\n      )\n      .command(\n        'clear',\n        'Removes all installed browsers from the specified cache directory',\n        yargs => {\n          this.#definePathParameter(yargs, true);\n        },\n        async argv => {\n          const args = argv as unknown as ClearArgs;\n          const cacheDir = args.path ?? this.#cachePath;\n          const rl = this.#rl ?? readline.createInterface({input, output});\n          rl.question(\n            `Do you want to permanently and recursively delete the content of ${cacheDir} (yes/No)? `,\n            answer => {\n              rl.close();\n              if (!['y', 'yes'].includes(answer.toLowerCase().trim())) {\n                console.log('Cancelled.');\n                return;\n              }\n              const cache = new Cache(cacheDir);\n              cache.clear();\n              console.log(`${cacheDir} cleared.`);\n            }\n          );\n        }\n      )\n      .demandCommand(1)\n      .help()\n      .wrap(Math.min(120, yargsInstance.terminalWidth()))\n      .parse();\n  }\n\n  #parseBrowser(version: string): Browser {\n    return version.split('@').shift() as Browser;\n  }\n\n  #parseBuildId(version: string): string {\n    const parts = version.split('@');\n    return parts.length === 2 ? parts[1]! : 'latest';\n  }\n}\n\n/**\n * @public\n */\nexport function makeProgressCallback(\n  browser: Browser,\n  buildId: string\n): (downloadedBytes: number, totalBytes: number) => void {\n  let progressBar: ProgressBar;\n  let lastDownloadedBytes = 0;\n  return (downloadedBytes: number, totalBytes: number) => {\n    if (!progressBar) {\n      progressBar = new ProgressBar(\n        `Downloading ${browser} r${buildId} - ${toMegabytes(\n          totalBytes\n        )} [:bar] :percent :etas `,\n        {\n          complete: '=',\n          incomplete: ' ',\n          width: 20,\n          total: totalBytes,\n        }\n      );\n    }\n    const delta = downloadedBytes - lastDownloadedBytes;\n    lastDownloadedBytes = downloadedBytes;\n    progressBar.tick(delta);\n  };\n}\n\nfunction toMegabytes(bytes: number) {\n  const mb = bytes / 1000 / 1000;\n  return `${Math.round(mb * 10) / 10} MB`;\n}\n"]},"metadata":{},"sourceType":"module"}