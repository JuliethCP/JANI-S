{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ModuleMemory = void 0;\nconst lifetime_1 = require(\"./lifetime\");\n/**\n * @private\n */\nclass ModuleMemory {\n  constructor(module) {\n    this.module = module;\n  }\n  toPointerArray(handleArray) {\n    const typedArray = new Int32Array(handleArray.map(handle => handle.value));\n    const numBytes = typedArray.length * typedArray.BYTES_PER_ELEMENT;\n    const ptr = this.module._malloc(numBytes);\n    var heapBytes = new Uint8Array(this.module.HEAPU8.buffer, ptr, numBytes);\n    heapBytes.set(new Uint8Array(typedArray.buffer));\n    return new lifetime_1.Lifetime(ptr, undefined, ptr => this.module._free(ptr));\n  }\n  newMutablePointerArray(length) {\n    const zeros = new Int32Array(new Array(length).fill(0));\n    const numBytes = zeros.length * zeros.BYTES_PER_ELEMENT;\n    const ptr = this.module._malloc(numBytes);\n    const typedArray = new Int32Array(this.module.HEAPU8.buffer, ptr, length);\n    typedArray.set(zeros);\n    return new lifetime_1.Lifetime({\n      typedArray,\n      ptr\n    }, undefined, value => this.module._free(value.ptr));\n  }\n  newHeapCharPointer(string) {\n    const numBytes = this.module.lengthBytesUTF8(string) + 1;\n    const ptr = this.module._malloc(numBytes);\n    this.module.stringToUTF8(string, ptr, numBytes);\n    return new lifetime_1.Lifetime(ptr, undefined, value => this.module._free(value));\n  }\n  consumeHeapCharPointer(ptr) {\n    const str = this.module.UTF8ToString(ptr);\n    this.module._free(ptr);\n    return str;\n  }\n}\nexports.ModuleMemory = ModuleMemory;","map":{"version":3,"mappings":";;;;;;AAOA;AAGA;;;AAGA,MAAaA,YAAY;EACvBC,YAAmBC,MAAoB;IAApB,WAAM,GAANA,MAAM;EAAiB;EAE1CC,cAAc,CAACC,WAA4B;IACzC,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAACF,WAAW,CAACG,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,KAAK,CAAC,CAAC;IAC5E,MAAMC,QAAQ,GAAGL,UAAU,CAACM,MAAM,GAAGN,UAAU,CAACO,iBAAiB;IACjE,MAAMC,GAAG,GAAG,IAAI,CAACX,MAAM,CAACY,OAAO,CAACJ,QAAQ,CAA+B;IACvE,IAAIK,SAAS,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACd,MAAM,CAACe,MAAM,CAACC,MAAM,EAAEL,GAAG,EAAEH,QAAQ,CAAC;IACxEK,SAAS,CAACI,GAAG,CAAC,IAAIH,UAAU,CAACX,UAAU,CAACa,MAAM,CAAC,CAAC;IAChD,OAAO,IAAIE,mBAAQ,CAACP,GAAG,EAAEQ,SAAS,EAAGR,GAAG,IAAK,IAAI,CAACX,MAAM,CAACoB,KAAK,CAACT,GAAG,CAAC,CAAC;EACtE;EAEAU,sBAAsB,CACpBZ,MAAc;IAEd,MAAMa,KAAK,GAAG,IAAIlB,UAAU,CAAC,IAAImB,KAAK,CAACd,MAAM,CAAC,CAACe,IAAI,CAAC,CAAC,CAAC,CAAC;IACvD,MAAMhB,QAAQ,GAAGc,KAAK,CAACb,MAAM,GAAGa,KAAK,CAACZ,iBAAiB;IACvD,MAAMC,GAAG,GAAG,IAAI,CAACX,MAAM,CAACY,OAAO,CAACJ,QAAQ,CAAM;IAC9C,MAAML,UAAU,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACJ,MAAM,CAACe,MAAM,CAACC,MAAM,EAAEL,GAAG,EAAEF,MAAM,CAAC;IACzEN,UAAU,CAACc,GAAG,CAACK,KAAK,CAAC;IACrB,OAAO,IAAIJ,mBAAQ,CAAC;MAAEf,UAAU;MAAEQ;IAAG,CAAE,EAAEQ,SAAS,EAAGZ,KAAK,IAAK,IAAI,CAACP,MAAM,CAACoB,KAAK,CAACb,KAAK,CAACI,GAAG,CAAC,CAAC;EAC9F;EAEAc,kBAAkB,CAACC,MAAc;IAC/B,MAAMlB,QAAQ,GAAG,IAAI,CAACR,MAAM,CAAC2B,eAAe,CAACD,MAAM,CAAC,GAAG,CAAC;IACxD,MAAMf,GAAG,GAAyB,IAAI,CAACX,MAAM,CAACY,OAAO,CAACJ,QAAQ,CAAyB;IACvF,IAAI,CAACR,MAAM,CAAC4B,YAAY,CAACF,MAAM,EAAEf,GAAG,EAAEH,QAAQ,CAAC;IAC/C,OAAO,IAAIU,mBAAQ,CAACP,GAAG,EAAEQ,SAAS,EAAGZ,KAAK,IAAK,IAAI,CAACP,MAAM,CAACoB,KAAK,CAACb,KAAK,CAAC,CAAC;EAC1E;EAEAsB,sBAAsB,CAAClB,GAAyB;IAC9C,MAAMmB,GAAG,GAAG,IAAI,CAAC9B,MAAM,CAAC+B,YAAY,CAACpB,GAAG,CAAC;IACzC,IAAI,CAACX,MAAM,CAACoB,KAAK,CAACT,GAAG,CAAC;IACtB,OAAOmB,GAAG;EACZ;;AAlCFE","names":["ModuleMemory","constructor","module","toPointerArray","handleArray","typedArray","Int32Array","map","handle","value","numBytes","length","BYTES_PER_ELEMENT","ptr","_malloc","heapBytes","Uint8Array","HEAPU8","buffer","set","lifetime_1","undefined","_free","newMutablePointerArray","zeros","Array","fill","newHeapCharPointer","string","lengthBytesUTF8","stringToUTF8","consumeHeapCharPointer","str","UTF8ToString","exports"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\@tootallnate\\quickjs-emscripten\\ts\\memory.ts"],"sourcesContent":["import { EitherModule } from \"./emscripten-types\"\nimport {\n  OwnedHeapCharPointer,\n  JSContextPointerPointer,\n  JSValueConstPointerPointer,\n  JSValuePointerPointer,\n} from \"./types-ffi\"\nimport { Lifetime } from \"./lifetime\"\nimport { EitherFFI, QuickJSHandle } from \"./types\"\n\n/**\n * @private\n */\nexport class ModuleMemory {\n  constructor(public module: EitherModule) {}\n\n  toPointerArray(handleArray: QuickJSHandle[]): Lifetime<JSValueConstPointerPointer> {\n    const typedArray = new Int32Array(handleArray.map((handle) => handle.value))\n    const numBytes = typedArray.length * typedArray.BYTES_PER_ELEMENT\n    const ptr = this.module._malloc(numBytes) as JSValueConstPointerPointer\n    var heapBytes = new Uint8Array(this.module.HEAPU8.buffer, ptr, numBytes)\n    heapBytes.set(new Uint8Array(typedArray.buffer))\n    return new Lifetime(ptr, undefined, (ptr) => this.module._free(ptr))\n  }\n\n  newMutablePointerArray<T extends JSContextPointerPointer | JSValuePointerPointer>(\n    length: number\n  ): Lifetime<{ typedArray: Int32Array; ptr: T }> {\n    const zeros = new Int32Array(new Array(length).fill(0))\n    const numBytes = zeros.length * zeros.BYTES_PER_ELEMENT\n    const ptr = this.module._malloc(numBytes) as T\n    const typedArray = new Int32Array(this.module.HEAPU8.buffer, ptr, length)\n    typedArray.set(zeros)\n    return new Lifetime({ typedArray, ptr }, undefined, (value) => this.module._free(value.ptr))\n  }\n\n  newHeapCharPointer(string: string): Lifetime<OwnedHeapCharPointer> {\n    const numBytes = this.module.lengthBytesUTF8(string) + 1\n    const ptr: OwnedHeapCharPointer = this.module._malloc(numBytes) as OwnedHeapCharPointer\n    this.module.stringToUTF8(string, ptr, numBytes)\n    return new Lifetime(ptr, undefined, (value) => this.module._free(value))\n  }\n\n  consumeHeapCharPointer(ptr: OwnedHeapCharPointer): string {\n    const str = this.module.UTF8ToString(ptr)\n    this.module._free(ptr)\n    return str\n  }\n}\n"]},"metadata":{},"sourceType":"script"}