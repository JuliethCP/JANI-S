{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On macOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n *\n * ```ts\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n *\n * ```ts\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nexport class Keyboard {\n  /**\n   * @internal\n   */\n  constructor() {}\n}\n/**\n * Enum of valid mouse buttons.\n *\n * @public\n */\nexport const MouseButton = Object.freeze({\n  Left: 'left',\n  Right: 'right',\n  Middle: 'middle',\n  Back: 'back',\n  Forward: 'forward'\n});\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n *\n * ```ts\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n *\n * ```ts\n * await page.evaluate(\n *   (from, to) => {\n *     const selection = from.getRootNode().getSelection();\n *     const range = document.createRange();\n *     range.setStartBefore(from);\n *     range.setEndAfter(to);\n *     selection.removeAllRanges();\n *     selection.addRange(range);\n *   },\n *   fromJSHandle,\n *   toJSHandle\n * );\n * ```\n *\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n *\n * ```ts\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n *\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n *\n * ```ts\n * await browser\n *   .defaultBrowserContext()\n *   .overridePermissions('<your origin>', [\n *     'clipboard-read',\n *     'clipboard-write',\n *   ]);\n * ```\n *\n * @public\n */\nexport class Mouse {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Resets the mouse to the default state: No buttons pressed; position at\n   * (0,0).\n   */\n  async reset() {\n    throw new Error('Not implemented');\n  }\n  async move() {\n    throw new Error('Not implemented');\n  }\n  async down() {\n    throw new Error('Not implemented');\n  }\n  async up() {\n    throw new Error('Not implemented');\n  }\n  async click() {\n    throw new Error('Not implemented');\n  }\n  async wheel() {\n    throw new Error('Not implemented');\n  }\n  async drag() {\n    throw new Error('Not implemented');\n  }\n  async dragEnter() {\n    throw new Error('Not implemented');\n  }\n  async dragOver() {\n    throw new Error('Not implemented');\n  }\n  async drop() {\n    throw new Error('Not implemented');\n  }\n  async dragAndDrop() {\n    throw new Error('Not implemented');\n  }\n}\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nexport class Touchscreen {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Dispatches a `touchstart` and `touchend` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  async tap(x, y) {\n    await this.touchStart(x, y);\n    await this.touchEnd();\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,OAAM,MAAgBA,QAAQ;EAC5B;;;EAGAC,eAAe;;AA+KjB;;;;;AAKA,OAAO,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC;EACvCC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE;CACV,CAAsD;AAOvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA,OAAM,MAAOC,KAAK;EAChB;;;EAGAT,eAAe;EAEf;;;;EAIA,MAAMU,KAAK;IACT,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAcA,MAAMC,IAAI;IACR,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAQA,MAAME,IAAI;IACR,MAAM,IAAIF,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAQA,MAAMG,EAAE;IACN,MAAM,IAAIH,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAcA,MAAMI,KAAK;IACT,MAAM,IAAIJ,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAyBA,MAAMK,KAAK;IACT,MAAM,IAAIL,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAQA,MAAMM,IAAI;IACR,MAAM,IAAIN,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAQA,MAAMO,SAAS;IACb,MAAM,IAAIP,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAQA,MAAMQ,QAAQ;IACZ,MAAM,IAAIR,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAQA,MAAMS,IAAI;IACR,MAAM,IAAIT,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAeA,MAAMU,WAAW;IACf,MAAM,IAAIV,KAAK,CAAC,iBAAiB,CAAC;EACpC;;AAGF;;;;AAIA,OAAM,MAAgBW,WAAW;EAC/B;;;EAGAtB,eAAe;EAEf;;;;;EAKA,MAAMuB,GAAG,CAACC,CAAS,EAAEC,CAAS;IAC5B,MAAM,IAAI,CAACC,UAAU,CAACF,CAAC,EAAEC,CAAC,CAAC;IAC3B,MAAM,IAAI,CAACE,QAAQ,EAAE;EACvB","names":["Keyboard","constructor","MouseButton","Object","freeze","Left","Right","Middle","Back","Forward","Mouse","reset","Error","move","down","up","click","wheel","drag","dragEnter","dragOver","drop","dragAndDrop","Touchscreen","tap","x","y","touchStart","touchEnd"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\api\\Input.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {KeyInput} from '../common/USKeyboardLayout.js';\n\nimport type {Point} from './ElementHandle.js';\n\n/**\n * @public\n */\nexport interface KeyDownOptions {\n  /**\n   * @deprecated Do not use. This is automatically handled.\n   */\n  text?: string;\n  /**\n   * @deprecated Do not use. This is automatically handled.\n   */\n  commands?: string[];\n}\n\n/**\n * @public\n */\nexport interface KeyboardTypeOptions {\n  delay?: number;\n}\n\n/**\n * @public\n */\nexport type KeyPressOptions = KeyDownOptions & KeyboardTypeOptions;\n\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On macOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n *\n * ```ts\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n *\n * ```ts\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nexport abstract class Keyboard {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Dispatches a `keydown` event.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n   * subsequent key presses will be sent with that modifier active.\n   * To release the modifier key, use {@link Keyboard.up}.\n   *\n   * After the key is pressed once, subsequent calls to\n   * {@link Keyboard.down} will have\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n   * set to true. To release the key, use {@link Keyboard.up}.\n   *\n   * Modifier keys DO influence {@link Keyboard.down}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts commands which, if specified,\n   * is the commands of keyboard shortcuts,\n   * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n   */\n  abstract down(\n    key: KeyInput,\n    options?: Readonly<KeyDownOptions>\n  ): Promise<void>;\n\n  /**\n   * Dispatches a `keyup` event.\n   *\n   * @param key - Name of key to release, such as `ArrowLeft`.\n   * See {@link KeyInput | KeyInput}\n   * for a list of all key names.\n   */\n  abstract up(key: KeyInput): Promise<void>;\n\n  /**\n   * Dispatches a `keypress` and `input` event.\n   * This does not send a `keydown` or `keyup` event.\n   *\n   * @remarks\n   * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   *\n   * ```ts\n   * page.keyboard.sendCharacter('嗨');\n   * ```\n   *\n   * @param char - Character to send into the page.\n   */\n  abstract sendCharacter(char: string): Promise<void>;\n\n  /**\n   * Sends a `keydown`, `keypress`/`input`,\n   * and `keyup` event for each character in the text.\n   *\n   * @remarks\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link Keyboard.press}.\n   *\n   * Modifier keys DO NOT effect `keyboard.type`.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   *\n   * ```ts\n   * await page.keyboard.type('Hello'); // Types instantly\n   * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @param text - A text to type into a focused element.\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n  abstract type(\n    text: string,\n    options?: Readonly<KeyboardTypeOptions>\n  ): Promise<void>;\n\n  /**\n   * Shortcut for {@link Keyboard.down}\n   * and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * Modifier keys DO effect {@link Keyboard.press}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0. Accepts commands which, if specified,\n   * is the commands of keyboard shortcuts,\n   * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n   */\n  abstract press(\n    key: KeyInput,\n    options?: Readonly<KeyPressOptions>\n  ): Promise<void>;\n}\n\n/**\n * @public\n */\nexport interface MouseOptions {\n  /**\n   * Determines which button will be pressed.\n   *\n   * @defaultValue `'left'`\n   */\n  button?: MouseButton;\n  /**\n   * @deprecated Use {@link MouseClickOptions.count}.\n   *\n   * Determines the click count for the mouse event. This does not perform\n   * multiple clicks.\n   *\n   * @defaultValue `1`\n   */\n  clickCount?: number;\n}\n\n/**\n * @public\n */\nexport interface MouseClickOptions extends MouseOptions {\n  /**\n   * Time (in ms) to delay the mouse release after the mouse press.\n   */\n  delay?: number;\n  /**\n   * Number of clicks to perform.\n   *\n   * @defaultValue `1`\n   */\n  count?: number;\n}\n\n/**\n * @public\n */\nexport interface MouseWheelOptions {\n  deltaX?: number;\n  deltaY?: number;\n}\n\n/**\n * @public\n */\nexport interface MouseMoveOptions {\n  /**\n   * Determines the number of movements to make from the current mouse position\n   * to the new one.\n   *\n   * @defaultValue `1`\n   */\n  steps?: number;\n}\n\n/**\n * Enum of valid mouse buttons.\n *\n * @public\n */\nexport const MouseButton = Object.freeze({\n  Left: 'left',\n  Right: 'right',\n  Middle: 'middle',\n  Back: 'back',\n  Forward: 'forward',\n}) satisfies Record<string, Protocol.Input.MouseButton>;\n\n/**\n * @public\n */\nexport type MouseButton = (typeof MouseButton)[keyof typeof MouseButton];\n\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n *\n * ```ts\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n *\n * ```ts\n * await page.evaluate(\n *   (from, to) => {\n *     const selection = from.getRootNode().getSelection();\n *     const range = document.createRange();\n *     range.setStartBefore(from);\n *     range.setEndAfter(to);\n *     selection.removeAllRanges();\n *     selection.addRange(range);\n *   },\n *   fromJSHandle,\n *   toJSHandle\n * );\n * ```\n *\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n *\n * ```ts\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n *\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n *\n * ```ts\n * await browser\n *   .defaultBrowserContext()\n *   .overridePermissions('<your origin>', [\n *     'clipboard-read',\n *     'clipboard-write',\n *   ]);\n * ```\n *\n * @public\n */\nexport class Mouse {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Resets the mouse to the default state: No buttons pressed; position at\n   * (0,0).\n   */\n  async reset(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Moves the mouse to the given coordinate.\n   *\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Options to configure behavior.\n   */\n  async move(\n    x: number,\n    y: number,\n    options?: Readonly<MouseMoveOptions>\n  ): Promise<void>;\n  async move(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Presses the mouse.\n   *\n   * @param options - Options to configure behavior.\n   */\n  async down(options?: Readonly<MouseOptions>): Promise<void>;\n  async down(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Releases the mouse.\n   *\n   * @param options - Options to configure behavior.\n   */\n  async up(options?: Readonly<MouseOptions>): Promise<void>;\n  async up(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n   *\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Options to configure behavior.\n   */\n  async click(\n    x: number,\n    y: number,\n    options?: Readonly<MouseClickOptions>\n  ): Promise<void>;\n  async click(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Dispatches a `mousewheel` event.\n   * @param options - Optional: `MouseWheelOptions`.\n   *\n   * @example\n   * An example of zooming into an element:\n   *\n   * ```ts\n   * await page.goto(\n   *   'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366'\n   * );\n   *\n   * const elem = await page.$('div');\n   * const boundingBox = await elem.boundingBox();\n   * await page.mouse.move(\n   *   boundingBox.x + boundingBox.width / 2,\n   *   boundingBox.y + boundingBox.height / 2\n   * );\n   *\n   * await page.mouse.wheel({deltaY: -100});\n   * ```\n   */\n  async wheel(options?: Readonly<MouseWheelOptions>): Promise<void>;\n  async wheel(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Dispatches a `drag` event.\n   * @param start - starting point for drag\n   * @param target - point to drag to\n   */\n  async drag(start: Point, target: Point): Promise<Protocol.Input.DragData>;\n  async drag(): Promise<Protocol.Input.DragData> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Dispatches a `dragenter` event.\n   * @param target - point for emitting `dragenter` event\n   * @param data - drag data containing items and operations mask\n   */\n  async dragEnter(target: Point, data: Protocol.Input.DragData): Promise<void>;\n  async dragEnter(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Dispatches a `dragover` event.\n   * @param target - point for emitting `dragover` event\n   * @param data - drag data containing items and operations mask\n   */\n  async dragOver(target: Point, data: Protocol.Input.DragData): Promise<void>;\n  async dragOver(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Performs a dragenter, dragover, and drop in sequence.\n   * @param target - point to drop on\n   * @param data - drag data containing items and operations mask\n   */\n  async drop(target: Point, data: Protocol.Input.DragData): Promise<void>;\n  async drop(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Performs a drag, dragenter, dragover, and drop in sequence.\n   * @param start - point to drag from\n   * @param target - point to drop on\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n   * Defaults to 0.\n   */\n  async dragAndDrop(\n    start: Point,\n    target: Point,\n    options?: {delay?: number}\n  ): Promise<void>;\n  async dragAndDrop(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n}\n\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nexport abstract class Touchscreen {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Dispatches a `touchstart` and `touchend` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  async tap(x: number, y: number): Promise<void> {\n    await this.touchStart(x, y);\n    await this.touchEnd();\n  }\n\n  /**\n   * Dispatches a `touchstart` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  abstract touchStart(x: number, y: number): Promise<void>;\n\n  /**\n   * Dispatches a `touchMove` event.\n   * @param x - Horizontal position of the move.\n   * @param y - Vertical position of the move.\n   *\n   * @remarks\n   *\n   * Not every `touchMove` call results in a `touchmove` event being emitted,\n   * depending on the browser's optimizations. For example, Chrome\n   * {@link https://developer.chrome.com/blog/a-more-compatible-smoother-touch/#chromes-new-model-the-throttled-async-touchmove-model | throttles}\n   * touch move events.\n   */\n  abstract touchMove(x: number, y: number): Promise<void>;\n\n  /**\n   * Dispatches a `touchend` event.\n   */\n  abstract touchEnd(): Promise<void>;\n}\n"]},"metadata":{},"sourceType":"module"}