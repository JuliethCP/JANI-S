{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformList = exports.parseLine = exports.testLine = void 0;\nconst FileInfo_1 = require(\"./FileInfo\");\n/**\n * This parser is based on the FTP client library source code in Apache Commons Net provided\n * under the Apache 2.0 license. It has been simplified and rewritten to better fit the Javascript language.\n *\n * https://github.com/apache/commons-net/blob/master/src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java\n */\nconst RE_LINE = new RegExp(\"(\\\\S+)\\\\s+(\\\\S+)\\\\s+\" // MM-dd-yy whitespace hh:mma|kk:mm swallow trailing spaces\n+ \"(?:(<DIR>)|([0-9]+))\\\\s+\" // <DIR> or ddddd swallow trailing spaces\n+ \"(\\\\S.*)\" // First non-space followed by rest of line (name)\n);\n/**\n * Returns true if a given line might be a DOS-style listing.\n *\n * - Example: `12-05-96  05:03PM       <DIR>          myDir`\n */\nfunction testLine(line) {\n  return /^\\d{2}/.test(line) && RE_LINE.test(line);\n}\nexports.testLine = testLine;\n/**\n * Parse a single line of a DOS-style directory listing.\n */\nfunction parseLine(line) {\n  const groups = line.match(RE_LINE);\n  if (groups === null) {\n    return undefined;\n  }\n  const name = groups[5];\n  if (name === \".\" || name === \"..\") {\n    // Ignore parent directory links\n    return undefined;\n  }\n  const file = new FileInfo_1.FileInfo(name);\n  const fileType = groups[3];\n  if (fileType === \"<DIR>\") {\n    file.type = FileInfo_1.FileType.Directory;\n    file.size = 0;\n  } else {\n    file.type = FileInfo_1.FileType.File;\n    file.size = parseInt(groups[4], 10);\n  }\n  file.rawModifiedAt = groups[1] + \" \" + groups[2];\n  return file;\n}\nexports.parseLine = parseLine;\nfunction transformList(files) {\n  return files;\n}\nexports.transformList = transformList;","map":{"version":3,"names":["Object","defineProperty","exports","value","transformList","parseLine","testLine","FileInfo_1","require","RE_LINE","RegExp","line","test","groups","match","undefined","name","file","FileInfo","fileType","type","FileType","Directory","size","File","parseInt","rawModifiedAt","files"],"sources":["D:/Julieth-Campos/PSO/node_modules/basic-ftp/dist/parseListDOS.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformList = exports.parseLine = exports.testLine = void 0;\nconst FileInfo_1 = require(\"./FileInfo\");\n/**\n * This parser is based on the FTP client library source code in Apache Commons Net provided\n * under the Apache 2.0 license. It has been simplified and rewritten to better fit the Javascript language.\n *\n * https://github.com/apache/commons-net/blob/master/src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java\n */\nconst RE_LINE = new RegExp(\"(\\\\S+)\\\\s+(\\\\S+)\\\\s+\" // MM-dd-yy whitespace hh:mma|kk:mm swallow trailing spaces\n    + \"(?:(<DIR>)|([0-9]+))\\\\s+\" // <DIR> or ddddd swallow trailing spaces\n    + \"(\\\\S.*)\" // First non-space followed by rest of line (name)\n);\n/**\n * Returns true if a given line might be a DOS-style listing.\n *\n * - Example: `12-05-96  05:03PM       <DIR>          myDir`\n */\nfunction testLine(line) {\n    return /^\\d{2}/.test(line) && RE_LINE.test(line);\n}\nexports.testLine = testLine;\n/**\n * Parse a single line of a DOS-style directory listing.\n */\nfunction parseLine(line) {\n    const groups = line.match(RE_LINE);\n    if (groups === null) {\n        return undefined;\n    }\n    const name = groups[5];\n    if (name === \".\" || name === \"..\") { // Ignore parent directory links\n        return undefined;\n    }\n    const file = new FileInfo_1.FileInfo(name);\n    const fileType = groups[3];\n    if (fileType === \"<DIR>\") {\n        file.type = FileInfo_1.FileType.Directory;\n        file.size = 0;\n    }\n    else {\n        file.type = FileInfo_1.FileType.File;\n        file.size = parseInt(groups[4], 10);\n    }\n    file.rawModifiedAt = groups[1] + \" \" + groups[2];\n    return file;\n}\nexports.parseLine = parseLine;\nfunction transformList(files) {\n    return files;\n}\nexports.transformList = transformList;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,SAAS,GAAGH,OAAO,CAACI,QAAQ,GAAG,KAAK,CAAC;AACrE,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAAC,sBAAsB,CAAC;AAAA,EAC5C,0BAA0B,CAAC;AAAA,EAC3B,SAAS,CAAC;AAAA,CACf;AACD;AACA;AACA;AACA;AACA;AACA,SAASJ,QAAQ,CAACK,IAAI,EAAE;EACpB,OAAO,QAAQ,CAACC,IAAI,CAACD,IAAI,CAAC,IAAIF,OAAO,CAACG,IAAI,CAACD,IAAI,CAAC;AACpD;AACAT,OAAO,CAACI,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA,SAASD,SAAS,CAACM,IAAI,EAAE;EACrB,MAAME,MAAM,GAAGF,IAAI,CAACG,KAAK,CAACL,OAAO,CAAC;EAClC,IAAII,MAAM,KAAK,IAAI,EAAE;IACjB,OAAOE,SAAS;EACpB;EACA,MAAMC,IAAI,GAAGH,MAAM,CAAC,CAAC,CAAC;EACtB,IAAIG,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,IAAI,EAAE;IAAE;IACjC,OAAOD,SAAS;EACpB;EACA,MAAME,IAAI,GAAG,IAAIV,UAAU,CAACW,QAAQ,CAACF,IAAI,CAAC;EAC1C,MAAMG,QAAQ,GAAGN,MAAM,CAAC,CAAC,CAAC;EAC1B,IAAIM,QAAQ,KAAK,OAAO,EAAE;IACtBF,IAAI,CAACG,IAAI,GAAGb,UAAU,CAACc,QAAQ,CAACC,SAAS;IACzCL,IAAI,CAACM,IAAI,GAAG,CAAC;EACjB,CAAC,MACI;IACDN,IAAI,CAACG,IAAI,GAAGb,UAAU,CAACc,QAAQ,CAACG,IAAI;IACpCP,IAAI,CAACM,IAAI,GAAGE,QAAQ,CAACZ,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EACvC;EACAI,IAAI,CAACS,aAAa,GAAGb,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,MAAM,CAAC,CAAC,CAAC;EAChD,OAAOI,IAAI;AACf;AACAf,OAAO,CAACG,SAAS,GAAGA,SAAS;AAC7B,SAASD,aAAa,CAACuB,KAAK,EAAE;EAC1B,OAAOA,KAAK;AAChB;AACAzB,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script"}