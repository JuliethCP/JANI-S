{"ast":null,"code":"import { Deferred } from './Deferred.js';\nimport { disposeSymbol } from './disposable.js';\n/**\n * @internal\n */\nexport class Mutex {\n  static Guard = class Guard {\n    #mutex;\n    constructor(mutex) {\n      this.#mutex = mutex;\n    }\n    [disposeSymbol]() {\n      return this.#mutex.release();\n    }\n  };\n  #locked = false;\n  #acquirers = [];\n  // This is FIFO.\n  async acquire() {\n    if (!this.#locked) {\n      this.#locked = true;\n      return new Mutex.Guard(this);\n    }\n    const deferred = Deferred.create();\n    this.#acquirers.push(deferred.resolve.bind(deferred));\n    await deferred.valueOrThrow();\n    return new Mutex.Guard(this);\n  }\n  release() {\n    const resolve = this.#acquirers.shift();\n    if (!resolve) {\n      this.#locked = false;\n      return;\n    }\n    resolve();\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAQA,QAAQ,QAAO,eAAe;AACtC,SAAQC,aAAa,QAAO,iBAAiB;AAE7C;;;AAGA,OAAM,MAAOC,KAAK;EAChB,OAAOC,KAAK,GAAG,MAAMA,KAAK;IACxB,MAAM;IACNC,YAAYC,KAAY;MACtB,IAAI,CAAC,MAAM,GAAGA,KAAK;IACrB;IACA,CAACJ,aAAa,IAAC;MACb,OAAO,IAAI,CAAC,MAAM,CAACK,OAAO,EAAE;IAC9B;GACD;EAED,OAAO,GAAG,KAAK;EACf,UAAU,GAAsB,EAAE;EAElC;EACA,MAAMC,OAAO;IACX,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;MACjB,IAAI,CAAC,OAAO,GAAG,IAAI;MACnB,OAAO,IAAIL,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC;;IAE9B,MAAMK,QAAQ,GAAGR,QAAQ,CAACS,MAAM,EAAQ;IACxC,IAAI,CAAC,UAAU,CAACC,IAAI,CAACF,QAAQ,CAACG,OAAO,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAAC;IACrD,MAAMA,QAAQ,CAACK,YAAY,EAAE;IAC7B,OAAO,IAAIX,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC;EAC9B;EAEAG,OAAO;IACL,MAAMK,OAAO,GAAG,IAAI,CAAC,UAAU,CAACG,KAAK,EAAE;IACvC,IAAI,CAACH,OAAO,EAAE;MACZ,IAAI,CAAC,OAAO,GAAG,KAAK;MACpB;;IAEFA,OAAO,EAAE;EACX","names":["Deferred","disposeSymbol","Mutex","Guard","constructor","mutex","release","acquire","deferred","create","push","resolve","bind","valueOrThrow","shift"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\util\\Mutex.ts"],"sourcesContent":["import {Deferred} from './Deferred.js';\nimport {disposeSymbol} from './disposable.js';\n\n/**\n * @internal\n */\nexport class Mutex {\n  static Guard = class Guard {\n    #mutex: Mutex;\n    constructor(mutex: Mutex) {\n      this.#mutex = mutex;\n    }\n    [disposeSymbol](): void {\n      return this.#mutex.release();\n    }\n  };\n\n  #locked = false;\n  #acquirers: Array<() => void> = [];\n\n  // This is FIFO.\n  async acquire(): Promise<InstanceType<typeof Mutex.Guard>> {\n    if (!this.#locked) {\n      this.#locked = true;\n      return new Mutex.Guard(this);\n    }\n    const deferred = Deferred.create<void>();\n    this.#acquirers.push(deferred.resolve.bind(deferred));\n    await deferred.valueOrThrow();\n    return new Mutex.Guard(this);\n  }\n\n  release(): void {\n    const resolve = this.#acquirers.shift();\n    if (!resolve) {\n      this.#locked = false;\n      return;\n    }\n    resolve();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}