{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CDPSession, CDPSessionEvent } from '../api/CDPSession.js';\nimport { CallbackRegistry } from '../common/CallbackRegistry.js';\nimport { TargetCloseError } from '../common/Errors.js';\nimport { assert } from '../util/assert.js';\nimport { createProtocolErrorMessage } from '../util/ErrorLike.js';\n/**\n * @internal\n */\nexport class CdpCDPSession extends CDPSession {\n  #sessionId;\n  #targetType;\n  #callbacks = new CallbackRegistry();\n  #connection;\n  #parentSessionId;\n  #target;\n  /**\n   * @internal\n   */\n  constructor(connection, targetType, sessionId, parentSessionId) {\n    super();\n    this.#connection = connection;\n    this.#targetType = targetType;\n    this.#sessionId = sessionId;\n    this.#parentSessionId = parentSessionId;\n  }\n  /**\n   * Sets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  _setTarget(target) {\n    this.#target = target;\n  }\n  /**\n   * Gets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  _target() {\n    assert(this.#target, 'Target must exist');\n    return this.#target;\n  }\n  connection() {\n    return this.#connection;\n  }\n  parentSession() {\n    if (!this.#parentSessionId) {\n      // To make it work in Firefox that does not have parent (tab) sessions.\n      return this;\n    }\n    const parent = this.#connection?.session(this.#parentSessionId);\n    return parent ?? undefined;\n  }\n  send(method) {\n    if (!this.#connection) {\n      return Promise.reject(new TargetCloseError(`Protocol error (${method}): Session closed. Most likely the ${this.#targetType} has been closed.`));\n    }\n    // See the comment in Connection#send explaining why we do this.\n    const params = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : undefined;\n    return this.#connection._rawSend(this.#callbacks, method, params, this.#sessionId);\n  }\n  /**\n   * @internal\n   */\n  _onMessage(object) {\n    if (object.id) {\n      if (object.error) {\n        this.#callbacks.reject(object.id, createProtocolErrorMessage(object), object.error.message);\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      assert(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n  async detach() {\n    if (!this.#connection) {\n      throw new Error(`Session already detached. Most likely the ${this.#targetType} has been closed.`);\n    }\n    await this.#connection.send('Target.detachFromTarget', {\n      sessionId: this.#sessionId\n    });\n  }\n  /**\n   * @internal\n   */\n  _onClosed() {\n    this.#callbacks.clear();\n    this.#connection = undefined;\n    this.emit(CDPSessionEvent.Disconnected, undefined);\n  }\n  /**\n   * Returns the session's id.\n   */\n  id() {\n    return this.#sessionId;\n  }\n}","map":{"version":3,"mappings":"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","names":["CDPSession","CDPSessionEvent","CallbackRegistry","TargetCloseError","assert","createProtocolErrorMessage","CdpCDPSession","constructor","connection","targetType","sessionId","parentSessionId","_setTarget","target","_target","parentSession","parent","session","undefined","send","method","Promise","reject","params","_rawSend","_onMessage","object","id","error","message","resolve","result","emit","detach","Error","_onClosed","clear","Disconnected"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\CDPSession.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {ProtocolMapping} from 'devtools-protocol/types/protocol-mapping.js';\n\nimport {\n  type CDPEvents,\n  CDPSession,\n  CDPSessionEvent,\n} from '../api/CDPSession.js';\nimport {CallbackRegistry} from '../common/CallbackRegistry.js';\nimport {TargetCloseError} from '../common/Errors.js';\nimport {assert} from '../util/assert.js';\nimport {createProtocolErrorMessage} from '../util/ErrorLike.js';\n\nimport type {Connection} from './Connection.js';\nimport type {CdpTarget} from './Target.js';\n\n/**\n * @internal\n */\n\nexport class CdpCDPSession extends CDPSession {\n  #sessionId: string;\n  #targetType: string;\n  #callbacks = new CallbackRegistry();\n  #connection?: Connection;\n  #parentSessionId?: string;\n  #target?: CdpTarget;\n\n  /**\n   * @internal\n   */\n  constructor(\n    connection: Connection,\n    targetType: string,\n    sessionId: string,\n    parentSessionId: string | undefined\n  ) {\n    super();\n    this.#connection = connection;\n    this.#targetType = targetType;\n    this.#sessionId = sessionId;\n    this.#parentSessionId = parentSessionId;\n  }\n\n  /**\n   * Sets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  _setTarget(target: CdpTarget): void {\n    this.#target = target;\n  }\n\n  /**\n   * Gets the {@link CdpTarget} associated with the session instance.\n   *\n   * @internal\n   */\n  _target(): CdpTarget {\n    assert(this.#target, 'Target must exist');\n    return this.#target;\n  }\n\n  override connection(): Connection | undefined {\n    return this.#connection;\n  }\n\n  override parentSession(): CDPSession | undefined {\n    if (!this.#parentSessionId) {\n      // To make it work in Firefox that does not have parent (tab) sessions.\n      return this;\n    }\n    const parent = this.#connection?.session(this.#parentSessionId);\n    return parent ?? undefined;\n  }\n\n  override send<T extends keyof ProtocolMapping.Commands>(\n    method: T,\n    ...paramArgs: ProtocolMapping.Commands[T]['paramsType']\n  ): Promise<ProtocolMapping.Commands[T]['returnType']> {\n    if (!this.#connection) {\n      return Promise.reject(\n        new TargetCloseError(\n          `Protocol error (${method}): Session closed. Most likely the ${\n            this.#targetType\n          } has been closed.`\n        )\n      );\n    }\n    // See the comment in Connection#send explaining why we do this.\n    const params = paramArgs.length ? paramArgs[0] : undefined;\n    return this.#connection._rawSend(\n      this.#callbacks,\n      method,\n      params,\n      this.#sessionId\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _onMessage(object: {\n    id?: number;\n    method: keyof CDPEvents;\n    params: CDPEvents[keyof CDPEvents];\n    error: {message: string; data: any; code: number};\n    result?: any;\n  }): void {\n    if (object.id) {\n      if (object.error) {\n        this.#callbacks.reject(\n          object.id,\n          createProtocolErrorMessage(object),\n          object.error.message\n        );\n      } else {\n        this.#callbacks.resolve(object.id, object.result);\n      }\n    } else {\n      assert(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n  override async detach(): Promise<void> {\n    if (!this.#connection) {\n      throw new Error(\n        `Session already detached. Most likely the ${\n          this.#targetType\n        } has been closed.`\n      );\n    }\n    await this.#connection.send('Target.detachFromTarget', {\n      sessionId: this.#sessionId,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _onClosed(): void {\n    this.#callbacks.clear();\n    this.#connection = undefined;\n    this.emit(CDPSessionEvent.Disconnected, undefined);\n  }\n\n  /**\n   * Returns the session's id.\n   */\n  override id(): string {\n    return this.#sessionId;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}