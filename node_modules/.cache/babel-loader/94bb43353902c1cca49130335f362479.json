{"ast":null,"code":"var through = require('through');\nvar bz2 = require('./lib/bzip2');\nvar bitIterator = require('./lib/bit_iterator');\nmodule.exports = unbzip2Stream;\nfunction unbzip2Stream() {\n  var bufferQueue = [];\n  var hasBytes = 0;\n  var blockSize = 0;\n  var broken = false;\n  var done = false;\n  var bitReader = null;\n  var streamCRC = null;\n  function decompressBlock(push) {\n    if (!blockSize) {\n      blockSize = bz2.header(bitReader);\n      //console.error(\"got header of\", blockSize);\n      streamCRC = 0;\n      return true;\n    } else {\n      var bufsize = 100000 * blockSize;\n      var buf = new Int32Array(bufsize);\n      var chunk = [];\n      var f = function (b) {\n        chunk.push(b);\n      };\n      streamCRC = bz2.decompress(bitReader, f, buf, bufsize, streamCRC);\n      if (streamCRC === null) {\n        // reset for next bzip2 header\n        blockSize = 0;\n        return false;\n      } else {\n        //console.error('decompressed', chunk.length,'bytes');\n        push(Buffer.from(chunk));\n        return true;\n      }\n    }\n  }\n  var outlength = 0;\n  function decompressAndQueue(stream) {\n    if (broken) return;\n    try {\n      return decompressBlock(function (d) {\n        stream.queue(d);\n        if (d !== null) {\n          //console.error('write at', outlength.toString(16));\n          outlength += d.length;\n        } else {\n          //console.error('written EOS');\n        }\n      });\n    } catch (e) {\n      //console.error(e);\n      stream.emit('error', e);\n      broken = true;\n      return false;\n    }\n  }\n  return through(function write(data) {\n    //console.error('received', data.length,'bytes in', typeof data);\n    bufferQueue.push(data);\n    hasBytes += data.length;\n    if (bitReader === null) {\n      bitReader = bitIterator(function () {\n        return bufferQueue.shift();\n      });\n    }\n    while (!broken && hasBytes - bitReader.bytesRead + 1 >= (25000 + 100000 * blockSize || 4)) {\n      //console.error('decompressing with', hasBytes - bitReader.bytesRead + 1, 'bytes in buffer');\n      decompressAndQueue(this);\n    }\n  }, function end(x) {\n    //console.error(x,'last compressing with', hasBytes, 'bytes in buffer');\n    while (!broken && bitReader && hasBytes > bitReader.bytesRead) {\n      decompressAndQueue(this);\n    }\n    if (!broken) {\n      if (streamCRC !== null) this.emit('error', new Error(\"input stream ended prematurely\"));\n      this.queue(null);\n    }\n  });\n}","map":{"version":3,"names":["through","require","bz2","bitIterator","module","exports","unbzip2Stream","bufferQueue","hasBytes","blockSize","broken","done","bitReader","streamCRC","decompressBlock","push","header","bufsize","buf","Int32Array","chunk","f","b","decompress","Buffer","from","outlength","decompressAndQueue","stream","d","queue","length","e","emit","write","data","shift","bytesRead","end","x","Error"],"sources":["D:/Julieth-Campos/PSO/node_modules/unbzip2-stream/index.js"],"sourcesContent":["var through = require('through');\nvar bz2 = require('./lib/bzip2');\nvar bitIterator = require('./lib/bit_iterator');\n\nmodule.exports = unbzip2Stream;\n\nfunction unbzip2Stream() {\n    var bufferQueue = [];\n    var hasBytes = 0;\n    var blockSize = 0;\n    var broken = false;\n    var done = false;\n    var bitReader = null;\n    var streamCRC = null;\n\n    function decompressBlock(push){\n        if(!blockSize){\n            blockSize = bz2.header(bitReader);\n            //console.error(\"got header of\", blockSize);\n            streamCRC = 0;\n            return true;\n        }else{\n            var bufsize = 100000 * blockSize;\n            var buf = new Int32Array(bufsize);\n            \n            var chunk = [];\n            var f = function(b) {\n                chunk.push(b);\n            };\n\n            streamCRC = bz2.decompress(bitReader, f, buf, bufsize, streamCRC);\n            if (streamCRC === null) {\n                // reset for next bzip2 header\n                blockSize = 0;\n                return false;\n            }else{\n                //console.error('decompressed', chunk.length,'bytes');\n                push(Buffer.from(chunk));\n                return true;\n            }\n        }\n    }\n\n    var outlength = 0;\n    function decompressAndQueue(stream) {\n        if (broken) return;\n        try {\n            return decompressBlock(function(d) {\n                stream.queue(d);\n                if (d !== null) {\n                    //console.error('write at', outlength.toString(16));\n                    outlength += d.length;\n                } else {\n                    //console.error('written EOS');\n                }\n            });\n        } catch(e) {\n            //console.error(e);\n            stream.emit('error', e);\n            broken = true;\n            return false;\n        }\n    }\n\n    return through(\n        function write(data) {\n            //console.error('received', data.length,'bytes in', typeof data);\n            bufferQueue.push(data);\n            hasBytes += data.length;\n            if (bitReader === null) {\n                bitReader = bitIterator(function() {\n                    return bufferQueue.shift();\n                });\n            }\n            while (!broken && hasBytes - bitReader.bytesRead + 1 >= ((25000 + 100000 * blockSize) || 4)){\n                //console.error('decompressing with', hasBytes - bitReader.bytesRead + 1, 'bytes in buffer');\n                decompressAndQueue(this);\n            }\n        },\n        function end(x) {\n            //console.error(x,'last compressing with', hasBytes, 'bytes in buffer');\n            while (!broken && bitReader && hasBytes > bitReader.bytesRead){\n                decompressAndQueue(this);\n            }\n            if (!broken) {\n                if (streamCRC !== null)\n                    this.emit('error', new Error(\"input stream ended prematurely\"));\n                this.queue(null);\n            }\n        }\n    );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}