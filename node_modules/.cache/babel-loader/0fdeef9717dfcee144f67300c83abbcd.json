{"ast":null,"code":"/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNode } from '../environment.js';\n/**\n * @internal\n */\nlet debugModule = null;\n/**\n * @internal\n */\nexport async function importDebug() {\n  if (!debugModule) {\n    debugModule = (await import('debug')).default;\n  }\n  return debugModule;\n}\n/**\n * A debug function that can be used in any environment.\n *\n * @remarks\n * If used in Node, it falls back to the\n * {@link https://www.npmjs.com/package/debug | debug module}. In the browser it\n * uses `console.log`.\n *\n * In Node, use the `DEBUG` environment variable to control logging:\n *\n * ```\n * DEBUG=* // logs all channels\n * DEBUG=foo // logs the `foo` channel\n * DEBUG=foo* // logs any channels starting with `foo`\n * ```\n *\n * In the browser, set `window.__PUPPETEER_DEBUG` to a string:\n *\n * ```\n * window.__PUPPETEER_DEBUG='*'; // logs all channels\n * window.__PUPPETEER_DEBUG='foo'; // logs the `foo` channel\n * window.__PUPPETEER_DEBUG='foo*'; // logs any channels starting with `foo`\n * ```\n *\n * @example\n *\n * ```\n * const log = debug('Page');\n *\n * log('new page created')\n * // logs \"Page: new page created\"\n * ```\n *\n * @param prefix - this will be prefixed to each log.\n * @returns a function that can be called to log to that debug channel.\n *\n * @internal\n */\nexport const debug = prefix => {\n  if (isNode) {\n    return async function () {\n      for (var _len = arguments.length, logArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n        logArgs[_key] = arguments[_key];\n      }\n      if (captureLogs) {\n        capturedLogs.push(prefix + logArgs);\n      }\n      (await importDebug())(prefix)(logArgs);\n    };\n  }\n  return function () {\n    const debugLevel = globalThis.__PUPPETEER_DEBUG;\n    if (!debugLevel) {\n      return;\n    }\n    const everythingShouldBeLogged = debugLevel === '*';\n    const prefixMatchesDebugLevel = everythingShouldBeLogged || (\n    /**\n     * If the debug level is `foo*`, that means we match any prefix that\n     * starts with `foo`. If the level is `foo`, we match only the prefix\n     * `foo`.\n     */\n    debugLevel.endsWith('*') ? prefix.startsWith(debugLevel) : prefix === debugLevel);\n    if (!prefixMatchesDebugLevel) {\n      return;\n    }\n    // eslint-disable-next-line no-console\n    for (var _len2 = arguments.length, logArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      logArgs[_key2] = arguments[_key2];\n    }\n    console.log(`${prefix}:`, ...logArgs);\n  };\n};\n/**\n * @internal\n */\nlet capturedLogs = [];\n/**\n * @internal\n */\nlet captureLogs = false;\n/**\n * @internal\n */\nexport function setLogCapture(value) {\n  capturedLogs = [];\n  captureLogs = value;\n}\n/**\n * @internal\n */\nexport function getCapturedLogs() {\n  return capturedLogs;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAAQA,MAAM,QAAO,mBAAmB;AAOxC;;;AAGA,IAAIC,WAAW,GAAwB,IAAI;AAC3C;;;AAGA,OAAO,eAAeC,WAAW;EAC/B,IAAI,CAACD,WAAW,EAAE;IAChBA,WAAW,GAAG,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,EAAEE,OAAO;;EAE/C,OAAOF,WAAW;AACpB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,OAAO,MAAMG,KAAK,GAAIC,MAAc,IAAoC;EACtE,IAAIL,MAAM,EAAE;IACV,OAAO,kBAAgC;MAAA,kCAAtBM,OAAkB;QAAlBA,OAAkB;MAAA;MACjC,IAAIC,WAAW,EAAE;QACfC,YAAY,CAACC,IAAI,CAACJ,MAAM,GAAGC,OAAO,CAAC;;MAErC,CAAC,MAAMJ,WAAW,EAAE,EAAEG,MAAM,CAAC,CAACC,OAAO,CAAC;IACxC,CAAC;;EAGH,OAAO,YAAgC;IACrC,MAAMI,UAAU,GAAIC,UAAkB,CAACC,iBAAiB;IACxD,IAAI,CAACF,UAAU,EAAE;MACf;;IAGF,MAAMG,wBAAwB,GAAGH,UAAU,KAAK,GAAG;IAEnD,MAAMI,uBAAuB,GAC3BD,wBAAwB;IACxB;;;;;IAKCH,UAAU,CAACK,QAAQ,CAAC,GAAG,CAAC,GACrBV,MAAM,CAACW,UAAU,CAACN,UAAU,CAAC,GAC7BL,MAAM,KAAKK,UAAU,CAAC;IAE5B,IAAI,CAACI,uBAAuB,EAAE;MAC5B;;IAGF;IAAA,mCAvBSR,OAAkB;MAAlBA,OAAkB;IAAA;IAwB3BW,OAAO,CAACC,GAAG,CAAC,GAAGb,MAAM,GAAG,EAAE,GAAGC,OAAO,CAAC;EACvC,CAAC;AACH,CAAC;AAED;;;AAGA,IAAIE,YAAY,GAAa,EAAE;AAC/B;;;AAGA,IAAID,WAAW,GAAG,KAAK;AAEvB;;;AAGA,OAAM,SAAUY,aAAa,CAACC,KAAc;EAC1CZ,YAAY,GAAG,EAAE;EACjBD,WAAW,GAAGa,KAAK;AACrB;AAEA;;;AAGA,OAAM,SAAUC,eAAe;EAC7B,OAAOb,YAAY;AACrB","names":["isNode","debugModule","importDebug","default","debug","prefix","logArgs","captureLogs","capturedLogs","push","debugLevel","globalThis","__PUPPETEER_DEBUG","everythingShouldBeLogged","prefixMatchesDebugLevel","endsWith","startsWith","console","log","setLogCapture","value","getCapturedLogs"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\common\\Debug.ts"],"sourcesContent":["/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type Debug from 'debug';\n\nimport {isNode} from '../environment.js';\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __PUPPETEER_DEBUG: string;\n}\n\n/**\n * @internal\n */\nlet debugModule: typeof Debug | null = null;\n/**\n * @internal\n */\nexport async function importDebug(): Promise<typeof Debug> {\n  if (!debugModule) {\n    debugModule = (await import('debug')).default;\n  }\n  return debugModule;\n}\n\n/**\n * A debug function that can be used in any environment.\n *\n * @remarks\n * If used in Node, it falls back to the\n * {@link https://www.npmjs.com/package/debug | debug module}. In the browser it\n * uses `console.log`.\n *\n * In Node, use the `DEBUG` environment variable to control logging:\n *\n * ```\n * DEBUG=* // logs all channels\n * DEBUG=foo // logs the `foo` channel\n * DEBUG=foo* // logs any channels starting with `foo`\n * ```\n *\n * In the browser, set `window.__PUPPETEER_DEBUG` to a string:\n *\n * ```\n * window.__PUPPETEER_DEBUG='*'; // logs all channels\n * window.__PUPPETEER_DEBUG='foo'; // logs the `foo` channel\n * window.__PUPPETEER_DEBUG='foo*'; // logs any channels starting with `foo`\n * ```\n *\n * @example\n *\n * ```\n * const log = debug('Page');\n *\n * log('new page created')\n * // logs \"Page: new page created\"\n * ```\n *\n * @param prefix - this will be prefixed to each log.\n * @returns a function that can be called to log to that debug channel.\n *\n * @internal\n */\nexport const debug = (prefix: string): ((...args: unknown[]) => void) => {\n  if (isNode) {\n    return async (...logArgs: unknown[]) => {\n      if (captureLogs) {\n        capturedLogs.push(prefix + logArgs);\n      }\n      (await importDebug())(prefix)(logArgs);\n    };\n  }\n\n  return (...logArgs: unknown[]): void => {\n    const debugLevel = (globalThis as any).__PUPPETEER_DEBUG;\n    if (!debugLevel) {\n      return;\n    }\n\n    const everythingShouldBeLogged = debugLevel === '*';\n\n    const prefixMatchesDebugLevel =\n      everythingShouldBeLogged ||\n      /**\n       * If the debug level is `foo*`, that means we match any prefix that\n       * starts with `foo`. If the level is `foo`, we match only the prefix\n       * `foo`.\n       */\n      (debugLevel.endsWith('*')\n        ? prefix.startsWith(debugLevel)\n        : prefix === debugLevel);\n\n    if (!prefixMatchesDebugLevel) {\n      return;\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(`${prefix}:`, ...logArgs);\n  };\n};\n\n/**\n * @internal\n */\nlet capturedLogs: string[] = [];\n/**\n * @internal\n */\nlet captureLogs = false;\n\n/**\n * @internal\n */\nexport function setLogCapture(value: boolean): void {\n  capturedLogs = [];\n  captureLogs = value;\n}\n\n/**\n * @internal\n */\nexport function getCapturedLogs(): string[] {\n  return capturedLogs;\n}\n"]},"metadata":{},"sourceType":"module"}