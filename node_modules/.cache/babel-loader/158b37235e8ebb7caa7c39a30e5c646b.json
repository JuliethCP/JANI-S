{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CDPSessionEvent } from '../api/CDPSession.js';\nimport { EventEmitter, EventSubscription } from '../common/EventEmitter.js';\nimport { NetworkManagerEvent } from '../common/NetworkManagerEvents.js';\nimport { debugError, isString } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { DisposableStack } from '../util/disposable.js';\nimport { CdpHTTPRequest } from './HTTPRequest.js';\nimport { CdpHTTPResponse } from './HTTPResponse.js';\nimport { NetworkEventManager } from './NetworkEventManager.js';\n/**\n * @internal\n */\nexport class NetworkManager extends EventEmitter {\n  #ignoreHTTPSErrors;\n  #frameManager;\n  #networkEventManager = new NetworkEventManager();\n  #extraHTTPHeaders;\n  #credentials;\n  #attemptedAuthentications = new Set();\n  #userRequestInterceptionEnabled = false;\n  #protocolRequestInterceptionEnabled = false;\n  #userCacheDisabled;\n  #emulatedNetworkConditions;\n  #userAgent;\n  #userAgentMetadata;\n  #handlers = [['Fetch.requestPaused', this.#onRequestPaused], ['Fetch.authRequired', this.#onAuthRequired], ['Network.requestWillBeSent', this.#onRequestWillBeSent], ['Network.requestServedFromCache', this.#onRequestServedFromCache], ['Network.responseReceived', this.#onResponseReceived], ['Network.loadingFinished', this.#onLoadingFinished], ['Network.loadingFailed', this.#onLoadingFailed], ['Network.responseReceivedExtraInfo', this.#onResponseReceivedExtraInfo], [CDPSessionEvent.Disconnected, this.#removeClient]];\n  #clients = new Map();\n  constructor(ignoreHTTPSErrors, frameManager) {\n    super();\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#frameManager = frameManager;\n  }\n  async addClient(client) {\n    if (this.#clients.has(client)) {\n      return;\n    }\n    const subscriptions = new DisposableStack();\n    this.#clients.set(client, subscriptions);\n    for (const [event, handler] of this.#handlers) {\n      subscriptions.use(\n      // TODO: Remove any here.\n      new EventSubscription(client, event, arg => {\n        return handler.bind(this)(client, arg);\n      }));\n    }\n    await Promise.all([this.#ignoreHTTPSErrors ? client.send('Security.setIgnoreCertificateErrors', {\n      ignore: true\n    }) : null, client.send('Network.enable'), this.#applyExtraHTTPHeaders(client), this.#applyNetworkConditions(client), this.#applyProtocolCacheDisabled(client), this.#applyProtocolRequestInterception(client), this.#applyUserAgent(client)]);\n  }\n  async #removeClient(client) {\n    this.#clients.get(client)?.dispose();\n    this.#clients.delete(client);\n  }\n  async authenticate(credentials) {\n    this.#credentials = credentials;\n    const enabled = this.#userRequestInterceptionEnabled || !!this.#credentials;\n    if (enabled === this.#protocolRequestInterceptionEnabled) {\n      return;\n    }\n    this.#protocolRequestInterceptionEnabled = enabled;\n    await this.#applyToAllClients(this.#applyProtocolRequestInterception.bind(this));\n  }\n  async setExtraHTTPHeaders(extraHTTPHeaders) {\n    this.#extraHTTPHeaders = {};\n    for (const key of Object.keys(extraHTTPHeaders)) {\n      const value = extraHTTPHeaders[key];\n      assert(isString(value), `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n      this.#extraHTTPHeaders[key.toLowerCase()] = value;\n    }\n    await this.#applyToAllClients(this.#applyExtraHTTPHeaders.bind(this));\n  }\n  async #applyExtraHTTPHeaders(client) {\n    if (this.#extraHTTPHeaders === undefined) {\n      return;\n    }\n    await client.send('Network.setExtraHTTPHeaders', {\n      headers: this.#extraHTTPHeaders\n    });\n  }\n  extraHTTPHeaders() {\n    return Object.assign({}, this.#extraHTTPHeaders);\n  }\n  inFlightRequestsCount() {\n    return this.#networkEventManager.inFlightRequestsCount();\n  }\n  async setOfflineMode(value) {\n    if (!this.#emulatedNetworkConditions) {\n      this.#emulatedNetworkConditions = {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0\n      };\n    }\n    this.#emulatedNetworkConditions.offline = value;\n    await this.#applyToAllClients(this.#applyNetworkConditions.bind(this));\n  }\n  async emulateNetworkConditions(networkConditions) {\n    if (!this.#emulatedNetworkConditions) {\n      this.#emulatedNetworkConditions = {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0\n      };\n    }\n    this.#emulatedNetworkConditions.upload = networkConditions ? networkConditions.upload : -1;\n    this.#emulatedNetworkConditions.download = networkConditions ? networkConditions.download : -1;\n    this.#emulatedNetworkConditions.latency = networkConditions ? networkConditions.latency : 0;\n    await this.#applyToAllClients(this.#applyNetworkConditions.bind(this));\n  }\n  async #applyToAllClients(fn) {\n    await Promise.all(Array.from(this.#clients.keys()).map(client => {\n      return fn(client);\n    }));\n  }\n  async #applyNetworkConditions(client) {\n    if (this.#emulatedNetworkConditions === undefined) {\n      return;\n    }\n    await client.send('Network.emulateNetworkConditions', {\n      offline: this.#emulatedNetworkConditions.offline,\n      latency: this.#emulatedNetworkConditions.latency,\n      uploadThroughput: this.#emulatedNetworkConditions.upload,\n      downloadThroughput: this.#emulatedNetworkConditions.download\n    });\n  }\n  async setUserAgent(userAgent, userAgentMetadata) {\n    this.#userAgent = userAgent;\n    this.#userAgentMetadata = userAgentMetadata;\n    await this.#applyToAllClients(this.#applyUserAgent.bind(this));\n  }\n  async #applyUserAgent(client) {\n    if (this.#userAgent === undefined) {\n      return;\n    }\n    await client.send('Network.setUserAgentOverride', {\n      userAgent: this.#userAgent,\n      userAgentMetadata: this.#userAgentMetadata\n    });\n  }\n  async setCacheEnabled(enabled) {\n    this.#userCacheDisabled = !enabled;\n    await this.#applyToAllClients(this.#applyProtocolCacheDisabled.bind(this));\n  }\n  async setRequestInterception(value) {\n    this.#userRequestInterceptionEnabled = value;\n    const enabled = this.#userRequestInterceptionEnabled || !!this.#credentials;\n    if (enabled === this.#protocolRequestInterceptionEnabled) {\n      return;\n    }\n    this.#protocolRequestInterceptionEnabled = enabled;\n    await this.#applyToAllClients(this.#applyProtocolRequestInterception.bind(this));\n  }\n  async #applyProtocolRequestInterception(client) {\n    if (this.#userCacheDisabled === undefined) {\n      this.#userCacheDisabled = false;\n    }\n    if (this.#protocolRequestInterceptionEnabled) {\n      await Promise.all([this.#applyProtocolCacheDisabled(client), client.send('Fetch.enable', {\n        handleAuthRequests: true,\n        patterns: [{\n          urlPattern: '*'\n        }]\n      })]);\n    } else {\n      await Promise.all([this.#applyProtocolCacheDisabled(client), client.send('Fetch.disable')]);\n    }\n  }\n  async #applyProtocolCacheDisabled(client) {\n    if (this.#userCacheDisabled === undefined) {\n      return;\n    }\n    await client.send('Network.setCacheDisabled', {\n      cacheDisabled: this.#userCacheDisabled\n    });\n  }\n  #onRequestWillBeSent(client, event) {\n    // Request interception doesn't happen for data URLs with Network Service.\n    if (this.#userRequestInterceptionEnabled && !event.request.url.startsWith('data:')) {\n      const {\n        requestId: networkRequestId\n      } = event;\n      this.#networkEventManager.storeRequestWillBeSent(networkRequestId, event);\n      /**\n       * CDP may have sent a Fetch.requestPaused event already. Check for it.\n       */\n      const requestPausedEvent = this.#networkEventManager.getRequestPaused(networkRequestId);\n      if (requestPausedEvent) {\n        const {\n          requestId: fetchRequestId\n        } = requestPausedEvent;\n        this.#patchRequestEventHeaders(event, requestPausedEvent);\n        this.#onRequest(client, event, fetchRequestId);\n        this.#networkEventManager.forgetRequestPaused(networkRequestId);\n      }\n      return;\n    }\n    this.#onRequest(client, event, undefined);\n  }\n  #onAuthRequired(client, event) {\n    let response = 'Default';\n    if (this.#attemptedAuthentications.has(event.requestId)) {\n      response = 'CancelAuth';\n    } else if (this.#credentials) {\n      response = 'ProvideCredentials';\n      this.#attemptedAuthentications.add(event.requestId);\n    }\n    const {\n      username,\n      password\n    } = this.#credentials || {\n      username: undefined,\n      password: undefined\n    };\n    client.send('Fetch.continueWithAuth', {\n      requestId: event.requestId,\n      authChallengeResponse: {\n        response,\n        username,\n        password\n      }\n    }).catch(debugError);\n  }\n  /**\n   * CDP may send a Fetch.requestPaused without or before a\n   * Network.requestWillBeSent\n   *\n   * CDP may send multiple Fetch.requestPaused\n   * for the same Network.requestWillBeSent.\n   */\n  #onRequestPaused(client, event) {\n    if (!this.#userRequestInterceptionEnabled && this.#protocolRequestInterceptionEnabled) {\n      client.send('Fetch.continueRequest', {\n        requestId: event.requestId\n      }).catch(debugError);\n    }\n    const {\n      networkId: networkRequestId,\n      requestId: fetchRequestId\n    } = event;\n    if (!networkRequestId) {\n      this.#onRequestWithoutNetworkInstrumentation(client, event);\n      return;\n    }\n    const requestWillBeSentEvent = (() => {\n      const requestWillBeSentEvent = this.#networkEventManager.getRequestWillBeSent(networkRequestId);\n      // redirect requests have the same `requestId`,\n      if (requestWillBeSentEvent && (requestWillBeSentEvent.request.url !== event.request.url || requestWillBeSentEvent.request.method !== event.request.method)) {\n        this.#networkEventManager.forgetRequestWillBeSent(networkRequestId);\n        return;\n      }\n      return requestWillBeSentEvent;\n    })();\n    if (requestWillBeSentEvent) {\n      this.#patchRequestEventHeaders(requestWillBeSentEvent, event);\n      this.#onRequest(client, requestWillBeSentEvent, fetchRequestId);\n    } else {\n      this.#networkEventManager.storeRequestPaused(networkRequestId, event);\n    }\n  }\n  #patchRequestEventHeaders(requestWillBeSentEvent, requestPausedEvent) {\n    requestWillBeSentEvent.request.headers = {\n      ...requestWillBeSentEvent.request.headers,\n      // includes extra headers, like: Accept, Origin\n      ...requestPausedEvent.request.headers\n    };\n  }\n  #onRequestWithoutNetworkInstrumentation(client, event) {\n    // If an event has no networkId it should not have any network events. We\n    // still want to dispatch it for the interception by the user.\n    const frame = event.frameId ? this.#frameManager.frame(event.frameId) : null;\n    const request = new CdpHTTPRequest(client, frame, event.requestId, this.#userRequestInterceptionEnabled, event, []);\n    this.emit(NetworkManagerEvent.Request, request);\n    void request.finalizeInterceptions();\n  }\n  #onRequest(client, event, fetchRequestId) {\n    let redirectChain = [];\n    if (event.redirectResponse) {\n      // We want to emit a response and requestfinished for the\n      // redirectResponse, but we can't do so unless we have a\n      // responseExtraInfo ready to pair it up with. If we don't have any\n      // responseExtraInfos saved in our queue, they we have to wait until\n      // the next one to emit response and requestfinished, *and* we should\n      // also wait to emit this Request too because it should come after the\n      // response/requestfinished.\n      let redirectResponseExtraInfo = null;\n      if (event.redirectHasExtraInfo) {\n        redirectResponseExtraInfo = this.#networkEventManager.responseExtraInfo(event.requestId).shift();\n        if (!redirectResponseExtraInfo) {\n          this.#networkEventManager.queueRedirectInfo(event.requestId, {\n            event,\n            fetchRequestId\n          });\n          return;\n        }\n      }\n      const request = this.#networkEventManager.getRequest(event.requestId);\n      // If we connect late to the target, we could have missed the\n      // requestWillBeSent event.\n      if (request) {\n        this.#handleRequestRedirect(client, request, event.redirectResponse, redirectResponseExtraInfo);\n        redirectChain = request._redirectChain;\n      }\n    }\n    const frame = event.frameId ? this.#frameManager.frame(event.frameId) : null;\n    const request = new CdpHTTPRequest(client, frame, fetchRequestId, this.#userRequestInterceptionEnabled, event, redirectChain);\n    this.#networkEventManager.storeRequest(event.requestId, request);\n    this.emit(NetworkManagerEvent.Request, request);\n    void request.finalizeInterceptions();\n  }\n  #onRequestServedFromCache(_client, event) {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    if (request) {\n      request._fromMemoryCache = true;\n    }\n    this.emit(NetworkManagerEvent.RequestServedFromCache, request);\n  }\n  #handleRequestRedirect(client, request, responsePayload, extraInfo) {\n    const response = new CdpHTTPResponse(client, request, responsePayload, extraInfo);\n    request._response = response;\n    request._redirectChain.push(request);\n    response._resolveBody(new Error('Response body is unavailable for redirect responses'));\n    this.#forgetRequest(request, false);\n    this.emit(NetworkManagerEvent.Response, response);\n    this.emit(NetworkManagerEvent.RequestFinished, request);\n  }\n  #emitResponseEvent(client, responseReceived, extraInfo) {\n    const request = this.#networkEventManager.getRequest(responseReceived.requestId);\n    // FileUpload sends a response without a matching request.\n    if (!request) {\n      return;\n    }\n    const extraInfos = this.#networkEventManager.responseExtraInfo(responseReceived.requestId);\n    if (extraInfos.length) {\n      debugError(new Error('Unexpected extraInfo events for request ' + responseReceived.requestId));\n    }\n    // Chromium sends wrong extraInfo events for responses served from cache.\n    // See https://github.com/puppeteer/puppeteer/issues/9965 and\n    // https://crbug.com/1340398.\n    if (responseReceived.response.fromDiskCache) {\n      extraInfo = null;\n    }\n    const response = new CdpHTTPResponse(client, request, responseReceived.response, extraInfo);\n    request._response = response;\n    this.emit(NetworkManagerEvent.Response, response);\n  }\n  #onResponseReceived(client, event) {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    let extraInfo = null;\n    if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n      extraInfo = this.#networkEventManager.responseExtraInfo(event.requestId).shift();\n      if (!extraInfo) {\n        // Wait until we get the corresponding ExtraInfo event.\n        this.#networkEventManager.queueEventGroup(event.requestId, {\n          responseReceivedEvent: event\n        });\n        return;\n      }\n    }\n    this.#emitResponseEvent(client, event, extraInfo);\n  }\n  #onResponseReceivedExtraInfo(client, event) {\n    // We may have skipped a redirect response/request pair due to waiting for\n    // this ExtraInfo event. If so, continue that work now that we have the\n    // request.\n    const redirectInfo = this.#networkEventManager.takeQueuedRedirectInfo(event.requestId);\n    if (redirectInfo) {\n      this.#networkEventManager.responseExtraInfo(event.requestId).push(event);\n      this.#onRequest(client, redirectInfo.event, redirectInfo.fetchRequestId);\n      return;\n    }\n    // We may have skipped response and loading events because we didn't have\n    // this ExtraInfo event yet. If so, emit those events now.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(event.requestId);\n    if (queuedEvents) {\n      this.#networkEventManager.forgetQueuedEventGroup(event.requestId);\n      this.#emitResponseEvent(client, queuedEvents.responseReceivedEvent, event);\n      if (queuedEvents.loadingFinishedEvent) {\n        this.#emitLoadingFinished(queuedEvents.loadingFinishedEvent);\n      }\n      if (queuedEvents.loadingFailedEvent) {\n        this.#emitLoadingFailed(queuedEvents.loadingFailedEvent);\n      }\n      return;\n    }\n    // Wait until we get another event that can use this ExtraInfo event.\n    this.#networkEventManager.responseExtraInfo(event.requestId).push(event);\n  }\n  #forgetRequest(request, events) {\n    const requestId = request._requestId;\n    const interceptionId = request._interceptionId;\n    this.#networkEventManager.forgetRequest(requestId);\n    interceptionId !== undefined && this.#attemptedAuthentications.delete(interceptionId);\n    if (events) {\n      this.#networkEventManager.forget(requestId);\n    }\n  }\n  #onLoadingFinished(_client, event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(event.requestId);\n    if (queuedEvents) {\n      queuedEvents.loadingFinishedEvent = event;\n    } else {\n      this.#emitLoadingFinished(event);\n    }\n  }\n  #emitLoadingFinished(event) {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n      return;\n    }\n    // Under certain conditions we never get the Network.responseReceived\n    // event from protocol. @see https://crbug.com/883475\n    if (request.response()) {\n      request.response()?._resolveBody();\n    }\n    this.#forgetRequest(request, true);\n    this.emit(NetworkManagerEvent.RequestFinished, request);\n  }\n  #onLoadingFailed(_client, event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(event.requestId);\n    if (queuedEvents) {\n      queuedEvents.loadingFailedEvent = event;\n    } else {\n      this.#emitLoadingFailed(event);\n    }\n  }\n  #emitLoadingFailed(event) {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n      return;\n    }\n    request._failureText = event.errorText;\n    const response = request.response();\n    if (response) {\n      response._resolveBody();\n    }\n    this.#forgetRequest(request, true);\n    this.emit(NetworkManagerEvent.RequestFailed, request);\n  }\n}","map":{"version":3,"mappings":"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","names":["CDPSessionEvent","EventEmitter","EventSubscription","NetworkManagerEvent","debugError","isString","assert","DisposableStack","CdpHTTPRequest","CdpHTTPResponse","NetworkEventManager","NetworkManager","Set","Disconnected","Map","constructor","ignoreHTTPSErrors","frameManager","addClient","client","has","subscriptions","set","event","handler","use","arg","bind","Promise","all","send","ignore","get","dispose","delete","authenticate","credentials","enabled","setExtraHTTPHeaders","extraHTTPHeaders","key","Object","keys","value","toLowerCase","undefined","headers","assign","inFlightRequestsCount","setOfflineMode","offline","upload","download","latency","emulateNetworkConditions","networkConditions","fn","Array","from","map","uploadThroughput","downloadThroughput","setUserAgent","userAgent","userAgentMetadata","setCacheEnabled","setRequestInterception","handleAuthRequests","patterns","urlPattern","cacheDisabled","request","url","startsWith","requestId","networkRequestId","storeRequestWillBeSent","requestPausedEvent","getRequestPaused","fetchRequestId","forgetRequestPaused","response","add","username","password","authChallengeResponse","catch","networkId","requestWillBeSentEvent","getRequestWillBeSent","method","forgetRequestWillBeSent","storeRequestPaused","frame","frameId","emit","Request","finalizeInterceptions","redirectChain","redirectResponse","redirectResponseExtraInfo","redirectHasExtraInfo","responseExtraInfo","shift","queueRedirectInfo","getRequest","_redirectChain","storeRequest","_client","_fromMemoryCache","RequestServedFromCache","responsePayload","extraInfo","_response","push","_resolveBody","Error","Response","RequestFinished","responseReceived","extraInfos","length","fromDiskCache","hasExtraInfo","queueEventGroup","responseReceivedEvent","redirectInfo","takeQueuedRedirectInfo","queuedEvents","getQueuedEventGroup","forgetQueuedEventGroup","loadingFinishedEvent","loadingFailedEvent","events","_requestId","interceptionId","_interceptionId","forgetRequest","forget","_failureText","errorText","RequestFailed"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\NetworkManager.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport {CDPSessionEvent, type CDPSession} from '../api/CDPSession.js';\nimport type {Frame} from '../api/Frame.js';\nimport {EventEmitter, EventSubscription} from '../common/EventEmitter.js';\nimport {\n  NetworkManagerEvent,\n  type NetworkManagerEvents,\n} from '../common/NetworkManagerEvents.js';\nimport {debugError, isString} from '../common/util.js';\nimport {assert} from '../util/assert.js';\nimport {DisposableStack} from '../util/disposable.js';\n\nimport {CdpHTTPRequest} from './HTTPRequest.js';\nimport {CdpHTTPResponse} from './HTTPResponse.js';\nimport {\n  NetworkEventManager,\n  type FetchRequestId,\n} from './NetworkEventManager.js';\n\n/**\n * @public\n */\nexport interface Credentials {\n  username: string;\n  password: string;\n}\n\n/**\n * @public\n */\nexport interface NetworkConditions {\n  // Download speed (bytes/s)\n  download: number;\n  // Upload speed (bytes/s)\n  upload: number;\n  // Latency (ms)\n  latency: number;\n}\n\n/**\n * @public\n */\nexport interface InternalNetworkConditions extends NetworkConditions {\n  offline: boolean;\n}\n\n/**\n * @internal\n */\nexport interface FrameProvider {\n  frame(id: string): Frame | null;\n}\n\n/**\n * @internal\n */\nexport class NetworkManager extends EventEmitter<NetworkManagerEvents> {\n  #ignoreHTTPSErrors: boolean;\n  #frameManager: FrameProvider;\n  #networkEventManager = new NetworkEventManager();\n  #extraHTTPHeaders?: Record<string, string>;\n  #credentials?: Credentials;\n  #attemptedAuthentications = new Set<string>();\n  #userRequestInterceptionEnabled = false;\n  #protocolRequestInterceptionEnabled = false;\n  #userCacheDisabled?: boolean;\n  #emulatedNetworkConditions?: InternalNetworkConditions;\n  #userAgent?: string;\n  #userAgentMetadata?: Protocol.Emulation.UserAgentMetadata;\n\n  readonly #handlers = [\n    ['Fetch.requestPaused', this.#onRequestPaused],\n    ['Fetch.authRequired', this.#onAuthRequired],\n    ['Network.requestWillBeSent', this.#onRequestWillBeSent],\n    ['Network.requestServedFromCache', this.#onRequestServedFromCache],\n    ['Network.responseReceived', this.#onResponseReceived],\n    ['Network.loadingFinished', this.#onLoadingFinished],\n    ['Network.loadingFailed', this.#onLoadingFailed],\n    ['Network.responseReceivedExtraInfo', this.#onResponseReceivedExtraInfo],\n    [CDPSessionEvent.Disconnected, this.#removeClient],\n  ] as const;\n\n  #clients = new Map<CDPSession, DisposableStack>();\n\n  constructor(ignoreHTTPSErrors: boolean, frameManager: FrameProvider) {\n    super();\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#frameManager = frameManager;\n  }\n\n  async addClient(client: CDPSession): Promise<void> {\n    if (this.#clients.has(client)) {\n      return;\n    }\n    const subscriptions = new DisposableStack();\n    this.#clients.set(client, subscriptions);\n    for (const [event, handler] of this.#handlers) {\n      subscriptions.use(\n        // TODO: Remove any here.\n        new EventSubscription(client, event, (arg: any) => {\n          return handler.bind(this)(client, arg);\n        })\n      );\n    }\n    await Promise.all([\n      this.#ignoreHTTPSErrors\n        ? client.send('Security.setIgnoreCertificateErrors', {\n            ignore: true,\n          })\n        : null,\n      client.send('Network.enable'),\n      this.#applyExtraHTTPHeaders(client),\n      this.#applyNetworkConditions(client),\n      this.#applyProtocolCacheDisabled(client),\n      this.#applyProtocolRequestInterception(client),\n      this.#applyUserAgent(client),\n    ]);\n  }\n\n  async #removeClient(client: CDPSession) {\n    this.#clients.get(client)?.dispose();\n    this.#clients.delete(client);\n  }\n\n  async authenticate(credentials?: Credentials): Promise<void> {\n    this.#credentials = credentials;\n    const enabled = this.#userRequestInterceptionEnabled || !!this.#credentials;\n    if (enabled === this.#protocolRequestInterceptionEnabled) {\n      return;\n    }\n    this.#protocolRequestInterceptionEnabled = enabled;\n    await this.#applyToAllClients(\n      this.#applyProtocolRequestInterception.bind(this)\n    );\n  }\n\n  async setExtraHTTPHeaders(\n    extraHTTPHeaders: Record<string, string>\n  ): Promise<void> {\n    this.#extraHTTPHeaders = {};\n    for (const key of Object.keys(extraHTTPHeaders)) {\n      const value = extraHTTPHeaders[key];\n      assert(\n        isString(value),\n        `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`\n      );\n      this.#extraHTTPHeaders[key.toLowerCase()] = value;\n    }\n\n    await this.#applyToAllClients(this.#applyExtraHTTPHeaders.bind(this));\n  }\n\n  async #applyExtraHTTPHeaders(client: CDPSession) {\n    if (this.#extraHTTPHeaders === undefined) {\n      return;\n    }\n    await client.send('Network.setExtraHTTPHeaders', {\n      headers: this.#extraHTTPHeaders,\n    });\n  }\n\n  extraHTTPHeaders(): Record<string, string> {\n    return Object.assign({}, this.#extraHTTPHeaders);\n  }\n\n  inFlightRequestsCount(): number {\n    return this.#networkEventManager.inFlightRequestsCount();\n  }\n\n  async setOfflineMode(value: boolean): Promise<void> {\n    if (!this.#emulatedNetworkConditions) {\n      this.#emulatedNetworkConditions = {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0,\n      };\n    }\n    this.#emulatedNetworkConditions.offline = value;\n    await this.#applyToAllClients(this.#applyNetworkConditions.bind(this));\n  }\n\n  async emulateNetworkConditions(\n    networkConditions: NetworkConditions | null\n  ): Promise<void> {\n    if (!this.#emulatedNetworkConditions) {\n      this.#emulatedNetworkConditions = {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0,\n      };\n    }\n    this.#emulatedNetworkConditions.upload = networkConditions\n      ? networkConditions.upload\n      : -1;\n    this.#emulatedNetworkConditions.download = networkConditions\n      ? networkConditions.download\n      : -1;\n    this.#emulatedNetworkConditions.latency = networkConditions\n      ? networkConditions.latency\n      : 0;\n\n    await this.#applyToAllClients(this.#applyNetworkConditions.bind(this));\n  }\n\n  async #applyToAllClients(fn: (client: CDPSession) => Promise<unknown>) {\n    await Promise.all(\n      Array.from(this.#clients.keys()).map(client => {\n        return fn(client);\n      })\n    );\n  }\n\n  async #applyNetworkConditions(client: CDPSession): Promise<void> {\n    if (this.#emulatedNetworkConditions === undefined) {\n      return;\n    }\n    await client.send('Network.emulateNetworkConditions', {\n      offline: this.#emulatedNetworkConditions.offline,\n      latency: this.#emulatedNetworkConditions.latency,\n      uploadThroughput: this.#emulatedNetworkConditions.upload,\n      downloadThroughput: this.#emulatedNetworkConditions.download,\n    });\n  }\n\n  async setUserAgent(\n    userAgent: string,\n    userAgentMetadata?: Protocol.Emulation.UserAgentMetadata\n  ): Promise<void> {\n    this.#userAgent = userAgent;\n    this.#userAgentMetadata = userAgentMetadata;\n    await this.#applyToAllClients(this.#applyUserAgent.bind(this));\n  }\n\n  async #applyUserAgent(client: CDPSession) {\n    if (this.#userAgent === undefined) {\n      return;\n    }\n    await client.send('Network.setUserAgentOverride', {\n      userAgent: this.#userAgent,\n      userAgentMetadata: this.#userAgentMetadata,\n    });\n  }\n\n  async setCacheEnabled(enabled: boolean): Promise<void> {\n    this.#userCacheDisabled = !enabled;\n    await this.#applyToAllClients(this.#applyProtocolCacheDisabled.bind(this));\n  }\n\n  async setRequestInterception(value: boolean): Promise<void> {\n    this.#userRequestInterceptionEnabled = value;\n    const enabled = this.#userRequestInterceptionEnabled || !!this.#credentials;\n    if (enabled === this.#protocolRequestInterceptionEnabled) {\n      return;\n    }\n    this.#protocolRequestInterceptionEnabled = enabled;\n    await this.#applyToAllClients(\n      this.#applyProtocolRequestInterception.bind(this)\n    );\n  }\n\n  async #applyProtocolRequestInterception(client: CDPSession): Promise<void> {\n    if (this.#userCacheDisabled === undefined) {\n      this.#userCacheDisabled = false;\n    }\n    if (this.#protocolRequestInterceptionEnabled) {\n      await Promise.all([\n        this.#applyProtocolCacheDisabled(client),\n        client.send('Fetch.enable', {\n          handleAuthRequests: true,\n          patterns: [{urlPattern: '*'}],\n        }),\n      ]);\n    } else {\n      await Promise.all([\n        this.#applyProtocolCacheDisabled(client),\n        client.send('Fetch.disable'),\n      ]);\n    }\n  }\n\n  async #applyProtocolCacheDisabled(client: CDPSession): Promise<void> {\n    if (this.#userCacheDisabled === undefined) {\n      return;\n    }\n    await client.send('Network.setCacheDisabled', {\n      cacheDisabled: this.#userCacheDisabled,\n    });\n  }\n\n  #onRequestWillBeSent(\n    client: CDPSession,\n    event: Protocol.Network.RequestWillBeSentEvent\n  ): void {\n    // Request interception doesn't happen for data URLs with Network Service.\n    if (\n      this.#userRequestInterceptionEnabled &&\n      !event.request.url.startsWith('data:')\n    ) {\n      const {requestId: networkRequestId} = event;\n\n      this.#networkEventManager.storeRequestWillBeSent(networkRequestId, event);\n\n      /**\n       * CDP may have sent a Fetch.requestPaused event already. Check for it.\n       */\n      const requestPausedEvent =\n        this.#networkEventManager.getRequestPaused(networkRequestId);\n      if (requestPausedEvent) {\n        const {requestId: fetchRequestId} = requestPausedEvent;\n        this.#patchRequestEventHeaders(event, requestPausedEvent);\n        this.#onRequest(client, event, fetchRequestId);\n        this.#networkEventManager.forgetRequestPaused(networkRequestId);\n      }\n\n      return;\n    }\n    this.#onRequest(client, event, undefined);\n  }\n\n  #onAuthRequired(\n    client: CDPSession,\n    event: Protocol.Fetch.AuthRequiredEvent\n  ): void {\n    let response: Protocol.Fetch.AuthChallengeResponse['response'] = 'Default';\n    if (this.#attemptedAuthentications.has(event.requestId)) {\n      response = 'CancelAuth';\n    } else if (this.#credentials) {\n      response = 'ProvideCredentials';\n      this.#attemptedAuthentications.add(event.requestId);\n    }\n    const {username, password} = this.#credentials || {\n      username: undefined,\n      password: undefined,\n    };\n    client\n      .send('Fetch.continueWithAuth', {\n        requestId: event.requestId,\n        authChallengeResponse: {response, username, password},\n      })\n      .catch(debugError);\n  }\n\n  /**\n   * CDP may send a Fetch.requestPaused without or before a\n   * Network.requestWillBeSent\n   *\n   * CDP may send multiple Fetch.requestPaused\n   * for the same Network.requestWillBeSent.\n   */\n  #onRequestPaused(\n    client: CDPSession,\n    event: Protocol.Fetch.RequestPausedEvent\n  ): void {\n    if (\n      !this.#userRequestInterceptionEnabled &&\n      this.#protocolRequestInterceptionEnabled\n    ) {\n      client\n        .send('Fetch.continueRequest', {\n          requestId: event.requestId,\n        })\n        .catch(debugError);\n    }\n\n    const {networkId: networkRequestId, requestId: fetchRequestId} = event;\n\n    if (!networkRequestId) {\n      this.#onRequestWithoutNetworkInstrumentation(client, event);\n      return;\n    }\n\n    const requestWillBeSentEvent = (() => {\n      const requestWillBeSentEvent =\n        this.#networkEventManager.getRequestWillBeSent(networkRequestId);\n\n      // redirect requests have the same `requestId`,\n      if (\n        requestWillBeSentEvent &&\n        (requestWillBeSentEvent.request.url !== event.request.url ||\n          requestWillBeSentEvent.request.method !== event.request.method)\n      ) {\n        this.#networkEventManager.forgetRequestWillBeSent(networkRequestId);\n        return;\n      }\n      return requestWillBeSentEvent;\n    })();\n\n    if (requestWillBeSentEvent) {\n      this.#patchRequestEventHeaders(requestWillBeSentEvent, event);\n      this.#onRequest(client, requestWillBeSentEvent, fetchRequestId);\n    } else {\n      this.#networkEventManager.storeRequestPaused(networkRequestId, event);\n    }\n  }\n\n  #patchRequestEventHeaders(\n    requestWillBeSentEvent: Protocol.Network.RequestWillBeSentEvent,\n    requestPausedEvent: Protocol.Fetch.RequestPausedEvent\n  ): void {\n    requestWillBeSentEvent.request.headers = {\n      ...requestWillBeSentEvent.request.headers,\n      // includes extra headers, like: Accept, Origin\n      ...requestPausedEvent.request.headers,\n    };\n  }\n\n  #onRequestWithoutNetworkInstrumentation(\n    client: CDPSession,\n    event: Protocol.Fetch.RequestPausedEvent\n  ): void {\n    // If an event has no networkId it should not have any network events. We\n    // still want to dispatch it for the interception by the user.\n    const frame = event.frameId\n      ? this.#frameManager.frame(event.frameId)\n      : null;\n\n    const request = new CdpHTTPRequest(\n      client,\n      frame,\n      event.requestId,\n      this.#userRequestInterceptionEnabled,\n      event,\n      []\n    );\n    this.emit(NetworkManagerEvent.Request, request);\n    void request.finalizeInterceptions();\n  }\n\n  #onRequest(\n    client: CDPSession,\n    event: Protocol.Network.RequestWillBeSentEvent,\n    fetchRequestId?: FetchRequestId\n  ): void {\n    let redirectChain: CdpHTTPRequest[] = [];\n    if (event.redirectResponse) {\n      // We want to emit a response and requestfinished for the\n      // redirectResponse, but we can't do so unless we have a\n      // responseExtraInfo ready to pair it up with. If we don't have any\n      // responseExtraInfos saved in our queue, they we have to wait until\n      // the next one to emit response and requestfinished, *and* we should\n      // also wait to emit this Request too because it should come after the\n      // response/requestfinished.\n      let redirectResponseExtraInfo = null;\n      if (event.redirectHasExtraInfo) {\n        redirectResponseExtraInfo = this.#networkEventManager\n          .responseExtraInfo(event.requestId)\n          .shift();\n        if (!redirectResponseExtraInfo) {\n          this.#networkEventManager.queueRedirectInfo(event.requestId, {\n            event,\n            fetchRequestId,\n          });\n          return;\n        }\n      }\n\n      const request = this.#networkEventManager.getRequest(event.requestId);\n      // If we connect late to the target, we could have missed the\n      // requestWillBeSent event.\n      if (request) {\n        this.#handleRequestRedirect(\n          client,\n          request,\n          event.redirectResponse,\n          redirectResponseExtraInfo\n        );\n        redirectChain = request._redirectChain;\n      }\n    }\n    const frame = event.frameId\n      ? this.#frameManager.frame(event.frameId)\n      : null;\n\n    const request = new CdpHTTPRequest(\n      client,\n      frame,\n      fetchRequestId,\n      this.#userRequestInterceptionEnabled,\n      event,\n      redirectChain\n    );\n    this.#networkEventManager.storeRequest(event.requestId, request);\n    this.emit(NetworkManagerEvent.Request, request);\n    void request.finalizeInterceptions();\n  }\n\n  #onRequestServedFromCache(\n    _client: CDPSession,\n    event: Protocol.Network.RequestServedFromCacheEvent\n  ): void {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    if (request) {\n      request._fromMemoryCache = true;\n    }\n    this.emit(NetworkManagerEvent.RequestServedFromCache, request);\n  }\n\n  #handleRequestRedirect(\n    client: CDPSession,\n    request: CdpHTTPRequest,\n    responsePayload: Protocol.Network.Response,\n    extraInfo: Protocol.Network.ResponseReceivedExtraInfoEvent | null\n  ): void {\n    const response = new CdpHTTPResponse(\n      client,\n      request,\n      responsePayload,\n      extraInfo\n    );\n    request._response = response;\n    request._redirectChain.push(request);\n    response._resolveBody(\n      new Error('Response body is unavailable for redirect responses')\n    );\n    this.#forgetRequest(request, false);\n    this.emit(NetworkManagerEvent.Response, response);\n    this.emit(NetworkManagerEvent.RequestFinished, request);\n  }\n\n  #emitResponseEvent(\n    client: CDPSession,\n    responseReceived: Protocol.Network.ResponseReceivedEvent,\n    extraInfo: Protocol.Network.ResponseReceivedExtraInfoEvent | null\n  ): void {\n    const request = this.#networkEventManager.getRequest(\n      responseReceived.requestId\n    );\n    // FileUpload sends a response without a matching request.\n    if (!request) {\n      return;\n    }\n\n    const extraInfos = this.#networkEventManager.responseExtraInfo(\n      responseReceived.requestId\n    );\n    if (extraInfos.length) {\n      debugError(\n        new Error(\n          'Unexpected extraInfo events for request ' +\n            responseReceived.requestId\n        )\n      );\n    }\n\n    // Chromium sends wrong extraInfo events for responses served from cache.\n    // See https://github.com/puppeteer/puppeteer/issues/9965 and\n    // https://crbug.com/1340398.\n    if (responseReceived.response.fromDiskCache) {\n      extraInfo = null;\n    }\n\n    const response = new CdpHTTPResponse(\n      client,\n      request,\n      responseReceived.response,\n      extraInfo\n    );\n    request._response = response;\n    this.emit(NetworkManagerEvent.Response, response);\n  }\n\n  #onResponseReceived(\n    client: CDPSession,\n    event: Protocol.Network.ResponseReceivedEvent\n  ): void {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    let extraInfo = null;\n    if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n      extraInfo = this.#networkEventManager\n        .responseExtraInfo(event.requestId)\n        .shift();\n      if (!extraInfo) {\n        // Wait until we get the corresponding ExtraInfo event.\n        this.#networkEventManager.queueEventGroup(event.requestId, {\n          responseReceivedEvent: event,\n        });\n        return;\n      }\n    }\n    this.#emitResponseEvent(client, event, extraInfo);\n  }\n\n  #onResponseReceivedExtraInfo(\n    client: CDPSession,\n    event: Protocol.Network.ResponseReceivedExtraInfoEvent\n  ): void {\n    // We may have skipped a redirect response/request pair due to waiting for\n    // this ExtraInfo event. If so, continue that work now that we have the\n    // request.\n    const redirectInfo = this.#networkEventManager.takeQueuedRedirectInfo(\n      event.requestId\n    );\n    if (redirectInfo) {\n      this.#networkEventManager.responseExtraInfo(event.requestId).push(event);\n      this.#onRequest(client, redirectInfo.event, redirectInfo.fetchRequestId);\n      return;\n    }\n\n    // We may have skipped response and loading events because we didn't have\n    // this ExtraInfo event yet. If so, emit those events now.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(\n      event.requestId\n    );\n    if (queuedEvents) {\n      this.#networkEventManager.forgetQueuedEventGroup(event.requestId);\n      this.#emitResponseEvent(\n        client,\n        queuedEvents.responseReceivedEvent,\n        event\n      );\n      if (queuedEvents.loadingFinishedEvent) {\n        this.#emitLoadingFinished(queuedEvents.loadingFinishedEvent);\n      }\n      if (queuedEvents.loadingFailedEvent) {\n        this.#emitLoadingFailed(queuedEvents.loadingFailedEvent);\n      }\n      return;\n    }\n\n    // Wait until we get another event that can use this ExtraInfo event.\n    this.#networkEventManager.responseExtraInfo(event.requestId).push(event);\n  }\n\n  #forgetRequest(request: CdpHTTPRequest, events: boolean): void {\n    const requestId = request._requestId;\n    const interceptionId = request._interceptionId;\n\n    this.#networkEventManager.forgetRequest(requestId);\n    interceptionId !== undefined &&\n      this.#attemptedAuthentications.delete(interceptionId);\n\n    if (events) {\n      this.#networkEventManager.forget(requestId);\n    }\n  }\n\n  #onLoadingFinished(\n    _client: CDPSession,\n    event: Protocol.Network.LoadingFinishedEvent\n  ): void {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(\n      event.requestId\n    );\n    if (queuedEvents) {\n      queuedEvents.loadingFinishedEvent = event;\n    } else {\n      this.#emitLoadingFinished(event);\n    }\n  }\n\n  #emitLoadingFinished(event: Protocol.Network.LoadingFinishedEvent): void {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n      return;\n    }\n\n    // Under certain conditions we never get the Network.responseReceived\n    // event from protocol. @see https://crbug.com/883475\n    if (request.response()) {\n      request.response()?._resolveBody();\n    }\n    this.#forgetRequest(request, true);\n    this.emit(NetworkManagerEvent.RequestFinished, request);\n  }\n\n  #onLoadingFailed(\n    _client: CDPSession,\n    event: Protocol.Network.LoadingFailedEvent\n  ): void {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(\n      event.requestId\n    );\n    if (queuedEvents) {\n      queuedEvents.loadingFailedEvent = event;\n    } else {\n      this.#emitLoadingFailed(event);\n    }\n  }\n\n  #emitLoadingFailed(event: Protocol.Network.LoadingFailedEvent): void {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n      return;\n    }\n    request._failureText = event.errorText;\n    const response = request.response();\n    if (response) {\n      response._resolveBody();\n    }\n    this.#forgetRequest(request, true);\n    this.emit(NetworkManagerEvent.RequestFailed, request);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}