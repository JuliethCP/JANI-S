{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadTs = exports.loadTsSync = exports.loadYaml = exports.loadJson = exports.loadJs = exports.loadJsSync = void 0;\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\nconst path_1 = __importDefault(require(\"path\"));\nconst url_1 = require(\"url\");\nlet importFresh;\nconst loadJsSync = function loadJsSync(filepath) {\n  if (importFresh === undefined) {\n    importFresh = require('import-fresh');\n  }\n  return importFresh(filepath);\n};\nexports.loadJsSync = loadJsSync;\nconst loadJs = async function loadJs(filepath) {\n  try {\n    const {\n      href\n    } = (0, url_1.pathToFileURL)(filepath);\n    return (await import(href)).default;\n  } catch (error) {\n    return (0, exports.loadJsSync)(filepath, '');\n  }\n};\nexports.loadJs = loadJs;\nlet parseJson;\nconst loadJson = function loadJson(filepath, content) {\n  if (parseJson === undefined) {\n    parseJson = require('parse-json');\n  }\n  try {\n    return parseJson(content);\n  } catch (error) {\n    error.message = `JSON Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\nexports.loadJson = loadJson;\nlet yaml;\nconst loadYaml = function loadYaml(filepath, content) {\n  if (yaml === undefined) {\n    yaml = require('js-yaml');\n  }\n  try {\n    return yaml.load(content);\n  } catch (error) {\n    error.message = `YAML Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\nexports.loadYaml = loadYaml;\nlet typescript;\nconst loadTsSync = function loadTsSync(filepath, content) {\n  /* istanbul ignore next -- @preserve */\n  if (typescript === undefined) {\n    typescript = require('typescript');\n  }\n  const compiledFilepath = `${filepath.slice(0, -2)}cjs`;\n  try {\n    const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};\n    config.compilerOptions = {\n      ...config.compilerOptions,\n      module: typescript.ModuleKind.NodeNext,\n      moduleResolution: typescript.ModuleResolutionKind.NodeNext,\n      target: typescript.ScriptTarget.ES2022,\n      noEmit: false\n    };\n    content = typescript.transpileModule(content, config).outputText;\n    (0, fs_1.writeFileSync)(compiledFilepath, content);\n    return (0, exports.loadJsSync)(compiledFilepath, content).default;\n  } catch (error) {\n    error.message = `TypeScript Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  } finally {\n    if ((0, fs_1.existsSync)(compiledFilepath)) {\n      (0, fs_1.rmSync)(compiledFilepath);\n    }\n  }\n};\nexports.loadTsSync = loadTsSync;\nconst loadTs = async function loadTs(filepath, content) {\n  if (typescript === undefined) {\n    typescript = (await import('typescript')).default;\n  }\n  const compiledFilepath = `${filepath.slice(0, -2)}mjs`;\n  try {\n    const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};\n    config.compilerOptions = {\n      ...config.compilerOptions,\n      module: typescript.ModuleKind.ES2022,\n      moduleResolution: typescript.ModuleResolutionKind.Bundler,\n      target: typescript.ScriptTarget.ES2022,\n      noEmit: false\n    };\n    content = typescript.transpileModule(content, config).outputText;\n    await (0, promises_1.writeFile)(compiledFilepath, content);\n    const {\n      href\n    } = (0, url_1.pathToFileURL)(compiledFilepath);\n    return (await import(href)).default;\n  } catch (error) {\n    error.message = `TypeScript Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  } finally {\n    if ((0, fs_1.existsSync)(compiledFilepath)) {\n      await (0, promises_1.rm)(compiledFilepath);\n    }\n  }\n};\nexports.loadTs = loadTs;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction resolveTsConfig(directory) {\n  const filePath = typescript.findConfigFile(directory, fileName => {\n    return typescript.sys.fileExists(fileName);\n  });\n  if (filePath !== undefined) {\n    const {\n      config,\n      error\n    } = typescript.readConfigFile(filePath, path => typescript.sys.readFile(path));\n    if (error) {\n      throw new Error(`Error in ${filePath}: ${error.messageText.toString()}`);\n    }\n    return config;\n  }\n  return;\n}","map":{"version":3,"mappings":"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","names":["importFresh","loadJsSync","filepath","undefined","require","exports","loadJs","href","default","error","parseJson","loadJson","content","message","yaml","loadYaml","load","typescript","loadTsSync","compiledFilepath","slice","config","resolveTsConfig","path_1","dirname","compilerOptions","module","ModuleKind","NodeNext","moduleResolution","ModuleResolutionKind","target","ScriptTarget","ES2022","noEmit","transpileModule","outputText","loadTs","Bundler","directory","filePath","findConfigFile","fileName","sys","fileExists","readConfigFile","path","readFile","Error","messageText","toString"],"sources":["../src/loaders.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}