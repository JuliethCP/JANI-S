{"ast":null,"code":"\"use strict\";\n\n;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar types_1 = tslib_1.__importDefault(require(\"./lib/types\"));\nvar path_visitor_1 = tslib_1.__importDefault(require(\"./lib/path-visitor\"));\nvar equiv_1 = tslib_1.__importDefault(require(\"./lib/equiv\"));\nvar path_1 = tslib_1.__importDefault(require(\"./lib/path\"));\nvar node_path_1 = tslib_1.__importDefault(require(\"./lib/node-path\"));\nfunction default_1(defs) {\n  var fork = createFork();\n  var types = fork.use(types_1.default);\n  defs.forEach(fork.use);\n  types.finalize();\n  var PathVisitor = fork.use(path_visitor_1.default);\n  return {\n    Type: types.Type,\n    builtInTypes: types.builtInTypes,\n    namedTypes: types.namedTypes,\n    builders: types.builders,\n    defineMethod: types.defineMethod,\n    getFieldNames: types.getFieldNames,\n    getFieldValue: types.getFieldValue,\n    eachField: types.eachField,\n    someField: types.someField,\n    getSupertypeNames: types.getSupertypeNames,\n    getBuilderName: types.getBuilderName,\n    astNodesAreEquivalent: fork.use(equiv_1.default),\n    finalize: types.finalize,\n    Path: fork.use(path_1.default),\n    NodePath: fork.use(node_path_1.default),\n    PathVisitor: PathVisitor,\n    use: fork.use,\n    visit: PathVisitor.visit\n  };\n}\nexports.default = default_1;\nfunction createFork() {\n  var used = [];\n  var usedResult = [];\n  function use(plugin) {\n    var idx = used.indexOf(plugin);\n    if (idx === -1) {\n      idx = used.length;\n      used.push(plugin);\n      usedResult[idx] = plugin(fork);\n    }\n    return usedResult[idx];\n  }\n  var fork = {\n    use: use\n  };\n  return fork;\n}\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib_1","require","types_1","__importDefault","path_visitor_1","equiv_1","path_1","node_path_1","default_1","defs","fork","createFork","types","use","default","forEach","finalize","PathVisitor","Type","builtInTypes","namedTypes","builders","defineMethod","getFieldNames","getFieldValue","eachField","someField","getSupertypeNames","getBuilderName","astNodesAreEquivalent","Path","NodePath","visit","used","usedResult","plugin","idx","indexOf","length","push","module"],"sources":["D:/Julieth-Campos/PSO/node_modules/ast-types/fork.js"],"sourcesContent":["\"use strict\";;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar types_1 = tslib_1.__importDefault(require(\"./lib/types\"));\nvar path_visitor_1 = tslib_1.__importDefault(require(\"./lib/path-visitor\"));\nvar equiv_1 = tslib_1.__importDefault(require(\"./lib/equiv\"));\nvar path_1 = tslib_1.__importDefault(require(\"./lib/path\"));\nvar node_path_1 = tslib_1.__importDefault(require(\"./lib/node-path\"));\nfunction default_1(defs) {\n    var fork = createFork();\n    var types = fork.use(types_1.default);\n    defs.forEach(fork.use);\n    types.finalize();\n    var PathVisitor = fork.use(path_visitor_1.default);\n    return {\n        Type: types.Type,\n        builtInTypes: types.builtInTypes,\n        namedTypes: types.namedTypes,\n        builders: types.builders,\n        defineMethod: types.defineMethod,\n        getFieldNames: types.getFieldNames,\n        getFieldValue: types.getFieldValue,\n        eachField: types.eachField,\n        someField: types.someField,\n        getSupertypeNames: types.getSupertypeNames,\n        getBuilderName: types.getBuilderName,\n        astNodesAreEquivalent: fork.use(equiv_1.default),\n        finalize: types.finalize,\n        Path: fork.use(path_1.default),\n        NodePath: fork.use(node_path_1.default),\n        PathVisitor: PathVisitor,\n        use: fork.use,\n        visit: PathVisitor.visit,\n    };\n}\nexports.default = default_1;\nfunction createFork() {\n    var used = [];\n    var usedResult = [];\n    function use(plugin) {\n        var idx = used.indexOf(plugin);\n        if (idx === -1) {\n            idx = used.length;\n            used.push(plugin);\n            usedResult[idx] = plugin(fork);\n        }\n        return usedResult[idx];\n    }\n    var fork = { use: use };\n    return fork;\n}\nmodule.exports = exports[\"default\"];\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}