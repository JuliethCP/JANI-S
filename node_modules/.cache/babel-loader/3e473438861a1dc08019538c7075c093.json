{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst path = require('path');\nconst invalidWin32Path = require('./win32').invalidWin32Path;\nconst o777 = parseInt('0777', 8);\nfunction mkdirs(p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (!opts || typeof opts !== 'object') {\n    opts = {\n      mode: opts\n    };\n  }\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    const errInval = new Error(p + ' contains invalid WIN32 path characters.');\n    errInval.code = 'EINVAL';\n    return callback(errInval);\n  }\n  let mode = opts.mode;\n  const xfs = opts.fs || fs;\n  if (mode === undefined) {\n    mode = o777 & ~process.umask();\n  }\n  if (!made) made = null;\n  callback = callback || function () {};\n  p = path.resolve(p);\n  xfs.mkdir(p, mode, er => {\n    if (!er) {\n      made = made || p;\n      return callback(null, made);\n    }\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er);\n        mkdirs(path.dirname(p), opts, (er, made) => {\n          if (er) callback(er, made);else mkdirs(p, opts, callback, made);\n        });\n        break;\n\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n      default:\n        xfs.stat(p, (er2, stat) => {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) callback(er, made);else callback(null, made);\n        });\n        break;\n    }\n  });\n}\nmodule.exports = mkdirs;","map":{"version":3,"names":["fs","require","path","invalidWin32Path","o777","parseInt","mkdirs","p","opts","callback","made","mode","process","platform","errInval","Error","code","xfs","undefined","umask","resolve","mkdir","er","dirname","stat","er2","isDirectory","module","exports"],"sources":["D:/Julieth-Campos/PSO/node_modules/get-uri/node_modules/fs-extra/lib/mkdirs/mkdirs.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst invalidWin32Path = require('./win32').invalidWin32Path\n\nconst o777 = parseInt('0777', 8)\n\nfunction mkdirs (p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  } else if (!opts || typeof opts !== 'object') {\n    opts = { mode: opts }\n  }\n\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    const errInval = new Error(p + ' contains invalid WIN32 path characters.')\n    errInval.code = 'EINVAL'\n    return callback(errInval)\n  }\n\n  let mode = opts.mode\n  const xfs = opts.fs || fs\n\n  if (mode === undefined) {\n    mode = o777 & (~process.umask())\n  }\n  if (!made) made = null\n\n  callback = callback || function () {}\n  p = path.resolve(p)\n\n  xfs.mkdir(p, mode, er => {\n    if (!er) {\n      made = made || p\n      return callback(null, made)\n    }\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er)\n        mkdirs(path.dirname(p), opts, (er, made) => {\n          if (er) callback(er, made)\n          else mkdirs(p, opts, callback, made)\n        })\n        break\n\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n      default:\n        xfs.stat(p, (er2, stat) => {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) callback(er, made)\n          else callback(null, made)\n        })\n        break\n    }\n  })\n}\n\nmodule.exports = mkdirs\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAa,CAAC;AACjC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,gBAAgB,GAAGF,OAAO,CAAC,SAAS,CAAC,CAACE,gBAAgB;AAE5D,MAAMC,IAAI,GAAGC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;AAEhC,SAASC,MAAM,CAAEC,CAAC,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACxC,IAAI,OAAOF,IAAI,KAAK,UAAU,EAAE;IAC9BC,QAAQ,GAAGD,IAAI;IACfA,IAAI,GAAG,CAAC,CAAC;EACX,CAAC,MAAM,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5CA,IAAI,GAAG;MAAEG,IAAI,EAAEH;IAAK,CAAC;EACvB;EAEA,IAAII,OAAO,CAACC,QAAQ,KAAK,OAAO,IAAIV,gBAAgB,CAACI,CAAC,CAAC,EAAE;IACvD,MAAMO,QAAQ,GAAG,IAAIC,KAAK,CAACR,CAAC,GAAG,0CAA0C,CAAC;IAC1EO,QAAQ,CAACE,IAAI,GAAG,QAAQ;IACxB,OAAOP,QAAQ,CAACK,QAAQ,CAAC;EAC3B;EAEA,IAAIH,IAAI,GAAGH,IAAI,CAACG,IAAI;EACpB,MAAMM,GAAG,GAAGT,IAAI,CAACR,EAAE,IAAIA,EAAE;EAEzB,IAAIW,IAAI,KAAKO,SAAS,EAAE;IACtBP,IAAI,GAAGP,IAAI,GAAI,CAACQ,OAAO,CAACO,KAAK,EAAG;EAClC;EACA,IAAI,CAACT,IAAI,EAAEA,IAAI,GAAG,IAAI;EAEtBD,QAAQ,GAAGA,QAAQ,IAAI,YAAY,CAAC,CAAC;EACrCF,CAAC,GAAGL,IAAI,CAACkB,OAAO,CAACb,CAAC,CAAC;EAEnBU,GAAG,CAACI,KAAK,CAACd,CAAC,EAAEI,IAAI,EAAEW,EAAE,IAAI;IACvB,IAAI,CAACA,EAAE,EAAE;MACPZ,IAAI,GAAGA,IAAI,IAAIH,CAAC;MAChB,OAAOE,QAAQ,CAAC,IAAI,EAAEC,IAAI,CAAC;IAC7B;IACA,QAAQY,EAAE,CAACN,IAAI;MACb,KAAK,QAAQ;QACX,IAAId,IAAI,CAACqB,OAAO,CAAChB,CAAC,CAAC,KAAKA,CAAC,EAAE,OAAOE,QAAQ,CAACa,EAAE,CAAC;QAC9ChB,MAAM,CAACJ,IAAI,CAACqB,OAAO,CAAChB,CAAC,CAAC,EAAEC,IAAI,EAAE,CAACc,EAAE,EAAEZ,IAAI,KAAK;UAC1C,IAAIY,EAAE,EAAEb,QAAQ,CAACa,EAAE,EAAEZ,IAAI,CAAC,MACrBJ,MAAM,CAACC,CAAC,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,CAAC;QACtC,CAAC,CAAC;QACF;;MAEF;MACA;MACA;MACA;QACEO,GAAG,CAACO,IAAI,CAACjB,CAAC,EAAE,CAACkB,GAAG,EAAED,IAAI,KAAK;UACzB;UACA;UACA,IAAIC,GAAG,IAAI,CAACD,IAAI,CAACE,WAAW,EAAE,EAAEjB,QAAQ,CAACa,EAAE,EAAEZ,IAAI,CAAC,MAC7CD,QAAQ,CAAC,IAAI,EAAEC,IAAI,CAAC;QAC3B,CAAC,CAAC;QACF;IAAK;EAEX,CAAC,CAAC;AACJ;AAEAiB,MAAM,CAACC,OAAO,GAAGtB,MAAM"},"metadata":{},"sourceType":"script"}