{"ast":null,"code":"/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CDPSession, CDPSessionEvent } from '../api/CDPSession.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { debugError } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { CdpTarget, InitializationStatus } from './Target.js';\nfunction isPageTargetBecomingPrimary(target, newTargetInfo) {\n  return Boolean(target._subtype()) && !newTargetInfo.subtype;\n}\n/**\n * ChromeTargetManager uses the CDP's auto-attach mechanism to intercept\n * new targets and allow the rest of Puppeteer to configure listeners while\n * the target is paused.\n *\n * @internal\n */\nexport class ChromeTargetManager extends EventEmitter {\n  #connection;\n  /**\n   * Keeps track of the following events: 'Target.targetCreated',\n   * 'Target.targetDestroyed', 'Target.targetInfoChanged'.\n   *\n   * A target becomes discovered when 'Target.targetCreated' is received.\n   * A target is removed from this map once 'Target.targetDestroyed' is\n   * received.\n   *\n   * `targetFilterCallback` has no effect on this map.\n   */\n  #discoveredTargetsByTargetId = new Map();\n  /**\n   * A target is added to this map once ChromeTargetManager has created\n   * a Target and attached at least once to it.\n   */\n  #attachedTargetsByTargetId = new Map();\n  /**\n   * Tracks which sessions attach to which target.\n   */\n  #attachedTargetsBySessionId = new Map();\n  /**\n   * If a target was filtered out by `targetFilterCallback`, we still receive\n   * events about it from CDP, but we don't forward them to the rest of Puppeteer.\n   */\n  #ignoredTargets = new Set();\n  #targetFilterCallback;\n  #targetFactory;\n  #attachedToTargetListenersBySession = new WeakMap();\n  #detachedFromTargetListenersBySession = new WeakMap();\n  #initializeDeferred = Deferred.create();\n  #targetsIdsForInit = new Set();\n  #waitForInitiallyDiscoveredTargets = true;\n  #discoveryFilter = [{}];\n  constructor(connection, targetFactory, targetFilterCallback) {\n    let waitForInitiallyDiscoveredTargets = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    super();\n    this.#connection = connection;\n    this.#targetFilterCallback = targetFilterCallback;\n    this.#targetFactory = targetFactory;\n    this.#waitForInitiallyDiscoveredTargets = waitForInitiallyDiscoveredTargets;\n    this.#connection.on('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.on('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.on('Target.targetInfoChanged', this.#onTargetInfoChanged);\n    this.#connection.on(CDPSessionEvent.SessionDetached, this.#onSessionDetached);\n    this.#setupAttachmentListeners(this.#connection);\n  }\n  #storeExistingTargetsForInit = () => {\n    if (!this.#waitForInitiallyDiscoveredTargets) {\n      return;\n    }\n    for (const [targetId, targetInfo] of this.#discoveredTargetsByTargetId.entries()) {\n      const targetForFilter = new CdpTarget(targetInfo, undefined, undefined, this, undefined);\n      if ((!this.#targetFilterCallback || this.#targetFilterCallback(targetForFilter)) && targetInfo.type !== 'browser') {\n        this.#targetsIdsForInit.add(targetId);\n      }\n    }\n  };\n  async initialize() {\n    await this.#connection.send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: this.#discoveryFilter\n    });\n    this.#storeExistingTargetsForInit();\n    await this.#connection.send('Target.setAutoAttach', {\n      waitForDebuggerOnStart: true,\n      flatten: true,\n      autoAttach: true,\n      filter: [{\n        type: 'page',\n        exclude: true\n      }, ...this.#discoveryFilter]\n    });\n    this.#finishInitializationIfReady();\n    await this.#initializeDeferred.valueOrThrow();\n  }\n  dispose() {\n    this.#connection.off('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.off('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.off('Target.targetInfoChanged', this.#onTargetInfoChanged);\n    this.#connection.off(CDPSessionEvent.SessionDetached, this.#onSessionDetached);\n    this.#removeAttachmentListeners(this.#connection);\n  }\n  getAvailableTargets() {\n    return this.#attachedTargetsByTargetId;\n  }\n  #setupAttachmentListeners(session) {\n    const listener = event => {\n      void this.#onAttachedToTarget(session, event);\n    };\n    assert(!this.#attachedToTargetListenersBySession.has(session));\n    this.#attachedToTargetListenersBySession.set(session, listener);\n    session.on('Target.attachedToTarget', listener);\n    const detachedListener = event => {\n      return this.#onDetachedFromTarget(session, event);\n    };\n    assert(!this.#detachedFromTargetListenersBySession.has(session));\n    this.#detachedFromTargetListenersBySession.set(session, detachedListener);\n    session.on('Target.detachedFromTarget', detachedListener);\n  }\n  #removeAttachmentListeners(session) {\n    const listener = this.#attachedToTargetListenersBySession.get(session);\n    if (listener) {\n      session.off('Target.attachedToTarget', listener);\n      this.#attachedToTargetListenersBySession.delete(session);\n    }\n    if (this.#detachedFromTargetListenersBySession.has(session)) {\n      session.off('Target.detachedFromTarget', this.#detachedFromTargetListenersBySession.get(session));\n      this.#detachedFromTargetListenersBySession.delete(session);\n    }\n  }\n  #onSessionDetached = session => {\n    this.#removeAttachmentListeners(session);\n  };\n  #onTargetCreated = async event => {\n    this.#discoveredTargetsByTargetId.set(event.targetInfo.targetId, event.targetInfo);\n    this.emit(\"targetDiscovered\" /* TargetManagerEvent.TargetDiscovered */, event.targetInfo);\n    // The connection is already attached to the browser target implicitly,\n    // therefore, no new CDPSession is created and we have special handling\n    // here.\n    if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n      if (this.#attachedTargetsByTargetId.has(event.targetInfo.targetId)) {\n        return;\n      }\n      const target = this.#targetFactory(event.targetInfo, undefined);\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(event.targetInfo.targetId, target);\n    }\n  };\n  #onTargetDestroyed = event => {\n    const targetInfo = this.#discoveredTargetsByTargetId.get(event.targetId);\n    this.#discoveredTargetsByTargetId.delete(event.targetId);\n    this.#finishInitializationIfReady(event.targetId);\n    if (targetInfo?.type === 'service_worker' && this.#attachedTargetsByTargetId.has(event.targetId)) {\n      // Special case for service workers: report TargetGone event when\n      // the worker is destroyed.\n      const target = this.#attachedTargetsByTargetId.get(event.targetId);\n      if (target) {\n        this.emit(\"targetGone\" /* TargetManagerEvent.TargetGone */, target);\n        this.#attachedTargetsByTargetId.delete(event.targetId);\n      }\n    }\n  };\n  #onTargetInfoChanged = event => {\n    this.#discoveredTargetsByTargetId.set(event.targetInfo.targetId, event.targetInfo);\n    if (this.#ignoredTargets.has(event.targetInfo.targetId) || !this.#attachedTargetsByTargetId.has(event.targetInfo.targetId) || !event.targetInfo.attached) {\n      return;\n    }\n    const target = this.#attachedTargetsByTargetId.get(event.targetInfo.targetId);\n    if (!target) {\n      return;\n    }\n    const previousURL = target.url();\n    const wasInitialized = target._initializedDeferred.value() === InitializationStatus.SUCCESS;\n    if (isPageTargetBecomingPrimary(target, event.targetInfo)) {\n      const session = target?._session();\n      assert(session, 'Target that is being activated is missing a CDPSession.');\n      session.parentSession()?.emit(CDPSessionEvent.Swapped, session);\n    }\n    target._targetInfoChanged(event.targetInfo);\n    if (wasInitialized && previousURL !== target.url()) {\n      this.emit(\"targetChanged\" /* TargetManagerEvent.TargetChanged */, {\n        target,\n        wasInitialized,\n        previousURL\n      });\n    }\n  };\n  #onAttachedToTarget = async (parentSession, event) => {\n    const targetInfo = event.targetInfo;\n    const session = this.#connection.session(event.sessionId);\n    if (!session) {\n      throw new Error(`Session ${event.sessionId} was not created.`);\n    }\n    const silentDetach = async () => {\n      await session.send('Runtime.runIfWaitingForDebugger').catch(debugError);\n      // We don't use `session.detach()` because that dispatches all commands on\n      // the connection instead of the parent session.\n      await parentSession.send('Target.detachFromTarget', {\n        sessionId: session.id()\n      }).catch(debugError);\n    };\n    if (!this.#connection.isAutoAttached(targetInfo.targetId)) {\n      return;\n    }\n    // Special case for service workers: being attached to service workers will\n    // prevent them from ever being destroyed. Therefore, we silently detach\n    // from service workers unless the connection was manually created via\n    // `page.worker()`. To determine this, we use\n    // `this.#connection.isAutoAttached(targetInfo.targetId)`. In the future, we\n    // should determine if a target is auto-attached or not with the help of\n    // CDP.\n    if (targetInfo.type === 'service_worker') {\n      this.#finishInitializationIfReady(targetInfo.targetId);\n      await silentDetach();\n      if (this.#attachedTargetsByTargetId.has(targetInfo.targetId)) {\n        return;\n      }\n      const target = this.#targetFactory(targetInfo);\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(targetInfo.targetId, target);\n      this.emit(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, target);\n      return;\n    }\n    const isExistingTarget = this.#attachedTargetsByTargetId.has(targetInfo.targetId);\n    const target = isExistingTarget ? this.#attachedTargetsByTargetId.get(targetInfo.targetId) : this.#targetFactory(targetInfo, session, parentSession instanceof CDPSession ? parentSession : undefined);\n    if (this.#targetFilterCallback && !this.#targetFilterCallback(target)) {\n      this.#ignoredTargets.add(targetInfo.targetId);\n      this.#finishInitializationIfReady(targetInfo.targetId);\n      await silentDetach();\n      return;\n    }\n    this.#setupAttachmentListeners(session);\n    if (isExistingTarget) {\n      session._setTarget(target);\n      this.#attachedTargetsBySessionId.set(session.id(), this.#attachedTargetsByTargetId.get(targetInfo.targetId));\n    } else {\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(targetInfo.targetId, target);\n      this.#attachedTargetsBySessionId.set(session.id(), target);\n    }\n    if (parentSession instanceof CDPSession) {\n      parentSession.emit(CDPSessionEvent.Ready, session);\n    } else {\n      parentSession.emit(CDPSessionEvent.Ready, session);\n    }\n    this.#targetsIdsForInit.delete(target._targetId);\n    if (!isExistingTarget) {\n      this.emit(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, target);\n    }\n    this.#finishInitializationIfReady();\n    // TODO: the browser might be shutting down here. What do we do with the\n    // error?\n    await Promise.all([session.send('Target.setAutoAttach', {\n      waitForDebuggerOnStart: true,\n      flatten: true,\n      autoAttach: true,\n      filter: this.#discoveryFilter\n    }), session.send('Runtime.runIfWaitingForDebugger')]).catch(debugError);\n  };\n  #finishInitializationIfReady(targetId) {\n    targetId !== undefined && this.#targetsIdsForInit.delete(targetId);\n    if (this.#targetsIdsForInit.size === 0) {\n      this.#initializeDeferred.resolve();\n    }\n  }\n  #onDetachedFromTarget = (_parentSession, event) => {\n    const target = this.#attachedTargetsBySessionId.get(event.sessionId);\n    this.#attachedTargetsBySessionId.delete(event.sessionId);\n    if (!target) {\n      return;\n    }\n    this.#attachedTargetsByTargetId.delete(target._targetId);\n    this.emit(\"targetGone\" /* TargetManagerEvent.TargetGone */, target);\n  };\n}","map":{"version":3,"mappings":"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","names":["CDPSession","CDPSessionEvent","EventEmitter","debugError","assert","Deferred","CdpTarget","InitializationStatus","isPageTargetBecomingPrimary","target","newTargetInfo","Boolean","_subtype","subtype","ChromeTargetManager","Map","Set","WeakMap","create","constructor","connection","targetFactory","targetFilterCallback","waitForInitiallyDiscoveredTargets","on","SessionDetached","targetId","targetInfo","entries","targetForFilter","undefined","type","add","initialize","send","discover","filter","waitForDebuggerOnStart","flatten","autoAttach","exclude","valueOrThrow","dispose","off","getAvailableTargets","session","listener","event","has","set","detachedListener","get","delete","emit","attached","_initialize","previousURL","url","wasInitialized","_initializedDeferred","value","SUCCESS","_session","parentSession","Swapped","_targetInfoChanged","sessionId","Error","silentDetach","catch","id","isAutoAttached","isExistingTarget","_setTarget","Ready","_targetId","Promise","all","size","resolve","_parentSession"],"sources":["D:\\Julieth-Campos\\PSO\\node_modules\\puppeteer-core\\src\\cdp\\ChromeTargetManager.ts"],"sourcesContent":["/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {TargetFilterCallback} from '../api/Browser.js';\nimport {CDPSession, CDPSessionEvent} from '../api/CDPSession.js';\nimport {EventEmitter} from '../common/EventEmitter.js';\nimport {debugError} from '../common/util.js';\nimport {assert} from '../util/assert.js';\nimport {Deferred} from '../util/Deferred.js';\n\nimport type {CdpCDPSession} from './CDPSession.js';\nimport type {Connection} from './Connection.js';\nimport {CdpTarget, InitializationStatus} from './Target.js';\nimport {\n  type TargetFactory,\n  type TargetManager,\n  TargetManagerEvent,\n  type TargetManagerEvents,\n} from './TargetManager.js';\n\nfunction isPageTargetBecomingPrimary(\n  target: CdpTarget,\n  newTargetInfo: Protocol.Target.TargetInfo\n): boolean {\n  return Boolean(target._subtype()) && !newTargetInfo.subtype;\n}\n\n/**\n * ChromeTargetManager uses the CDP's auto-attach mechanism to intercept\n * new targets and allow the rest of Puppeteer to configure listeners while\n * the target is paused.\n *\n * @internal\n */\nexport class ChromeTargetManager\n  extends EventEmitter<TargetManagerEvents>\n  implements TargetManager\n{\n  #connection: Connection;\n  /**\n   * Keeps track of the following events: 'Target.targetCreated',\n   * 'Target.targetDestroyed', 'Target.targetInfoChanged'.\n   *\n   * A target becomes discovered when 'Target.targetCreated' is received.\n   * A target is removed from this map once 'Target.targetDestroyed' is\n   * received.\n   *\n   * `targetFilterCallback` has no effect on this map.\n   */\n  #discoveredTargetsByTargetId = new Map<string, Protocol.Target.TargetInfo>();\n  /**\n   * A target is added to this map once ChromeTargetManager has created\n   * a Target and attached at least once to it.\n   */\n  #attachedTargetsByTargetId = new Map<string, CdpTarget>();\n  /**\n   * Tracks which sessions attach to which target.\n   */\n  #attachedTargetsBySessionId = new Map<string, CdpTarget>();\n  /**\n   * If a target was filtered out by `targetFilterCallback`, we still receive\n   * events about it from CDP, but we don't forward them to the rest of Puppeteer.\n   */\n  #ignoredTargets = new Set<string>();\n  #targetFilterCallback: TargetFilterCallback | undefined;\n  #targetFactory: TargetFactory;\n\n  #attachedToTargetListenersBySession = new WeakMap<\n    CDPSession | Connection,\n    (event: Protocol.Target.AttachedToTargetEvent) => void\n  >();\n  #detachedFromTargetListenersBySession = new WeakMap<\n    CDPSession | Connection,\n    (event: Protocol.Target.DetachedFromTargetEvent) => void\n  >();\n\n  #initializeDeferred = Deferred.create<void>();\n  #targetsIdsForInit = new Set<string>();\n  #waitForInitiallyDiscoveredTargets = true;\n\n  #discoveryFilter: Protocol.Target.FilterEntry[] = [{}];\n\n  constructor(\n    connection: Connection,\n    targetFactory: TargetFactory,\n    targetFilterCallback?: TargetFilterCallback,\n    waitForInitiallyDiscoveredTargets = true\n  ) {\n    super();\n    this.#connection = connection;\n    this.#targetFilterCallback = targetFilterCallback;\n    this.#targetFactory = targetFactory;\n    this.#waitForInitiallyDiscoveredTargets = waitForInitiallyDiscoveredTargets;\n\n    this.#connection.on('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.on('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.on('Target.targetInfoChanged', this.#onTargetInfoChanged);\n    this.#connection.on(\n      CDPSessionEvent.SessionDetached,\n      this.#onSessionDetached\n    );\n    this.#setupAttachmentListeners(this.#connection);\n  }\n\n  #storeExistingTargetsForInit = () => {\n    if (!this.#waitForInitiallyDiscoveredTargets) {\n      return;\n    }\n    for (const [\n      targetId,\n      targetInfo,\n    ] of this.#discoveredTargetsByTargetId.entries()) {\n      const targetForFilter = new CdpTarget(\n        targetInfo,\n        undefined,\n        undefined,\n        this,\n        undefined\n      );\n      if (\n        (!this.#targetFilterCallback ||\n          this.#targetFilterCallback(targetForFilter)) &&\n        targetInfo.type !== 'browser'\n      ) {\n        this.#targetsIdsForInit.add(targetId);\n      }\n    }\n  };\n\n  async initialize(): Promise<void> {\n    await this.#connection.send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: this.#discoveryFilter,\n    });\n\n    this.#storeExistingTargetsForInit();\n\n    await this.#connection.send('Target.setAutoAttach', {\n      waitForDebuggerOnStart: true,\n      flatten: true,\n      autoAttach: true,\n      filter: [\n        {\n          type: 'page',\n          exclude: true,\n        },\n        ...this.#discoveryFilter,\n      ],\n    });\n    this.#finishInitializationIfReady();\n    await this.#initializeDeferred.valueOrThrow();\n  }\n\n  dispose(): void {\n    this.#connection.off('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.off('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.off('Target.targetInfoChanged', this.#onTargetInfoChanged);\n    this.#connection.off(\n      CDPSessionEvent.SessionDetached,\n      this.#onSessionDetached\n    );\n\n    this.#removeAttachmentListeners(this.#connection);\n  }\n\n  getAvailableTargets(): ReadonlyMap<string, CdpTarget> {\n    return this.#attachedTargetsByTargetId;\n  }\n\n  #setupAttachmentListeners(session: CDPSession | Connection): void {\n    const listener = (event: Protocol.Target.AttachedToTargetEvent) => {\n      void this.#onAttachedToTarget(session, event);\n    };\n    assert(!this.#attachedToTargetListenersBySession.has(session));\n    this.#attachedToTargetListenersBySession.set(session, listener);\n    session.on('Target.attachedToTarget', listener);\n\n    const detachedListener = (\n      event: Protocol.Target.DetachedFromTargetEvent\n    ) => {\n      return this.#onDetachedFromTarget(session, event);\n    };\n    assert(!this.#detachedFromTargetListenersBySession.has(session));\n    this.#detachedFromTargetListenersBySession.set(session, detachedListener);\n    session.on('Target.detachedFromTarget', detachedListener);\n  }\n\n  #removeAttachmentListeners(session: CDPSession | Connection): void {\n    const listener = this.#attachedToTargetListenersBySession.get(session);\n    if (listener) {\n      session.off('Target.attachedToTarget', listener);\n      this.#attachedToTargetListenersBySession.delete(session);\n    }\n\n    if (this.#detachedFromTargetListenersBySession.has(session)) {\n      session.off(\n        'Target.detachedFromTarget',\n        this.#detachedFromTargetListenersBySession.get(session)!\n      );\n      this.#detachedFromTargetListenersBySession.delete(session);\n    }\n  }\n\n  #onSessionDetached = (session: CDPSession) => {\n    this.#removeAttachmentListeners(session);\n  };\n\n  #onTargetCreated = async (event: Protocol.Target.TargetCreatedEvent) => {\n    this.#discoveredTargetsByTargetId.set(\n      event.targetInfo.targetId,\n      event.targetInfo\n    );\n\n    this.emit(TargetManagerEvent.TargetDiscovered, event.targetInfo);\n\n    // The connection is already attached to the browser target implicitly,\n    // therefore, no new CDPSession is created and we have special handling\n    // here.\n    if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n      if (this.#attachedTargetsByTargetId.has(event.targetInfo.targetId)) {\n        return;\n      }\n      const target = this.#targetFactory(event.targetInfo, undefined);\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(event.targetInfo.targetId, target);\n    }\n  };\n\n  #onTargetDestroyed = (event: Protocol.Target.TargetDestroyedEvent) => {\n    const targetInfo = this.#discoveredTargetsByTargetId.get(event.targetId);\n    this.#discoveredTargetsByTargetId.delete(event.targetId);\n    this.#finishInitializationIfReady(event.targetId);\n    if (\n      targetInfo?.type === 'service_worker' &&\n      this.#attachedTargetsByTargetId.has(event.targetId)\n    ) {\n      // Special case for service workers: report TargetGone event when\n      // the worker is destroyed.\n      const target = this.#attachedTargetsByTargetId.get(event.targetId);\n      if (target) {\n        this.emit(TargetManagerEvent.TargetGone, target);\n        this.#attachedTargetsByTargetId.delete(event.targetId);\n      }\n    }\n  };\n\n  #onTargetInfoChanged = (event: Protocol.Target.TargetInfoChangedEvent) => {\n    this.#discoveredTargetsByTargetId.set(\n      event.targetInfo.targetId,\n      event.targetInfo\n    );\n\n    if (\n      this.#ignoredTargets.has(event.targetInfo.targetId) ||\n      !this.#attachedTargetsByTargetId.has(event.targetInfo.targetId) ||\n      !event.targetInfo.attached\n    ) {\n      return;\n    }\n\n    const target = this.#attachedTargetsByTargetId.get(\n      event.targetInfo.targetId\n    );\n    if (!target) {\n      return;\n    }\n    const previousURL = target.url();\n    const wasInitialized =\n      target._initializedDeferred.value() === InitializationStatus.SUCCESS;\n\n    if (isPageTargetBecomingPrimary(target, event.targetInfo)) {\n      const session = target?._session();\n      assert(\n        session,\n        'Target that is being activated is missing a CDPSession.'\n      );\n      session.parentSession()?.emit(CDPSessionEvent.Swapped, session);\n    }\n\n    target._targetInfoChanged(event.targetInfo);\n\n    if (wasInitialized && previousURL !== target.url()) {\n      this.emit(TargetManagerEvent.TargetChanged, {\n        target,\n        wasInitialized,\n        previousURL,\n      });\n    }\n  };\n\n  #onAttachedToTarget = async (\n    parentSession: Connection | CDPSession,\n    event: Protocol.Target.AttachedToTargetEvent\n  ) => {\n    const targetInfo = event.targetInfo;\n    const session = this.#connection.session(event.sessionId);\n    if (!session) {\n      throw new Error(`Session ${event.sessionId} was not created.`);\n    }\n\n    const silentDetach = async () => {\n      await session.send('Runtime.runIfWaitingForDebugger').catch(debugError);\n      // We don't use `session.detach()` because that dispatches all commands on\n      // the connection instead of the parent session.\n      await parentSession\n        .send('Target.detachFromTarget', {\n          sessionId: session.id(),\n        })\n        .catch(debugError);\n    };\n\n    if (!this.#connection.isAutoAttached(targetInfo.targetId)) {\n      return;\n    }\n\n    // Special case for service workers: being attached to service workers will\n    // prevent them from ever being destroyed. Therefore, we silently detach\n    // from service workers unless the connection was manually created via\n    // `page.worker()`. To determine this, we use\n    // `this.#connection.isAutoAttached(targetInfo.targetId)`. In the future, we\n    // should determine if a target is auto-attached or not with the help of\n    // CDP.\n    if (targetInfo.type === 'service_worker') {\n      this.#finishInitializationIfReady(targetInfo.targetId);\n      await silentDetach();\n      if (this.#attachedTargetsByTargetId.has(targetInfo.targetId)) {\n        return;\n      }\n      const target = this.#targetFactory(targetInfo);\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(targetInfo.targetId, target);\n      this.emit(TargetManagerEvent.TargetAvailable, target);\n      return;\n    }\n\n    const isExistingTarget = this.#attachedTargetsByTargetId.has(\n      targetInfo.targetId\n    );\n\n    const target = isExistingTarget\n      ? this.#attachedTargetsByTargetId.get(targetInfo.targetId)!\n      : this.#targetFactory(\n          targetInfo,\n          session,\n          parentSession instanceof CDPSession ? parentSession : undefined\n        );\n\n    if (this.#targetFilterCallback && !this.#targetFilterCallback(target)) {\n      this.#ignoredTargets.add(targetInfo.targetId);\n      this.#finishInitializationIfReady(targetInfo.targetId);\n      await silentDetach();\n      return;\n    }\n\n    this.#setupAttachmentListeners(session);\n\n    if (isExistingTarget) {\n      (session as CdpCDPSession)._setTarget(target);\n      this.#attachedTargetsBySessionId.set(\n        session.id(),\n        this.#attachedTargetsByTargetId.get(targetInfo.targetId)!\n      );\n    } else {\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(targetInfo.targetId, target);\n      this.#attachedTargetsBySessionId.set(session.id(), target);\n    }\n\n    if (parentSession instanceof CDPSession) {\n      parentSession.emit(CDPSessionEvent.Ready, session);\n    } else {\n      parentSession.emit(CDPSessionEvent.Ready, session);\n    }\n\n    this.#targetsIdsForInit.delete(target._targetId);\n    if (!isExistingTarget) {\n      this.emit(TargetManagerEvent.TargetAvailable, target);\n    }\n    this.#finishInitializationIfReady();\n\n    // TODO: the browser might be shutting down here. What do we do with the\n    // error?\n    await Promise.all([\n      session.send('Target.setAutoAttach', {\n        waitForDebuggerOnStart: true,\n        flatten: true,\n        autoAttach: true,\n        filter: this.#discoveryFilter,\n      }),\n      session.send('Runtime.runIfWaitingForDebugger'),\n    ]).catch(debugError);\n  };\n\n  #finishInitializationIfReady(targetId?: string): void {\n    targetId !== undefined && this.#targetsIdsForInit.delete(targetId);\n    if (this.#targetsIdsForInit.size === 0) {\n      this.#initializeDeferred.resolve();\n    }\n  }\n\n  #onDetachedFromTarget = (\n    _parentSession: Connection | CDPSession,\n    event: Protocol.Target.DetachedFromTargetEvent\n  ) => {\n    const target = this.#attachedTargetsBySessionId.get(event.sessionId);\n\n    this.#attachedTargetsBySessionId.delete(event.sessionId);\n\n    if (!target) {\n      return;\n    }\n\n    this.#attachedTargetsByTargetId.delete(target._targetId);\n    this.emit(TargetManagerEvent.TargetGone, target);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}